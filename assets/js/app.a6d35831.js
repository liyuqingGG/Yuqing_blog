(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,a,s=e[0],c=e[1],l=e[2],u=0,p=[];u<s.length;u++)a=s[u],Object.prototype.hasOwnProperty.call(i,a)&&i[a]&&p.push(i[a][0]),i[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(d&&d(e);p.length;)p.shift()();return o.push.apply(o,l||[]),t()}function t(){for(var n,e=0;e<o.length;e++){for(var t=o[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==i[c]&&(r=!1)}r&&(o.splice(e--,1),n=a(a.s=t[0]))}return n}var r={},i={1:0},o=[];function a(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,a),t.l=!0,t.exports}a.e=function(n){var e=[],t=i[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=i[n]=[e,r]}));e.push(t[2]=r);var o,s=document.createElement("script");s.charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.src=function(n){return a.p+"assets/js/"+({}[n]||n)+"."+{2:"314e11b9",3:"816a9355",4:"f57e1681",5:"f663fcf9",6:"3ad77500",7:"b1e39daf",8:"def2d27b",9:"98a5ce15",10:"bde601a1",11:"eb630bab",12:"0446945a",13:"b677dc44",14:"5d72f30d",15:"54a87c6a",16:"5757e430",17:"69532cd9",18:"a5601b64",19:"8e71cf3b",20:"d3e478b2",21:"f85281d5",22:"3d078bf6",23:"96a80dbc",24:"6150f363",25:"184a20a3",26:"d37fb4fa",27:"7c527ac9",28:"3bc0efd3",29:"60102d99",30:"ecf5e1dc",31:"adcdc612",32:"ab272ef6",33:"fd626be7",34:"f7983759",35:"1da15e5d",36:"613bf3f1",37:"14c5ca1a",38:"de258956",39:"dce18715",40:"caca6ee5",41:"7b5233d8",42:"5a928c77",43:"94685418",44:"7f548f6a"}[n]+".js"}(n);var c=new Error;o=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=i[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+o+")",c.name="ChunkLoadError",c.type=r,c.request=o,t[1](c)}i[n]=void 0}};var l=setTimeout((function(){o({type:"timeout",target:s})}),12e4);s.onerror=s.onload=o,document.head.appendChild(s)}return Promise.all(e)},a.m=n,a.c=r,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)a.d(t,r,function(e){return n[e]}.bind(null,r));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="/Yuqing_blog/",a.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var d=c;o.push([100,0]),t()}([function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(25),i=Function.prototype,o=i.bind,a=i.call,s=r&&o.bind(a,a);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return a.apply(n,arguments)}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(67),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();n.exports=o},function(n,e,t){"use strict";function r(n,e,t,r,i,o,a,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),o&&(l._scopeId="data-v-"+o),a?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),i&&i.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(a)},l._ssrRegister=c):i&&(c=s?function(){i.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:i),c)if(l.functional){l._injectStyles=c;var d=l.render;l.render=function(n,e){return c.call(e),d(n,e)}}else{var u=l.beforeCreate;l.beforeCreate=u?[].concat(u,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(3);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(1),i=t(45),o=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return o(i(n),e)}},function(n,e,t){var r=t(0);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(155),i=t(158);n.exports=function(n,e){var t=i(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return o})),t.d(e,"j",(function(){return a})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return h})),t.d(e,"m",(function(){return f})),t.d(e,"d",(function(){return g})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return x}));const r=/#.*$/,i=/\.(md|html)$/,o=/\/$/,a=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(i,"")}function c(n){return a.test(n)}function l(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function u(n){if(c(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",i=s(n);return o.test(i)?n:i+".html"+t}function p(n,e){const t=n.hash,i=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(i&&t!==i)return!1;return s(n.path)===s(e)}function h(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const i=e.split("/");t&&i[i.length-1]||i.pop();const o=n.replace(/^\//,"").split("/");for(let n=0;n<o.length;n++){const e=o[n];".."===e?i.pop():"."!==e&&i.push(e)}""!==i[0]&&i.unshift("");return i.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:u(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function f(n,e,t,r){const{pages:i,themeConfig:o}=t,a=r&&o.locales&&o.locales[r]||o;if("auto"===(n.frontmatter.sidebar||a.sidebar||o.sidebar))return m(n);const s=a.sidebar||o.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?m(n):r?r.map(n=>function n(e,t,r,i=1){if("string"==typeof e)return h(t,e,r);if(Array.isArray(e))return Object.assign(h(t,e[0],r),{title:e[1]});{i>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const o=e.children||[];return 0===o.length&&e.path?Object.assign(h(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:o.map(e=>n(e,t,r,i+1)),collapsable:!1!==e.collapsable}}}(n,i,t)):[]}return[]}function m(n){const e=g(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function g(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function x(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(14),i=t(140),o=t(141),a=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":a&&a in Object(n)?i(n):o(n)}},function(n,e,t){var r=t(5).Symbol;n.exports=r},function(n,e,t){var r=t(7),i=t(61),o=t(96),a=t(24),s=t(52),c=TypeError,l=Object.defineProperty,d=Object.getOwnPropertyDescriptor;e.f=r?o?function(n,e,t){if(a(n),e=s(e),a(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=d(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return l(n,e,t)}:l:function(n,e,t){if(a(n),e=s(e),a(t),i)try{return l(n,e,t)}catch(n){}if("get"in t||"set"in t)throw c("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(2),i=t(0),o=function(n){return i(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?o(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(7),i=t(15),o=t(29);n.exports=r?function(n,e,t){return i.f(n,e,o(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(145),i=t(146),o=t(147),a=t(148),s=t(149);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(69);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(167);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(40);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,i;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(i="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function i(n,e,t){return n<e?e:n>t?t:n}function o(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=i(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),d=r.speed,u=r.easing;return c.offsetWidth,a((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var i;return(i="translate3d"===r.positionUsing?{transform:"translate3d("+o(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+o(n)+"%,0)"}:{"margin-left":o(n)+"%"}).transition="all "+e+"ms "+t,i}(n,d,u)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*i(Math.random()*e,.1,.95)),e=i(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var i,a=e.querySelector(r.barSelector),c=n?"-100":o(t.status||0),d=document.querySelector(r.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(i=e.querySelector(r.spinnerSelector))&&p(i),d!=document.body&&l(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var a=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,i=n.length,o=e.charAt(0).toUpperCase()+e.slice(1);i--;)if((r=n[i]+o)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,i,o=arguments;if(2==o.length)for(t in e)void 0!==(i=e[t])&&e.hasOwnProperty(t)&&r(n,t,i);else r(n,o[1],o[2])}}();function c(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=u(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function d(n,e){var t,r=u(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=i)},function(n,e,t){var r=t(9),i=String,o=TypeError;n.exports=function(n){if(r(n))return n;throw o(i(n)+" is not an object")}},function(n,e,t){var r=t(3);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(43),i=t(51);n.exports=function(n){return r(i(n))}},function(n,e,t){var r=t(2),i=t(58),o=t(8),a=t(60),s=t(56),c=t(55),l=i("wks"),d=r.Symbol,u=d&&d.for,p=c?d:d&&d.withoutSetter||a;n.exports=function(n){if(!o(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&o(d,n)?l[n]=d[n]:l[n]=c&&u?u(e):p(e)}return l[n]}},function(n,e,t){var r=t(25),i=Function.prototype.call;n.exports=r?i.bind(i):function(){return i.apply(i,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(1),i=r({}.toString),o=r("".slice);n.exports=function(n){return o(i(n),8,-1)}},function(n,e,t){var r=t(2),i=t(32),o=r["__core-js_shared__"]||i("__core-js_shared__",{});n.exports=o},function(n,e,t){var r=t(2),i=Object.defineProperty;n.exports=function(n,e){try{i(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(139),i=t(12),o=Object.prototype,a=o.hasOwnProperty,s=o.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return i(n)&&a.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(10)(t(5),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(159),i=t(166),o=t(168),a=t(169),s=t(170);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(4),i=t(40),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!i(n))||(a.test(n)||!o.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),i=t(12);n.exports=function(n){return"symbol"==typeof n||i(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(2),i=t(50).f,o=t(17),a=t(108),s=t(32),c=t(63),l=t(120);n.exports=function(n,e){var t,d,u,p,h,f=n.target,m=n.global,g=n.stat;if(t=m?r:g?r[f]||s(f,{}):(r[f]||{}).prototype)for(d in e){if(p=e[d],u=n.dontCallGetSet?(h=i(t,d))&&h.value:t[d],!l(m?d:f+(g?".":"#")+d,n.forced)&&void 0!==u){if(typeof p==typeof u)continue;c(p,u)}(n.sham||u&&u.sham)&&o(p,"sham",!0),a(t,d,p,n)}}},function(n,e,t){var r=t(1),i=t(3),o=t(30),a=Object,s=r("".split);n.exports=i((function(){return!a("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?s(n,""):a(n)}:a},function(n,e,t){var r=t(0),i=t(106),o=TypeError;n.exports=function(n){if(r(n))return n;throw o(i(n)+" is not a function")}},function(n,e,t){var r=t(51),i=Object;n.exports=function(n){return i(r(n))}},function(n,e){n.exports={}},function(n,e,t){var r=t(118);n.exports=function(n){return r(n.length)}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,a=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,h=function(){return l.Date.now()};function f(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function m(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(f(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=f(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=i.test(n);return s||o.test(n)?a(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,i,o,a,s,c,l=0,d=!1,g=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,o=i;return r=i=void 0,l=e,a=n.apply(o,t)}function y(n){return l=n,s=setTimeout(_,e),d?b(n):a}function x(n){var t=n-c;return void 0===c||t>=e||t<0||g&&n-l>=o}function _(){var n=h();if(x(n))return E(n);s=setTimeout(_,function(n){var t=e-(n-c);return g?p(t,o-(n-l)):t}(n))}function E(n){return s=void 0,v&&r?b(n):(r=i=void 0,a)}function k(){var n=h(),t=x(n);if(r=arguments,i=this,c=n,t){if(void 0===s)return y(c);if(g)return s=setTimeout(_,e),b(c)}return void 0===s&&(s=setTimeout(_,e)),a}return e=m(e)||0,f(t)&&(d=!!t.leading,o=(g="maxWait"in t)?u(m(t.maxWait)||0,e):o,v="trailing"in t?!!t.trailing:v),k.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=i=s=void 0},k.flush=function(){return void 0===s?a:E(h())},k}},function(n,e,t){var r=t(7),i=t(28),o=t(102),a=t(29),s=t(26),c=t(52),l=t(8),d=t(61),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=s(n),e=c(e),d)try{return u(n,e)}catch(n){}if(l(n,e))return a(!i(o.f,n,e),n[e])}},function(n,e){var t=TypeError;n.exports=function(n){if(null==n)throw t("Can't call method on "+n);return n}},function(n,e,t){var r=t(103),i=t(53);n.exports=function(n){var e=r(n,"string");return i(e)?e:e+""}},function(n,e,t){var r=t(16),i=t(0),o=t(54),a=t(55),s=Object;n.exports=a?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return i(e)&&o(e.prototype,s(n))}},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(56);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(57),i=t(3);n.exports=!!Object.getOwnPropertySymbols&&!i((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,i,o=t(2),a=t(104),s=o.process,c=o.Deno,l=s&&s.versions||c&&c.version,d=l&&l.v8;d&&(i=(r=d.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!i&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(i=+r[1]),n.exports=i},function(n,e,t){var r=t(59),i=t(31);(n.exports=function(n,e){return i[n]||(i[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.23.5",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.23.5/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var r=t(1),i=0,o=Math.random(),a=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+a(++i+o,36)}},function(n,e,t){var r=t(7),i=t(3),o=t(95);n.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(1),i=t(0),o=t(31),a=r(Function.toString);i(o.inspectSource)||(o.inspectSource=function(n){return a(n)}),n.exports=o.inspectSource},function(n,e,t){var r=t(8),i=t(113),o=t(50),a=t(15);n.exports=function(n,e,t){for(var s=i(e),c=a.f,l=o.f,d=0;d<s.length;d++){var u=s[d];r(n,u)||t&&r(t,u)||c(n,u,l(e,u))}}},function(n,e,t){var r=t(117);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){var r=t(1),i=t(24),o=t(127);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return i(t),o(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,i=n.length;++t<r;)n[i+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(18),i=t(150),o=t(151),a=t(152),s=t(153),c=t(154);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=i,l.prototype.delete=o,l.prototype.get=a,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),i=t(35);n.exports=function(n){if(!i(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(171),i=t(12);n.exports=function n(e,t,o,a,s){return e===t||(null==e||null==t||!i(e)&&!i(t)?e!=e&&t!=t:r(e,t,o,a,n,s))}},function(n,e,t){var r=t(74),i=t(174),o=t(75);n.exports=function(n,e,t,a,s,c){var l=1&t,d=n.length,u=e.length;if(d!=u&&!(l&&u>d))return!1;var p=c.get(n),h=c.get(e);if(p&&h)return p==e&&h==n;var f=-1,m=!0,g=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++f<d;){var v=n[f],b=e[f];if(a)var y=l?a(b,v,f,e,n,c):a(v,b,f,n,e,c);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!i(e,(function(n,e){if(!o(g,e)&&(v===n||s(v,n,t,a,c)))return g.push(e)}))){m=!1;break}}else if(v!==b&&!s(v,b,t,a,c)){m=!1;break}}return c.delete(n),c.delete(e),m}},function(n,e,t){var r=t(36),i=t(172),o=t(173);function a(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,n.exports=a},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(184),i=t(190),o=t(80);n.exports=function(n){return o(n)?r(n):i(n)}},function(n,e,t){(function(n){var r=t(5),i=t(186),o=e&&!e.nodeType&&e,a=o&&"object"==typeof n&&n&&!n.nodeType&&n,s=a&&a.exports===o?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||i;n.exports=c}).call(this,t(48)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(187),i=t(188),o=t(189),a=o&&o.isTypedArray,s=a?i(a):r;n.exports=s},function(n,e,t){var r=t(70),i=t(38);n.exports=function(n){return null!=n&&i(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(5),"Set");n.exports=r},function(n,e,t){var r=t(35);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(85),i=t(22);n.exports=function(n,e){for(var t=0,o=(e=r(e,n)).length;null!=n&&t<o;)n=n[i(e[t++])];return t&&t==o?n:void 0}},function(n,e,t){var r=t(4),i=t(39),o=t(201),a=t(204);n.exports=function(n,e){return r(n)?n:i(n,e)?[n]:o(a(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(137),i=t(142),o=t(213),a=t(221),s=t(230),c=t(99),l=o((function(n){var e=c(n);return s(e)&&(e=void 0),a(r(n,1,s,!0),i(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,i=r.exec(t);if(!i)return t;var o="",a=0,s=0;for(a=i.index;a<t.length;a++){switch(t.charCodeAt(a)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==a&&(o+=t.substring(s,a)),s=a+1,o+=e}return s!==a?o+t.substring(s,a):o}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},i=(t(233),t(6)),o=Object(i.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"4f1e9d0c",null);e.default=o.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},i=(t(234),t(6)),o=Object(i.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"2f5f1757",null);e.default=o.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(2),i=t(9),o=r.document,a=i(o)&&i(o.createElement);n.exports=function(n){return a?o.createElement(n):{}}},function(n,e,t){var r=t(7),i=t(3);n.exports=r&&i((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(58),i=t(60),o=r("keys");n.exports=function(n){return o[n]||(o[n]=i(n))}},function(n,e,t){var r=t(1),i=t(8),o=t(26),a=t(115).indexOf,s=t(46),c=r([].push);n.exports=function(n,e){var t,r=o(n),l=0,d=[];for(t in r)!i(s,t)&&i(r,t)&&c(d,t);for(;e.length>l;)i(r,t=e[l++])&&(~a(d,t)||c(d,t));return d}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(239)},function(n,e,t){"use strict";var r=t(42),i=t(121).left,o=t(122),a=t(57),s=t(123);r({target:"Array",proto:!0,forced:!o("reduce")||!s&&a>79&&a<83},{reduce:function(n){var e=arguments.length;return i(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);e.f=o?function(n){var e=i(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(28),i=t(9),o=t(53),a=t(105),s=t(107),c=t(27),l=TypeError,d=c("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,c=a(n,d);if(c){if(void 0===e&&(e="default"),t=r(c,n,e),!i(t)||o(t))return t;throw l("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e,t){var r=t(16);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(44);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(28),i=t(0),o=t(9),a=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&i(t=n.toString)&&!o(s=r(t,n)))return s;if(i(t=n.valueOf)&&!o(s=r(t,n)))return s;if("string"!==e&&i(t=n.toString)&&!o(s=r(t,n)))return s;throw a("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),i=t(15),o=t(109),a=t(32);n.exports=function(n,e,t,s){s||(s={});var c=s.enumerable,l=void 0!==s.name?s.name:e;if(r(t)&&o(t,l,s),s.global)c?n[e]=t:a(e,t);else{try{s.unsafe?n[e]&&(c=!0):delete n[e]}catch(n){}c?n[e]=t:i.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var r=t(3),i=t(0),o=t(8),a=t(7),s=t(110).CONFIGURABLE,c=t(62),l=t(111),d=l.enforce,u=l.get,p=Object.defineProperty,h=a&&!r((function(){return 8!==p((function(){}),"length",{value:8}).length})),f=String(String).split("String"),m=n.exports=function(n,e,t){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!o(n,"name")||s&&n.name!==e)&&(a?p(n,"name",{value:e,configurable:!0}):n.name=e),h&&t&&o(t,"arity")&&n.length!==t.arity&&p(n,"length",{value:t.arity});try{t&&o(t,"constructor")&&t.constructor?a&&p(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=d(n);return o(r,"source")||(r.source=f.join("string"==typeof e?e:"")),n};Function.prototype.toString=m((function(){return i(this)&&u(this).source||c(this)}),"toString")},function(n,e,t){var r=t(7),i=t(8),o=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,s=i(o,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&a(o,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){var r,i,o,a=t(112),s=t(2),c=t(1),l=t(9),d=t(17),u=t(8),p=t(31),h=t(97),f=t(46),m=s.TypeError,g=s.WeakMap;if(a||p.state){var v=p.state||(p.state=new g),b=c(v.get),y=c(v.has),x=c(v.set);r=function(n,e){if(y(v,n))throw new m("Object already initialized");return e.facade=n,x(v,n,e),e},i=function(n){return b(v,n)||{}},o=function(n){return y(v,n)}}else{var _=h("state");f[_]=!0,r=function(n,e){if(u(n,_))throw new m("Object already initialized");return e.facade=n,d(n,_,e),e},i=function(n){return u(n,_)?n[_]:{}},o=function(n){return u(n,_)}}n.exports={set:r,get:i,has:o,enforce:function(n){return o(n)?i(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=i(e)).type!==n)throw m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(2),i=t(0),o=t(62),a=r.WeakMap;n.exports=i(a)&&/native code/.test(o(a))},function(n,e,t){var r=t(16),i=t(1),o=t(114),a=t(119),s=t(24),c=i([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=o.f(s(n)),t=a.f;return t?c(e,t(n)):e}},function(n,e,t){var r=t(98),i=t(94).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,i)}},function(n,e,t){var r=t(26),i=t(116),o=t(47),a=function(n){return function(e,t,a){var s,c=r(e),l=o(c),d=i(a,l);if(n&&t!=t){for(;l>d;)if((s=c[d++])!=s)return!0}else for(;l>d;d++)if((n||d in c)&&c[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:a(!0),indexOf:a(!1)}},function(n,e,t){var r=t(64),i=Math.max,o=Math.min;n.exports=function(n,e){var t=r(n);return t<0?i(t+e,0):o(t,e)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:t)(e)}},function(n,e,t){var r=t(64),i=Math.min;n.exports=function(n){return n>0?i(r(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(3),i=t(0),o=/#|\.prototype\./,a=function(n,e){var t=c[s(n)];return t==d||t!=l&&(i(e)?r(e):!!e)},s=a.normalize=function(n){return String(n).replace(o,".").toLowerCase()},c=a.data={},l=a.NATIVE="N",d=a.POLYFILL="P";n.exports=a},function(n,e,t){var r=t(44),i=t(45),o=t(43),a=t(47),s=TypeError,c=function(n){return function(e,t,c,l){r(t);var d=i(e),u=o(d),p=a(d),h=n?p-1:0,f=n?-1:1;if(c<2)for(;;){if(h in u){l=u[h],h+=f;break}if(h+=f,n?h<0:p<=h)throw s("Reduce of empty array with no initial value")}for(;n?h>=0:p>h;h+=f)h in u&&(l=t(l,u[h],h,d));return l}};n.exports={left:c(!1),right:c(!0)}},function(n,e,t){"use strict";var r=t(3);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(30),i=t(2);n.exports="process"==r(i.process)},function(n,e,t){var r=t(42),i=t(2),o=t(125),a=t(126),s=i.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=a(n,e,c),r({global:!0,constructor:!0,arity:1,forced:c},t)},d=function(n,e){if(s&&s[n]){var t={};t[n]=a("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:c},t)}};l("Error",(function(n){return function(e){return o(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return o(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return o(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return o(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return o(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return o(n,this,arguments)}})),l("URIError",(function(n){return function(e){return o(n,this,arguments)}})),d("CompileError",(function(n){return function(e){return o(n,this,arguments)}})),d("LinkError",(function(n){return function(e){return o(n,this,arguments)}})),d("RuntimeError",(function(n){return function(e){return o(n,this,arguments)}}))},function(n,e,t){var r=t(25),i=Function.prototype,o=i.apply,a=i.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(o):function(){return a.apply(o,arguments)})},function(n,e,t){"use strict";var r=t(16),i=t(8),o=t(17),a=t(54),s=t(65),c=t(63),l=t(128),d=t(129),u=t(130),p=t(134),h=t(135),f=t(136),m=t(7),g=t(59);n.exports=function(n,e,t,v){var b=v?2:1,y=n.split("."),x=y[y.length-1],_=r.apply(null,y);if(_){var E=_.prototype;if(!g&&i(E,"cause")&&delete E.cause,!t)return _;var k=r("Error"),w=e((function(n,e){var t=u(v?e:n,void 0),r=v?new _(n):new _;return void 0!==t&&o(r,"message",t),f&&o(r,"stack",h(r.stack,2)),this&&a(E,this)&&d(r,this,w),arguments.length>b&&p(r,arguments[b]),r}));if(w.prototype=E,"Error"!==x?s?s(w,k):c(w,k,{name:!0}):m&&"stackTraceLimit"in _&&(l(w,_,"stackTraceLimit"),l(w,_,"prepareStackTrace")),c(w,_),!g)try{E.name!==x&&o(E,"name",x),E.constructor=w}catch(n){}return w}}},function(n,e,t){var r=t(0),i=String,o=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){var r=t(15).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(0),i=t(9),o=t(65);n.exports=function(n,e,t){var a,s;return o&&r(a=e.constructor)&&a!==t&&i(s=a.prototype)&&s!==t.prototype&&o(n,s),n}},function(n,e,t){var r=t(131);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){var r=t(132),i=String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(133),i=t(0),o=t(30),a=t(27)("toStringTag"),s=Object,c="Arguments"==o(function(){return arguments}());n.exports=r?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),a))?t:c?o(e):"Object"==(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){var r={};r[t(27)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),i=t(17);n.exports=function(n,e){r(e)&&"cause"in e&&i(n,"cause",e.cause)}},function(n,e,t){var r=t(1),i=Error,o=r("".replace),a=String(i("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,c=s.test(a);n.exports=function(n,e){if(c&&"string"==typeof n&&!i.prepareStackTrace)for(;e--;)n=o(n,s,"");return n}},function(n,e,t){var r=t(3),i=t(29);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",i(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(66),i=t(138);n.exports=function n(e,t,o,a,s){var c=-1,l=e.length;for(o||(o=i),s||(s=[]);++c<l;){var d=e[c];t>0&&o(d)?t>1?n(d,t-1,o,a,s):r(s,d):a||(s[s.length]=d)}return s}},function(n,e,t){var r=t(14),i=t(33),o=t(4),a=r?r.isConcatSpreadable:void 0;n.exports=function(n){return o(n)||i(n)||!!(a&&n&&n[a])}},function(n,e,t){var r=t(13),i=t(12);n.exports=function(n){return i(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(14),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=o.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var i=a.call(n);return r&&(e?n[s]=t:delete n[s]),i}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(143),i=t(199),o=t(41),a=t(4),s=t(210);n.exports=function(n){return"function"==typeof n?n:null==n?o:"object"==typeof n?a(n)?i(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(144),i=t(198),o=t(83);n.exports=function(n){var e=i(n);return 1==e.length&&e[0][2]?o(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(68),i=t(72);n.exports=function(n,e,t,o){var a=t.length,s=a,c=!o;if(null==n)return!s;for(n=Object(n);a--;){var l=t[a];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++a<s;){var d=(l=t[a])[0],u=n[d],p=l[1];if(c&&l[2]){if(void 0===u&&!(d in n))return!1}else{var h=new r;if(o)var f=o(u,p,d,n,e,h);if(!(void 0===f?i(p,u,3,o,h):f))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(19),i=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():i.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(19);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(19);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(19);n.exports=function(n,e){var t=this.__data__,i=r(t,n);return i<0?(++this.size,t.push([n,e])):t[i][1]=e,this}},function(n,e,t){var r=t(18);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(18),i=t(34),o=t(36);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var a=t.__data__;if(!i||a.length<199)return a.push([n,e]),this.size=++t.size,this;t=this.__data__=new o(a)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(70),i=t(156),o=t(35),a=t(71),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,d=c.toString,u=l.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!o(n)||i(n))&&(r(n)?p:s).test(a(n))}},function(n,e,t){var r,i=t(157),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!o&&o in n}},function(n,e,t){var r=t(5)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(160),i=t(18),o=t(34);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(n,e,t){var r=t(161),i=t(162),o=t(163),a=t(164),s=t(165);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=a,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(20);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(20),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return i.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(20),i=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:i.call(e,n)}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(21);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(21);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(21);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=r(this,n),i=t.size;return t.set(n,e),this.size+=t.size==i?0:1,this}},function(n,e,t){var r=t(68),i=t(73),o=t(175),a=t(178),s=t(194),c=t(4),l=t(77),d=t(79),u="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,f,m){var g=c(n),v=c(e),b=g?"[object Array]":s(n),y=v?"[object Array]":s(e),x=(b="[object Arguments]"==b?u:b)==u,_=(y="[object Arguments]"==y?u:y)==u,E=b==y;if(E&&l(n)){if(!l(e))return!1;g=!0,x=!1}if(E&&!x)return m||(m=new r),g||d(n)?i(n,e,t,h,f,m):o(n,e,b,t,h,f,m);if(!(1&t)){var k=x&&p.call(n,"__wrapped__"),w=_&&p.call(e,"__wrapped__");if(k||w){var A=k?n.value():n,$=w?e.value():e;return m||(m=new r),f(A,$,t,h,m)}}return!!E&&(m||(m=new r),a(n,e,t,h,f,m))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(14),i=t(176),o=t(69),a=t(73),s=t(177),c=t(37),l=r?r.prototype:void 0,d=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,u,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new i(n),new i(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=s;case"[object Set]":var f=1&r;if(h||(h=c),n.size!=e.size&&!f)return!1;var m=p.get(n);if(m)return m==e;r|=2,p.set(n,e);var g=a(h(n),h(e),r,l,u,p);return p.delete(n),g;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var r=t(5).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(179),i=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,o,a,s){var c=1&t,l=r(n),d=l.length;if(d!=r(e).length&&!c)return!1;for(var u=d;u--;){var p=l[u];if(!(c?p in e:i.call(e,p)))return!1}var h=s.get(n),f=s.get(e);if(h&&f)return h==e&&f==n;var m=!0;s.set(n,e),s.set(e,n);for(var g=c;++u<d;){var v=n[p=l[u]],b=e[p];if(o)var y=c?o(b,v,p,e,n,s):o(v,b,p,n,e,s);if(!(void 0===y?v===b||a(v,b,t,o,s):y)){m=!1;break}g||(g="constructor"==p)}if(m&&!g){var x=n.constructor,_=e.constructor;x==_||!("constructor"in n)||!("constructor"in e)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(m=!1)}return s.delete(n),s.delete(e),m}},function(n,e,t){var r=t(180),i=t(181),o=t(76);n.exports=function(n){return r(n,o,i)}},function(n,e,t){var r=t(66),i=t(4);n.exports=function(n,e,t){var o=e(n);return i(n)?o:r(o,t(n))}},function(n,e,t){var r=t(182),i=t(183),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(n){return null==n?[]:(n=Object(n),r(a(n),(function(e){return o.call(n,e)})))}:i;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=0,o=[];++t<r;){var a=n[t];e(a,t,n)&&(o[i++]=a)}return o}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(185),i=t(33),o=t(4),a=t(77),s=t(78),c=t(79),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=o(n),d=!t&&i(n),u=!t&&!d&&a(n),p=!t&&!d&&!u&&c(n),h=t||d||u||p,f=h?r(n.length,String):[],m=f.length;for(var g in n)!e&&!l.call(n,g)||h&&("length"==g||u&&("offset"==g||"parent"==g)||p&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||s(g,m))||f.push(g);return f}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),i=t(38),o=t(12),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,n.exports=function(n){return o(n)&&i(n.length)&&!!a[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(67),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,a=o&&o.exports===i&&r.process,s=function(){try{var n=o&&o.require&&o.require("util").types;return n||a&&a.binding&&a.binding("util")}catch(n){}}();n.exports=s}).call(this,t(48)(n))},function(n,e,t){var r=t(191),i=t(192),o=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return i(n);var e=[];for(var t in Object(n))o.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(193)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(195),i=t(34),o=t(196),a=t(81),s=t(197),c=t(13),l=t(71),d=l(r),u=l(i),p=l(o),h=l(a),f=l(s),m=c;(r&&"[object DataView]"!=m(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=m(new i)||o&&"[object Promise]"!=m(o.resolve())||a&&"[object Set]"!=m(new a)||s&&"[object WeakMap]"!=m(new s))&&(m=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return e}),n.exports=m},function(n,e,t){var r=t(10)(t(5),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(5),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(5),"WeakMap");n.exports=r},function(n,e,t){var r=t(82),i=t(76);n.exports=function(n){for(var e=i(n),t=e.length;t--;){var o=e[t],a=n[o];e[t]=[o,a,r(a)]}return e}},function(n,e,t){var r=t(72),i=t(200),o=t(207),a=t(39),s=t(82),c=t(83),l=t(22);n.exports=function(n,e){return a(n)&&s(e)?c(l(n),e):function(t){var a=i(t,n);return void 0===a&&a===e?o(t,n):r(e,a,3)}}},function(n,e,t){var r=t(84);n.exports=function(n,e,t){var i=null==n?void 0:r(n,e);return void 0===i?t:i}},function(n,e,t){var r=t(202),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(i,(function(n,t,r,i){e.push(r?i.replace(o,"$1"):t||n)})),e}));n.exports=a},function(n,e,t){var r=t(203);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(36);function i(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=t.cache;if(o.has(i))return o.get(i);var a=n.apply(this,r);return t.cache=o.set(i,a)||o,a};return t.cache=new(i.Cache||r),t}i.Cache=r,n.exports=i},function(n,e,t){var r=t(205);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(14),i=t(206),o=t(4),a=t(40),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(o(e))return i(e,n)+"";if(a(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,i=Array(r);++t<r;)i[t]=e(n[t],t,n);return i}},function(n,e,t){var r=t(208),i=t(209);n.exports=function(n,e){return null!=n&&i(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(85),i=t(33),o=t(4),a=t(78),s=t(38),c=t(22);n.exports=function(n,e,t){for(var l=-1,d=(e=r(e,n)).length,u=!1;++l<d;){var p=c(e[l]);if(!(u=null!=n&&t(n,p)))break;n=n[p]}return u||++l!=d?u:!!(d=null==n?0:n.length)&&s(d)&&a(p,d)&&(o(n)||i(n))}},function(n,e,t){var r=t(211),i=t(212),o=t(39),a=t(22);n.exports=function(n){return o(n)?r(a(n)):i(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(84);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(41),i=t(214),o=t(216);n.exports=function(n,e){return o(i(n,e,r),n+"")}},function(n,e,t){var r=t(215),i=Math.max;n.exports=function(n,e,t){return e=i(void 0===e?n.length-1:e,0),function(){for(var o=arguments,a=-1,s=i(o.length-e,0),c=Array(s);++a<s;)c[a]=o[e+a];a=-1;for(var l=Array(e+1);++a<e;)l[a]=o[a];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(217),i=t(220)(r);n.exports=i},function(n,e,t){var r=t(218),i=t(219),o=t(41),a=i?function(n,e){return i(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:o;n.exports=a},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),i=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=i},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var i=t(),o=16-(i-r);if(r=i,o>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(74),i=t(222),o=t(227),a=t(75),s=t(228),c=t(37);n.exports=function(n,e,t){var l=-1,d=i,u=n.length,p=!0,h=[],f=h;if(t)p=!1,d=o;else if(u>=200){var m=e?null:s(n);if(m)return c(m);p=!1,d=a,f=new r}else f=e?[]:h;n:for(;++l<u;){var g=n[l],v=e?e(g):g;if(g=t||0!==g?g:0,p&&v==v){for(var b=f.length;b--;)if(f[b]===v)continue n;e&&f.push(v),h.push(g)}else d(f,v,t)||(f!==h&&f.push(v),h.push(g))}return h}},function(n,e,t){var r=t(223);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(224),i=t(225),o=t(226);n.exports=function(n,e,t){return e==e?o(n,e,t):r(n,i,t)}},function(n,e){n.exports=function(n,e,t,r){for(var i=n.length,o=t+(r?1:-1);r?o--:++o<i;)if(e(n[o],o,n))return o;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,i=n.length;++r<i;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,i=null==n?0:n.length;++r<i;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(81),i=t(229),o=t(37),a=r&&1/o(new r([,-0]))[1]==1/0?function(n){return new r(n)}:i;n.exports=a},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(80),i=t(12);n.exports=function(n){return i(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(86)},function(n,e,t){"use strict";t(87)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.7
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),i=Array.isArray;function o(n){return null==n}function a(n){return null!=n}function s(n){return!0===n}function c(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function l(n){return"function"==typeof n}function d(n){return null!==n&&"object"==typeof n}var u=Object.prototype.toString;function p(n){return"[object Object]"===u.call(n)}function h(n){return"[object RegExp]"===u.call(n)}function f(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function m(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function g(n){return null==n?"":Array.isArray(n)||p(n)&&n.toString===u?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),i=0;i<r.length;i++)t[r[i]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function x(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var _=Object.prototype.hasOwnProperty;function E(n,e){return _.call(n,e)}function k(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var w=/-(\w)/g,A=k((function(n){return n.replace(w,(function(n,e){return e?e.toUpperCase():""}))})),$=k((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),T=/\B([A-Z])/g,j=k((function(n){return n.replace(T,"-$1").toLowerCase()}));var C=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function S(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function O(n,e){for(var t in e)n[t]=e[t];return n}function I(n){for(var e={},t=0;t<n.length;t++)n[t]&&O(e,n[t]);return e}function D(n,e,t){}var B=function(n,e,t){return!1},z=function(n){return n};function G(n,e){if(n===e)return!0;var t=d(n),r=d(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var i=Array.isArray(n),o=Array.isArray(e);if(i&&o)return n.length===e.length&&n.every((function(n,t){return G(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(n),s=Object.keys(e);return a.length===s.length&&a.every((function(t){return G(n[t],e[t])}))}catch(n){return!1}}function P(n,e){for(var t=0;t<n.length;t++)if(G(n[t],e))return t;return-1}function q(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function L(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var H=["component","directive","filter"],R=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:B,isReservedAttr:B,isUnknownElement:B,getTagNamespace:D,parsePlatformTagName:z,mustUseProp:B,async:!0,_lifecycleHooks:R},U=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function N(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function F(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var W=new RegExp("[^".concat(U.source,".$_\\d]"));var V="__proto__"in{},Y="undefined"!=typeof window,Z=Y&&window.navigator.userAgent.toLowerCase(),X=Z&&/msie|trident/.test(Z),K=Z&&Z.indexOf("msie 9.0")>0,J=Z&&Z.indexOf("edge/")>0;Z&&Z.indexOf("android");var Q=Z&&/iphone|ipad|ipod|ios/.test(Z);Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z);var nn,en=Z&&Z.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(Y)try{var on={};Object.defineProperty(on,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,on)}catch(n){}var an=function(){return void 0===nn&&(nn=!Y&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=Y&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function cn(n){return"function"==typeof n&&/native code/.test(n.toString())}var ln,dn="undefined"!=typeof Symbol&&cn(Symbol)&&"undefined"!=typeof Reflect&&cn(Reflect.ownKeys);ln="undefined"!=typeof Set&&cn(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var un=null;function pn(n){void 0===n&&(n=null),n||un&&un._scope.off(),un=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,r,i,o,a,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),fn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function mn(n){return new hn(void 0,void 0,void 0,String(n))}function gn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var vn=0,bn=function(){function n(){this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){x(this.subs,n)},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.slice();for(var t=0,r=e.length;t<r;t++){e[t].update()}},n}();bn.target=null;var yn=[];function xn(n){yn.push(n),bn.target=n}function _n(){yn.pop(),bn.target=yn[yn.length-1]}var En=Array.prototype,kn=Object.create(En);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=En[n];F(kn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var i,o=e.apply(this,t),a=this.__ob__;switch(n){case"push":case"unshift":i=t;break;case"splice":i=t.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o}))}));var wn=Object.getOwnPropertyNames(kn),An={},$n=!0;function Tn(n){$n=n}var jn={notify:D,depend:D,addSub:D,removeSub:D},Cn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?jn:new bn,this.vmCount=0,F(n,"__ob__",this),i(n)){if(!t)if(V)n.__proto__=kn;else for(var r=0,o=wn.length;r<o;r++){F(n,s=wn[r],kn[s])}e||this.observeArray(n)}else{var a=Object.keys(n);for(r=0;r<a.length;r++){var s;On(n,s=a[r],An,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Sn(n[e],!1,this.mock)},n}();function Sn(n,e,t){var r;if(!(!d(n)||qn(n)||n instanceof hn))return E(n,"__ob__")&&n.__ob__ instanceof Cn?r=n.__ob__:!$n||!t&&an()||!i(n)&&!p(n)||!Object.isExtensible(n)||n.__v_skip||(r=new Cn(n,e,t)),r}function On(n,e,t,r,o,a){var s=new bn,c=Object.getOwnPropertyDescriptor(n,e);if(!c||!1!==c.configurable){var l=c&&c.get,d=c&&c.set;l&&!d||t!==An&&2!==arguments.length||(t=n[e]);var u=!o&&Sn(t,!1,a);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=l?l.call(n):t;return bn.target&&(s.depend(),u&&(u.dep.depend(),i(e)&&Bn(e))),qn(e)&&!o?e.value:e},set:function(e){var r=l?l.call(n):t;if(L(r,e)){if(d)d.call(n,e);else{if(l)return;if(qn(r)&&!qn(e))return void(r.value=e);t=e}u=!o&&Sn(e,!1,a),s.notify()}}}),s}}function In(n,e,t){if(!Pn(n)){var r=n.__ob__;return i(n)&&f(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Sn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(On(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Dn(n,e){if(i(n)&&f(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||Pn(n)||E(n,e)&&(delete n[e],t&&t.dep.notify())}}function Bn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),i(e)&&Bn(e)}function zn(n){return Gn(n,!0),F(n,"__v_isShallow",!0),n}function Gn(n,e){if(!Pn(n)){Sn(n,e,an());0}}function Pn(n){return!(!n||!n.__v_isReadonly)}function qn(n){return!(!n||!0!==n.__v_isRef)}function Ln(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(qn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];qn(r)&&!qn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Hn;var Rn=function(){function n(n){void 0===n&&(n=!1),this.active=!0,this.effects=[],this.cleanups=[],!n&&Hn&&(this.parent=Hn,this.index=(Hn.scopes||(Hn.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Hn;try{return Hn=this,n()}finally{Hn=e}}else 0},n.prototype.on=function(){Hn=this},n.prototype.off=function(){Hn=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.active=!1}},n}();function Mn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Un=k((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Nn(n,e){function t(){var n=t.fns;if(!i(n))return $e(n,null,arguments,e,"v-on handler");for(var r=n.slice(),o=0;o<r.length;o++)$e(r[o],null,arguments,e,"v-on handler")}return t.fns=n,t}function Fn(n,e,t,r,i,a){var c,l,d,u;for(c in n)l=n[c],d=e[c],u=Un(c),o(l)||(o(d)?(o(l.fns)&&(l=n[c]=Nn(l,a)),s(u.once)&&(l=n[c]=i(u.name,l,u.capture)),t(u.name,l,u.capture,u.passive,u.params)):l!==d&&(d.fns=l,n[c]=d));for(c in e)o(n[c])&&r((u=Un(c)).name,e[c],u.capture)}function Wn(n,e,t){var r;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var i=n[e];function c(){t.apply(this,arguments),x(r.fns,c)}o(i)?r=Nn([c]):a(i.fns)&&s(i.merged)?(r=i).fns.push(c):r=Nn([i,c]),r.merged=!0,n[e]=r}function Vn(n,e,t,r,i){if(a(e)){if(E(e,t))return n[t]=e[t],i||delete e[t],!0;if(E(e,r))return n[t]=e[r],i||delete e[r],!0}return!1}function Yn(n){return c(n)?[mn(n)]:i(n)?function n(e,t){var r,l,d,u,p=[];for(r=0;r<e.length;r++)o(l=e[r])||"boolean"==typeof l||(d=p.length-1,u=p[d],i(l)?l.length>0&&(Zn((l=n(l,"".concat(t||"","_").concat(r)))[0])&&Zn(u)&&(p[d]=mn(u.text+l[0].text),l.shift()),p.push.apply(p,l)):c(l)?Zn(u)?p[d]=mn(u.text+l):""!==l&&p.push(mn(l)):Zn(l)&&Zn(u)?p[d]=mn(u.text+l.text):(s(e._isVList)&&a(l.tag)&&o(l.key)&&a(t)&&(l.key="__vlist".concat(t,"_").concat(r,"__")),p.push(l)));return p}(n):void 0}function Zn(n){return a(n)&&a(n.text)&&!1===n.isComment}function Xn(n,e){var t,r,o,s,c=null;if(i(n)||"string"==typeof n)for(c=new Array(n.length),t=0,r=n.length;t<r;t++)c[t]=e(n[t],t);else if("number"==typeof n)for(c=new Array(n),t=0;t<n;t++)c[t]=e(t+1,t);else if(d(n))if(dn&&n[Symbol.iterator]){c=[];for(var l=n[Symbol.iterator](),u=l.next();!u.done;)c.push(e(u.value,c.length)),u=l.next()}else for(o=Object.keys(n),c=new Array(o.length),t=0,r=o.length;t<r;t++)s=o[t],c[t]=e(n[s],s,t);return a(c)||(c=[]),c._isVList=!0,c}function Kn(n,e,t,r){var i,o=this.$scopedSlots[n];o?(t=t||{},r&&(t=O(O({},r),t)),i=o(t)||(l(e)?e():e)):i=this.$slots[n]||(l(e)?e():e);var a=t&&t.slot;return a?this.$createElement("template",{slot:a},i):i}function Jn(n){return Ct(this.$options,"filters",n,!0)||z}function Qn(n,e){return i(n)?-1===n.indexOf(e):n!==e}function ne(n,e,t,r,i){var o=M.keyCodes[e]||t;return i&&r&&!M.keyCodes[e]?Qn(i,r):o?Qn(o,n):r?j(r)!==e:void 0===n}function ee(n,e,t,r,o){if(t)if(d(t)){i(t)&&(t=I(t));var a=void 0,s=function(i){if("class"===i||"style"===i||y(i))a=n;else{var s=n.attrs&&n.attrs.type;a=r||M.mustUseProp(e,s,i)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=A(i),l=j(i);c in a||l in a||(a[i]=t[i],o&&((n.on||(n.on={}))["update:".concat(i)]=function(n){t[i]=n}))};for(var c in t)s(c)}else;return n}function te(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function re(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(i(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&oe(n[r],"".concat(e,"_").concat(r),t);else oe(n,e,t)}function oe(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ae(n,e){if(e)if(p(e)){var t=n.on=n.on?O({},n.on):{};for(var r in e){var i=t[r],o=e[r];t[r]=i?[].concat(i,o):o}}else;return n}function se(n,e,t,r){e=e||{$stable:!t};for(var o=0;o<n.length;o++){var a=n[o];i(a)?se(a,e,t):a&&(a.proxy&&(a.fn.proxy=!0),e[a.key]=a.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function le(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=re,n._n=v,n._s=g,n._l=Xn,n._t=Kn,n._q=G,n._i=P,n._m=te,n._f=Jn,n._k=ne,n._b=ee,n._v=mn,n._e=fn,n._u=se,n._g=ae,n._d=ce,n._p=le}function ue(n,e){if(!n||!n.length)return{};for(var t={},r=0,i=n.length;r<i;r++){var o=n[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(t.default||(t.default=[])).push(o);else{var s=a.slot,c=t[s]||(t[s]=[]);"template"===o.tag?c.push.apply(c,o.children||[]):c.push(o)}}for(var l in t)t[l].every(pe)&&delete t[l];return t}function pe(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function fe(n,e,t,i){var o,a=Object.keys(t).length>0,s=e?!!e.$stable:!a,c=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&i&&i!==r&&c===i.$key&&!a&&!i.$hasNormal)return i;for(var l in o={},e)e[l]&&"$"!==l[0]&&(o[l]=me(n,t,l,e[l]))}else o={};for(var d in t)d in o||(o[d]=ge(t,d));return e&&Object.isExtensible(e)&&(e._normalized=o),F(o,"$stable",s),F(o,"$key",c),F(o,"$hasNormal",a),o}function me(n,e,t,r){var o=function(){var e=un;pn(n);var t=arguments.length?r.apply(null,arguments):r({}),o=(t=t&&"object"==typeof t&&!i(t)?[t]:Yn(t))&&t[0];return pn(e),t&&(!o||1===t.length&&o.isComment&&!he(o))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:o,enumerable:!0,configurable:!0}),o}function ge(n,e){return function(){return n[e]}}function ve(n){return{get attrs(){return function(n){if(!n._attrsProxy){var e=n._attrsProxy={};F(e,"_v_attr_proxy",!0),be(e,n.$attrs,r,n)}return n._attrsProxy}(n)},get slots(){return function(n){n._slotsProxy||xe(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:C(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Ln(n,e,t)}))}}}function be(n,e,t,r){var i=!1;for(var o in e)o in n?e[o]!==t[o]&&(i=!0):(i=!0,ye(n,o,r));for(var o in n)o in e||(i=!0,delete n[o]);return i}function ye(n,e,t){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t.$attrs[e]}})}function xe(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var _e=null;function Ee(n,e){return(n.__esModule||dn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),d(n)?e.extend(n):n}function ke(n){if(i(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||he(t)))return t}}function we(n,e,t,r,u,p){return(i(t)||c(t))&&(u=r,r=t,t=void 0),s(p)&&(u=2),function(n,e,t,r,c){if(a(t)&&a(t.__ob__))return fn();a(t)&&a(t.is)&&(e=t.is);if(!e)return fn();0;i(r)&&l(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===c?r=Yn(r):1===c&&(r=function(n){for(var e=0;e<n.length;e++)if(i(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var u,p;if("string"==typeof e){var h=void 0;p=n.$vnode&&n.$vnode.ns||M.getTagNamespace(e),u=M.isReservedTag(e)?new hn(M.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!a(h=Ct(n.$options,"components",e))?new hn(e,t,r,void 0,void 0,n):yt(h,t,n,r,e)}else u=yt(e,t,n,r);return i(u)?u:a(u)?(a(p)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(a(e.children))for(var i=0,c=e.children.length;i<c;i++){var l=e.children[i];a(l.tag)&&(o(l.ns)||s(r)&&"svg"!==l.tag)&&n(l,t,r)}}(u,p),a(t)&&function(n){d(n.style)&&Re(n.style);d(n.class)&&Re(n.class)}(t),u):fn()}(n,e,t,r,u)}function Ae(n,e,t){xn();try{if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,n,e,t))return}catch(n){Te(n,r,"errorCaptured hook")}}Te(n,e,t)}finally{_n()}}function $e(n,e,t,r,i){var o;try{(o=t?n.apply(e,t):n.call(e))&&!o._isVue&&m(o)&&!o._handled&&(o.catch((function(n){return Ae(n,r,i+" (Promise/async)")})),o._handled=!0)}catch(n){Ae(n,r,i)}return o}function Te(n,e,t){if(M.errorHandler)try{return M.errorHandler.call(null,n,e,t)}catch(e){e!==n&&je(e,null,"config.errorHandler")}je(n,e,t)}function je(n,e,t){if(!Y||"undefined"==typeof console)throw n;console.error(n)}var Ce,Se=!1,Oe=[],Ie=!1;function De(){Ie=!1;var n=Oe.slice(0);Oe.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&cn(Promise)){var Be=Promise.resolve();Ce=function(){Be.then(De),Q&&setTimeout(D)},Se=!0}else if(X||"undefined"==typeof MutationObserver||!cn(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ce="undefined"!=typeof setImmediate&&cn(setImmediate)?function(){setImmediate(De)}:function(){setTimeout(De,0)};else{var ze=1,Ge=new MutationObserver(De),Pe=document.createTextNode(String(ze));Ge.observe(Pe,{characterData:!0}),Ce=function(){ze=(ze+1)%2,Pe.data=String(ze)},Se=!0}function qe(n,e){var t;if(Oe.push((function(){if(n)try{n.call(e)}catch(n){Ae(n,e,"nextTick")}else t&&t(e)})),Ie||(Ie=!0,Ce()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Le(n){return function(e,t){if(void 0===t&&(t=un),t)return function(n,e,t){var r=n.$options;r[e]=At(r[e],t)}(t,n,e)}}Le("beforeMount"),Le("mounted"),Le("beforeUpdate"),Le("updated"),Le("beforeDestroy"),Le("destroyed"),Le("errorCaptured"),Le("activated"),Le("deactivated"),Le("serverPrefetch"),Le("renderTracked"),Le("renderTriggered");var He=new ln;function Re(n){return function n(e,t){var r,o,a=i(e);if(!a&&!d(e)||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(a)for(r=e.length;r--;)n(e[r],t);else if(qn(e))n(e.value,t);else for(o=Object.keys(e),r=o.length;r--;)n(e[o[r]],t)}(n,He),He.clear(),n}var Me,Ue=0,Ne=function(){function n(n,e,t,r,i){var o,a;o=this,void 0===(a=Hn||(n?n._scope:void 0))&&(a=Hn),a&&a.active&&a.effects.push(o),(this.vm=n)&&i&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ue,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ln,this.newDepIds=new ln,this.expression="",l(e)?this.getter=e:(this.getter=function(n){if(!W.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=D)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;Ae(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Re(n),_n(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():ut(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||d(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');$e(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&x(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Fe(n,e){Me.$on(n,e)}function We(n,e){Me.$off(n,e)}function Ve(n,e){var t=Me;return function r(){var i=e.apply(null,arguments);null!==i&&t.$off(n,r)}}function Ye(n,e,t){Me=n,Fn(e,t||{},Fe,We,Ve,n),Me=void 0}var Ze=null;function Xe(n){var e=Ze;return Ze=n,function(){Ze=e}}function Ke(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Je(n,e){if(e){if(n._directInactive=!1,Ke(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Je(n.$children[t]);Qe(n,"activated")}}function Qe(n,e,t,r){void 0===r&&(r=!0),xn();var i=un;r&&pn(n);var o=n.$options[e],a="".concat(e," hook");if(o)for(var s=0,c=o.length;s<c;s++)$e(o[s],n,t||null,n,a);n._hasHookEvent&&n.$emit("hook:"+e),r&&pn(i),_n()}var nt=[],et=[],tt={},rt=!1,it=!1,ot=0;var at=0,st=Date.now;if(Y&&!X){var ct=window.performance;ct&&"function"==typeof ct.now&&st()>document.createEvent("Event").timeStamp&&(st=function(){return ct.now()})}var lt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(at=st(),it=!0,nt.sort(lt),ot=0;ot<nt.length;ot++)(n=nt[ot]).before&&n.before(),e=n.id,tt[e]=null,n.run();var t=et.slice(),r=nt.slice();ot=nt.length=et.length=0,tt={},rt=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Je(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&Qe(r,"updated")}}(r),sn&&M.devtools&&sn.emit("flush")}function ut(n){var e=n.id;if(null==tt[e]&&(n!==bn.target||!n.noRecurse)){if(tt[e]=!0,it){for(var t=nt.length-1;t>ot&&nt[t].id>n.id;)t--;nt.splice(t+1,0,n)}else nt.push(n);rt||(rt=!0,qe(dt))}}function pt(n,e){if(n){for(var t=Object.create(null),r=dn?Reflect.ownKeys(n):Object.keys(n),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){var a=n[o].from;if(a in e._provided)t[o]=e._provided[a];else if("default"in n[o]){var s=n[o].default;t[o]=l(s)?s.call(e):s}else 0}}return t}}function ht(n,e,t,o,a){var c,l=this,d=a.options;E(o,"_uid")?(c=Object.create(o))._original=o:(c=o,o=o._original);var u=s(d._compiled),p=!u;this.data=n,this.props=e,this.children=t,this.parent=o,this.listeners=n.on||r,this.injections=pt(d.inject,o),this.slots=function(){return l.$slots||fe(o,n.scopedSlots,l.$slots=ue(t,o)),l.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return fe(o,n.scopedSlots,this.slots())}}),u&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=fe(o,n.scopedSlots,this.$slots)),d._scopeId?this._c=function(n,e,t,r){var a=we(c,n,e,t,r,p);return a&&!i(a)&&(a.fnScopeId=d._scopeId,a.fnContext=o),a}:this._c=function(n,e,t,r){return we(c,n,e,t,r,p)}}function ft(n,e,t,r,i){var o=gn(n);return o.fnContext=t,o.fnOptions=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function mt(n,e){for(var t in e)n[A(t)]=e[t]}function gt(n){return n.name||n.__name||n._componentTag}de(ht.prototype);var vt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;vt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ze)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,i,o){var a=i.data.scopedSlots,s=n.$scopedSlots,c=!!(a&&!a.$stable||s!==r&&!s.$stable||a&&n.$scopedSlots.$key!==a.$key||!a&&n.$scopedSlots.$key),l=!!(o||n.$options._renderChildren||c),d=n.$vnode;n.$options._parentVnode=i,n.$vnode=i,n._vnode&&(n._vnode.parent=i),n.$options._renderChildren=o;var u=i.data.attrs||r;if(n._attrsProxy&&be(n._attrsProxy,u,d.data&&d.data.attrs||r,n)&&(l=!0),n.$attrs=u,n.$listeners=t||r,e&&n.$options.props){Tn(!1);for(var p=n._props,h=n.$options._propKeys||[],f=0;f<h.length;f++){var m=h[f],g=n.$options.props;p[m]=St(m,g,e,n)}Tn(!0),n.$options.propsData=e}t=t||r;var v=n.$options._parentListeners;n.$options._parentListeners=t,Ye(n,t,v),l&&(n.$slots=ue(o,i.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,Qe(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,et.push(e)):Je(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ke(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);Qe(e,"deactivated")}}(e,!0):e.$destroy())}},bt=Object.keys(vt);function yt(n,e,t,c,l){if(!o(n)){var u=t.$options._base;if(d(n)&&(n=u.extend(n)),"function"==typeof n){var p;if(o(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=_e;if(t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var r=n.owners=[t],i=!0,c=null,l=null;t.$on("hook:destroyed",(function(){return x(r,t)}));var u=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},p=q((function(t){n.resolved=Ee(t,e),i?r.length=0:u(!0)})),h=q((function(e){a(n.errorComp)&&(n.error=!0,u(!0))})),f=n(p,h);return d(f)&&(m(f)?o(n.resolved)&&f.then(p,h):m(f.component)&&(f.component.then(p,h),a(f.error)&&(n.errorComp=Ee(f.error,e)),a(f.loading)&&(n.loadingComp=Ee(f.loading,e),0===f.delay?n.loading=!0:c=setTimeout((function(){c=null,o(n.resolved)&&o(n.error)&&(n.loading=!0,u(!1))}),f.delay||200)),a(f.timeout)&&(l=setTimeout((function(){l=null,o(n.resolved)&&h(null)}),f.timeout)))),i=!1,n.loading?n.loadingComp:n.resolved}}(p=n,u)))return function(n,e,t,r,i){var o=fn();return o.asyncFactory=n,o.asyncMeta={data:e,context:t,children:r,tag:i},o}(p,e,t,c,l);e=e||{},Nt(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var o=e.on||(e.on={}),s=o[r],c=e.model.callback;a(s)?(i(s)?-1===s.indexOf(c):s!==c)&&(o[r]=[c].concat(s)):o[r]=c}(n.options,e);var h=function(n,e,t){var r=e.options.props;if(!o(r)){var i={},s=n.attrs,c=n.props;if(a(s)||a(c))for(var l in r){var d=j(l);Vn(i,c,l,d,!0)||Vn(i,s,l,d,!1)}return i}}(e,n);if(s(n.options.functional))return function(n,e,t,o,s){var c=n.options,l={},d=c.props;if(a(d))for(var u in d)l[u]=St(u,d,e||r);else a(t.attrs)&&mt(l,t.attrs),a(t.props)&&mt(l,t.props);var p=new ht(t,l,s,o,n),h=c.render.call(null,p._c,p);if(h instanceof hn)return ft(h,t,p.parent,c,p);if(i(h)){for(var f=Yn(h)||[],m=new Array(f.length),g=0;g<f.length;g++)m[g]=ft(f[g],t,p.parent,c,p);return m}}(n,h,e,t,c);var f=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var g=e.slot;e={},g&&(e.slot=g)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<bt.length;t++){var r=bt[t],i=e[r],o=vt[r];i===o||i&&i._merged||(e[r]=i?xt(o,i):o)}}(e);var v=gt(n.options)||l;return new hn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:h,listeners:f,tag:l,children:c},p)}}}function xt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var _t=D,Et=M.optionMergeStrategies;function kt(n,e){if(!e)return n;for(var t,r,i,o=dn?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)"__ob__"!==(t=o[a])&&(r=n[t],i=e[t],E(n,t)?r!==i&&p(r)&&p(i)&&kt(r,i):In(n,t,i));return n}function wt(n,e,t){return t?function(){var r=l(e)?e.call(t,t):e,i=l(n)?n.call(t,t):n;return r?kt(r,i):i}:e?n?function(){return kt(l(e)?e.call(this,this):e,l(n)?n.call(this,this):n)}:e:n}function At(n,e){var t=e?n?n.concat(e):i(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function $t(n,e,t,r){var i=Object.create(n||null);return e?O(i,e):i}Et.data=function(n,e,t){return t?wt(n,e,t):e&&"function"!=typeof e?n:wt(n,e)},R.forEach((function(n){Et[n]=At})),H.forEach((function(n){Et[n+"s"]=$t})),Et.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var o={};for(var a in O(o,n),e){var s=o[a],c=e[a];s&&!i(s)&&(s=[s]),o[a]=s?s.concat(c):i(c)?c:[c]}return o},Et.props=Et.methods=Et.inject=Et.computed=function(n,e,t,r){if(!n)return e;var i=Object.create(null);return O(i,n),e&&O(i,e),i},Et.provide=wt;var Tt=function(n,e){return void 0===e?n:e};function jt(n,e,t){if(l(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,o,a={};if(i(t))for(r=t.length;r--;)"string"==typeof(o=t[r])&&(a[A(o)]={type:null});else if(p(t))for(var s in t)o=t[s],a[A(s)]=p(o)?o:{type:o};else 0;n.props=a}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(i(t))for(var o=0;o<t.length;o++)r[t[o]]={from:t[o]};else if(p(t))for(var a in t){var s=t[a];r[a]=p(s)?O({from:a},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];l(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=jt(n,e.extends,t)),e.mixins))for(var r=0,o=e.mixins.length;r<o;r++)n=jt(n,e.mixins[r],t);var a,s={};for(a in n)c(a);for(a in e)E(n,a)||c(a);function c(r){var i=Et[r]||Tt;s[r]=i(n[r],e[r],t,r)}return s}function Ct(n,e,t,r){if("string"==typeof t){var i=n[e];if(E(i,t))return i[t];var o=A(t);if(E(i,o))return i[o];var a=$(o);return E(i,a)?i[a]:i[t]||i[o]||i[a]}}function St(n,e,t,r){var i=e[n],o=!E(t,n),a=t[n],s=Bt(Boolean,i.type);if(s>-1)if(o&&!E(i,"default"))a=!1;else if(""===a||a===j(n)){var c=Bt(String,i.type);(c<0||s<c)&&(a=!0)}if(void 0===a){a=function(n,e,t){if(!E(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return l(r)&&"Function"!==It(e.type)?r.call(n):r}(r,i,n);var d=$n;Tn(!0),Sn(a),Tn(d)}return a}var Ot=/^\s*function (\w+)/;function It(n){var e=n&&n.toString().match(Ot);return e?e[1]:""}function Dt(n,e){return It(n)===It(e)}function Bt(n,e){if(!i(e))return Dt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Dt(e[t],n))return t;return-1}var zt={enumerable:!0,configurable:!0,get:D,set:D};function Gt(n,e,t){zt.get=function(){return this[e][t]},zt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,zt)}function Pt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=zn({}),i=n.$options._propKeys=[];n.$parent&&Tn(!1);var o=function(o){i.push(o);var a=St(o,e,t,n);On(r,o,a),o in n||Gt(n,"_props",o)};for(var a in e)o(a);Tn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ve(n);pn(n),xn();var i=$e(t,null,[n._props||zn({}),r],n,"setup");if(_n(),pn(),l(i))e.render=i;else if(d(i))if(n._setupState=i,i.__sfc){var o=n._setupProxy={};for(var a in i)"__sfc"!==a&&Ln(o,i,a)}else for(var a in i)N(a)||Ln(n,i,a);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?D:C(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;p(e=n._data=l(e)?function(n,e){xn();try{return n.call(e,e)}catch(n){return Ae(n,e,"data()"),{}}finally{_n()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,i=(n.$options.methods,t.length);for(;i--;){var o=t[i];0,r&&E(r,o)||N(o)||Gt(n,"_data",o)}var a=Sn(e);a&&a.vmCount++}(n);else{var t=Sn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=an();for(var i in e){var o=e[i],a=l(o)?o:o.get;0,r||(t[i]=new Ne(n,a||D,D,qt)),i in n||Lt(n,i,o)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(i(r))for(var o=0;o<r.length;o++)Mt(n,t,r[o]);else Mt(n,t,r)}}(n,e.watch)}var qt={lazy:!0};function Lt(n,e,t){var r=!an();l(t)?(zt.get=r?Ht(e):Rt(t),zt.set=D):(zt.get=t.get?r&&!1!==t.cache?Ht(e):Rt(t.get):D,zt.set=t.set||D),Object.defineProperty(n,e,zt)}function Ht(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),bn.target&&e.depend(),e.value}}function Rt(n){return function(){return n.call(this,this)}}function Mt(n,e,t,r){return p(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ut=0;function Nt(n){var e=n.options;if(n.super){var t=Nt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var i in t)t[i]!==r[i]&&(e||(e={}),e[i]=t[i]);return e}(n);r&&O(n.extendOptions,r),(e=n.options=jt(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ft(n){this._init(n)}function Wt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,i=n._Ctor||(n._Ctor={});if(i[r])return i[r];var o=gt(n)||gt(t.options);var a=function(n){this._init(n)};return(a.prototype=Object.create(t.prototype)).constructor=a,a.cid=e++,a.options=jt(t.options,n),a.super=t,a.options.props&&function(n){var e=n.options.props;for(var t in e)Gt(n.prototype,"_props",t)}(a),a.options.computed&&function(n){var e=n.options.computed;for(var t in e)Lt(n.prototype,t,e[t])}(a),a.extend=t.extend,a.mixin=t.mixin,a.use=t.use,H.forEach((function(n){a[n]=t[n]})),o&&(a.options.components[o]=a),a.superOptions=t.options,a.extendOptions=n,a.sealedOptions=O({},a.options),i[r]=a,a}}function Vt(n){return n&&(gt(n.Ctor.options)||n.tag)}function Yt(n,e){return i(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!h(n)&&n.test(e)}function Zt(n,e){var t=n.cache,r=n.keys,i=n._vnode;for(var o in t){var a=t[o];if(a){var s=a.name;s&&!e(s)&&Xt(t,o,r,i)}}}function Xt(n,e,t,r){var i=n[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),n[e]=null,x(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ut++,e._isVue=!0,e.__v_skip=!0,e._scope=new Rn(!0),n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var i=r.componentOptions;t.propsData=i.propsData,t._parentListeners=i.listeners,t._renderChildren=i.children,t._componentTag=i.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=jt(Nt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Ye(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,i=t&&t.context;n.$slots=ue(e._renderChildren,i),n.$scopedSlots=t?fe(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,i){return we(n,e,t,r,i,!1)},n.$createElement=function(e,t,r,i){return we(n,e,t,r,i,!0)};var o=t&&t.data;On(n,"$attrs",o&&o.attrs||r,null,!0),On(n,"$listeners",e._parentListeners||r,null,!0)}(e),Qe(e,"beforeCreate",void 0,!1),function(n){var e=pt(n.$options.inject,n);e&&(Tn(!1),Object.keys(e).forEach((function(t){On(n,t,e[t])})),Tn(!0))}(e),Pt(e),function(n){var e=n.$options.provide;if(e){var t=l(e)?e.call(n):e;if(!d(t))return;for(var r=Mn(n),i=dn?Reflect.ownKeys(t):Object.keys(t),o=0;o<i.length;o++){var a=i[o];Object.defineProperty(r,a,Object.getOwnPropertyDescriptor(t,a))}}}(e),Qe(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Ft),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=In,n.prototype.$delete=Dn,n.prototype.$watch=function(n,e,t){if(p(e))return Mt(this,n,e,t);(t=t||{}).user=!0;var r=new Ne(this,n,e,t);if(t.immediate){var i='callback for immediate watcher "'.concat(r.expression,'"');xn(),$e(e,this,[r.value],this,i),_n()}return function(){r.teardown()}}}(Ft),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(i(n))for(var o=0,a=n.length;o<a;o++)r.$on(n[o],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(i(n)){for(var r=0,o=n.length;r<o;r++)t.$off(n[r],e);return t}var a,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var c=s.length;c--;)if((a=s[c])===e||a.fn===e){s.splice(c,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?S(t):t;for(var r=S(arguments,1),i='event handler for "'.concat(n,'"'),o=0,a=t.length;o<a;o++)$e(t[o],e,r,e,i)}return e}}(Ft),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,i=t._vnode,o=Xe(t);t._vnode=n,t.$el=i?t.__patch__(i,n):t.__patch__(t.$el,n,e,!1),o(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){Qe(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||x(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),Qe(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ft),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return qe(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,o=t._parentVnode;o&&e._isMounted&&(e.$scopedSlots=fe(e.$parent,o.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&xe(e._slotsProxy,e.$scopedSlots)),e.$vnode=o;try{pn(e),_e=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){Ae(t,e,"render"),n=e._vnode}finally{_e=null,pn()}return i(n)&&1===n.length&&(n=n[0]),n instanceof hn||(n=fn()),n.parent=o,n}}(Ft);var Kt=[String,RegExp,Array],Jt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Kt,exclude:Kt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var i=t.tag,o=t.componentInstance,a=t.componentOptions;n[r]={name:Vt(a),tag:i,componentInstance:o},e.push(r),this.max&&e.length>parseInt(this.max)&&Xt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Xt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Zt(n,(function(n){return Yt(e,n)}))})),this.$watch("exclude",(function(e){Zt(n,(function(n){return!Yt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=ke(n),t=e&&e.componentOptions;if(t){var r=Vt(t),i=this.include,o=this.exclude;if(i&&(!r||!Yt(i,r))||o&&r&&Yt(o,r))return e;var a=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;a[c]?(e.componentInstance=a[c].componentInstance,x(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return M}};Object.defineProperty(n,"config",e),n.util={warn:_t,extend:O,mergeOptions:jt,defineReactive:On},n.set=In,n.delete=Dn,n.nextTick=qe,n.observable=function(n){return Sn(n),n},n.options=Object.create(null),H.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,O(n.options.components,Jt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=S(arguments,1);return t.unshift(this),l(n.install)?n.install.apply(n,t):l(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=jt(this.options,n),this}}(n),Wt(n),function(n){H.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&p(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&l(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ft),Object.defineProperty(Ft.prototype,"$isServer",{get:an}),Object.defineProperty(Ft.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ft,"FunctionalRenderContext",{value:ht}),Ft.version="2.7.7";var Qt=b("style,class"),nr=b("input,textarea,option,select,progress"),er=b("contenteditable,draggable,spellcheck"),tr=b("events,caret,typing,plaintext-only"),rr=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",or=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},ar=function(n){return or(n)?n.slice(6,n.length):""},sr=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=lr(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=lr(e,t.data));return function(n,e){if(a(n)||a(e))return dr(n,ur(e));return""}(e.staticClass,e.class)}function lr(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function ur(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,i=n.length;r<i;r++)a(e=ur(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):d(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var pr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},hr=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),fr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),mr=function(n){return hr(n)||fr(n)};var gr=Object.create(null);var vr=b("text,number,password,search,email,tel,url");var br=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(pr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),yr={create:function(n,e){xr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(xr(n,!0),xr(e))},destroy:function(n){xr(n,!0)}};function xr(n,e){var t=n.data.ref;if(a(t)){var r=n.context,o=n.componentInstance||n.elm,s=e?null:o,c=e?void 0:o;if(l(t))$e(t,r,[s],r,"template ref function");else{var d=n.data.refInFor,u="string"==typeof t||"number"==typeof t,p=qn(t),h=r.$refs;if(u||p)if(d){var f=u?h[t]:t.value;e?i(f)&&x(f,o):i(f)?f.includes(o)||f.push(o):u?(h[t]=[o],_r(r,t,h[t])):t.value=[o]}else if(u){if(e&&h[t]!==o)return;h[t]=c,_r(r,t,s)}else if(p){if(e&&t.value!==o)return;t.value=s}else 0}}}function _r(n,e,t){var r=n._setupState;r&&E(r,e)&&(qn(r[e])?r[e].value=t:r[e]=t)}var Er=new hn("",{},[]),kr=["create","activate","update","remove","destroy"];function wr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,i=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===i||vr(r)&&vr(i)}(n,e)||s(n.isAsyncPlaceholder)&&o(e.asyncFactory.error))}function Ar(n,e,t){var r,i,o={};for(r=e;r<=t;++r)a(i=n[r].key)&&(o[i]=r);return o}var $r={create:Tr,update:Tr,destroy:function(n){Tr(n,Er)}};function Tr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,i,o=n===Er,a=e===Er,s=Cr(n.data.directives,n.context),c=Cr(e.data.directives,e.context),l=[],d=[];for(t in c)r=s[t],i=c[t],r?(i.oldValue=r.value,i.oldArg=r.arg,Or(i,"update",e,n),i.def&&i.def.componentUpdated&&d.push(i)):(Or(i,"bind",e,n),i.def&&i.def.inserted&&l.push(i));if(l.length){var u=function(){for(var t=0;t<l.length;t++)Or(l[t],"inserted",e,n)};o?Wn(e,"insert",u):u()}d.length&&Wn(e,"postpatch",(function(){for(var t=0;t<d.length;t++)Or(d[t],"componentUpdated",e,n)}));if(!o)for(t in s)c[t]||Or(s[t],"unbind",n,n,a)}(n,e)}var jr=Object.create(null);function Cr(n,e){var t,r,i=Object.create(null);if(!n)return i;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=jr),i[Sr(r)]=r,e._setupState&&e._setupState.__sfc&&(r.def=r.def||Ct(e,"_setupState","v-"+r.name)),r.def=r.def||Ct(e.$options,"directives",r.name);return i}function Sr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Or(n,e,t,r,i){var o=n.def&&n.def[e];if(o)try{o(t.elm,n,t,r,i)}catch(r){Ae(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Ir=[yr,$r];function Dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||o(n.data.attrs)&&o(e.data.attrs))){var r,i,c=e.elm,l=n.data.attrs||{},d=e.data.attrs||{};for(r in(a(d.__ob__)||s(d._v_attr_proxy))&&(d=e.data.attrs=O({},d)),d)i=d[r],l[r]!==i&&Br(c,r,i,e.data.pre);for(r in(X||J)&&d.value!==l.value&&Br(c,"value",d.value),l)o(d[r])&&(or(r)?c.removeAttributeNS(ir,ar(r)):er(r)||c.removeAttribute(r))}}function Br(n,e,t,r){r||n.tagName.indexOf("-")>-1?zr(n,e,t):rr(e)?sr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):er(e)?n.setAttribute(e,function(n,e){return sr(e)||"false"===e?"false":"contenteditable"===n&&tr(e)?e:"true"}(e,t)):or(e)?sr(t)?n.removeAttributeNS(ir,ar(e)):n.setAttributeNS(ir,e,t):zr(n,e,t)}function zr(n,e,t){if(sr(t))n.removeAttribute(e);else{if(X&&!K&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Gr={create:Dr,update:Dr};function Pr(n,e){var t=e.elm,r=e.data,i=n.data;if(!(o(r.staticClass)&&o(r.class)&&(o(i)||o(i.staticClass)&&o(i.class)))){var s=cr(e),c=t._transitionClasses;a(c)&&(s=dr(s,ur(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var qr,Lr={create:Pr,update:Pr};function Hr(n,e,t){var r=qr;return function i(){var o=e.apply(null,arguments);null!==o&&Ur(n,i,t,r)}}var Rr=Se&&!(en&&Number(en[1])<=53);function Mr(n,e,t,r){if(Rr){var i=at,o=e;e=o._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=i||n.timeStamp<=0||n.target.ownerDocument!==document)return o.apply(this,arguments)}}qr.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Ur(n,e,t,r){(r||qr).removeEventListener(n,e._wrapper||e,t)}function Nr(n,e){if(!o(n.data.on)||!o(e.data.on)){var t=e.data.on||{},r=n.data.on||{};qr=e.elm||n.elm,function(n){if(a(n.__r)){var e=X?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Fn(t,r,Mr,Ur,Hr,e.context),qr=void 0}}var Fr,Wr={create:Nr,update:Nr,destroy:function(n){return Nr(n,Er)}};function Vr(n,e){if(!o(n.data.domProps)||!o(e.data.domProps)){var t,r,i=e.elm,c=n.data.domProps||{},l=e.data.domProps||{};for(t in(a(l.__ob__)||s(l._v_attr_proxy))&&(l=e.data.domProps=O({},l)),c)t in l||(i[t]="");for(t in l){if(r=l[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===c[t])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===t&&"PROGRESS"!==i.tagName){i._value=r;var d=o(r)?"":String(r);Yr(i,d)&&(i.value=d)}else if("innerHTML"===t&&fr(i.tagName)&&o(i.innerHTML)){(Fr=Fr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var u=Fr.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;u.firstChild;)i.appendChild(u.firstChild)}else if(r!==c[t])try{i[t]=r}catch(n){}}}}function Yr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return v(t)!==v(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Zr={create:Vr,update:Vr},Xr=k((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Kr(n){var e=Jr(n.style);return n.staticStyle?O(n.staticStyle,e):e}function Jr(n){return Array.isArray(n)?I(n):"string"==typeof n?Xr(n):n}var Qr,ni=/^--/,ei=/\s*!important$/,ti=function(n,e,t){if(ni.test(e))n.style.setProperty(e,t);else if(ei.test(t))n.style.setProperty(j(e),t.replace(ei,""),"important");else{var r=ii(e);if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)n.style[r]=t[i];else n.style[r]=t}},ri=["Webkit","Moz","ms"],ii=k((function(n){if(Qr=Qr||document.createElement("div").style,"filter"!==(n=A(n))&&n in Qr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<ri.length;t++){var r=ri[t]+e;if(r in Qr)return r}}));function oi(n,e){var t=e.data,r=n.data;if(!(o(t.staticStyle)&&o(t.style)&&o(r.staticStyle)&&o(r.style))){var i,s,c=e.elm,l=r.staticStyle,d=r.normalizedStyle||r.style||{},u=l||d,p=Jr(e.data.style)||{};e.data.normalizedStyle=a(p.__ob__)?O({},p):p;var h=function(n,e){var t,r={};if(e)for(var i=n;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(t=Kr(i.data))&&O(r,t);(t=Kr(n.data))&&O(r,t);for(var o=n;o=o.parent;)o.data&&(t=Kr(o.data))&&O(r,t);return r}(e,!0);for(s in u)o(h[s])&&ti(c,s,"");for(s in h)(i=h[s])!==u[s]&&ti(c,s,null==i?"":i)}}var ai={create:oi,update:oi},si=/\s+/;function ci(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(si).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function li(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(si).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function di(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&O(e,ui(n.name||"v")),O(e,n),e}return"string"==typeof n?ui(n):void 0}}var ui=k((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),pi=Y&&!K,hi="transition",fi="transitionend",mi="animation",gi="animationend";pi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(hi="WebkitTransition",fi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(mi="WebkitAnimation",gi="webkitAnimationEnd"));var vi=Y?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function bi(n){vi((function(){vi(n)}))}function yi(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),ci(n,e))}function xi(n,e){n._transitionClasses&&x(n._transitionClasses,e),li(n,e)}function _i(n,e,t){var r=ki(n,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return t();var s="transition"===i?fi:gi,c=0,l=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++c>=a&&l()};setTimeout((function(){c<a&&l()}),o+1),n.addEventListener(s,d)}var Ei=/\b(transform|all)(,|$)/;function ki(n,e){var t,r=window.getComputedStyle(n),i=(r[hi+"Delay"]||"").split(", "),o=(r[hi+"Duration"]||"").split(", "),a=wi(i,o),s=(r[mi+"Delay"]||"").split(", "),c=(r[mi+"Duration"]||"").split(", "),l=wi(s,c),d=0,u=0;return"transition"===e?a>0&&(t="transition",d=a,u=o.length):"animation"===e?l>0&&(t="animation",d=l,u=c.length):u=(t=(d=Math.max(a,l))>0?a>l?"transition":"animation":null)?"transition"===t?o.length:c.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&Ei.test(r[hi+"Property"])}}function wi(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return Ai(e)+Ai(n[t])})))}function Ai(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function $i(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=di(n.data.transition);if(!o(r)&&!a(t._enterCb)&&1===t.nodeType){for(var i=r.css,s=r.type,c=r.enterClass,u=r.enterToClass,p=r.enterActiveClass,h=r.appearClass,f=r.appearToClass,m=r.appearActiveClass,g=r.beforeEnter,b=r.enter,y=r.afterEnter,x=r.enterCancelled,_=r.beforeAppear,E=r.appear,k=r.afterAppear,w=r.appearCancelled,A=r.duration,$=Ze,T=Ze.$vnode;T&&T.parent;)$=T.context,T=T.parent;var j=!$._isMounted||!n.isRootInsert;if(!j||E||""===E){var C=j&&h?h:c,S=j&&m?m:p,O=j&&f?f:u,I=j&&_||g,D=j&&l(E)?E:b,B=j&&k||y,z=j&&w||x,G=v(d(A)?A.enter:A);0;var P=!1!==i&&!K,L=Ci(D),H=t._enterCb=q((function(){P&&(xi(t,O),xi(t,S)),H.cancelled?(P&&xi(t,C),z&&z(t)):B&&B(t),t._enterCb=null}));n.data.show||Wn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),D&&D(t,H)})),I&&I(t),P&&(yi(t,C),yi(t,S),bi((function(){xi(t,C),H.cancelled||(yi(t,O),L||(ji(G)?setTimeout(H,G):_i(t,s,H)))}))),n.data.show&&(e&&e(),D&&D(t,H)),P||L||H()}}}function Ti(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=di(n.data.transition);if(o(r)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var i=r.css,s=r.type,c=r.leaveClass,l=r.leaveToClass,u=r.leaveActiveClass,p=r.beforeLeave,h=r.leave,f=r.afterLeave,m=r.leaveCancelled,g=r.delayLeave,b=r.duration,y=!1!==i&&!K,x=Ci(h),_=v(d(b)?b.leave:b);0;var E=t._leaveCb=q((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(xi(t,l),xi(t,u)),E.cancelled?(y&&xi(t,c),m&&m(t)):(e(),f&&f(t)),t._leaveCb=null}));g?g(k):k()}function k(){E.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),y&&(yi(t,c),yi(t,u),bi((function(){xi(t,c),E.cancelled||(yi(t,l),x||(ji(_)?setTimeout(E,_):_i(t,s,E)))}))),h&&h(t,E),y||x||E())}}function ji(n){return"number"==typeof n&&!isNaN(n)}function Ci(n){if(o(n))return!1;var e=n.fns;return a(e)?Ci(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Si(n,e){!0!==e.data.show&&$i(e)}var Oi=function(n){var e,t,r={},l=n.modules,d=n.nodeOps;for(e=0;e<kr.length;++e)for(r[kr[e]]=[],t=0;t<l.length;++t)a(l[t][kr[e]])&&r[kr[e]].push(l[t][kr[e]]);function u(n){var e=d.parentNode(n);a(e)&&d.removeChild(e,n)}function p(n,e,t,i,o,c,l){if(a(n.elm)&&a(c)&&(n=c[l]=gn(n)),n.isRootInsert=!o,!function(n,e,t,i){var o=n.data;if(a(o)){var c=a(n.componentInstance)&&o.keepAlive;if(a(o=o.hook)&&a(o=o.init)&&o(n,!1),a(n.componentInstance))return h(n,e),f(t,n.elm,i),s(c)&&function(n,e,t,i){var o,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,a(o=s.data)&&a(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](Er,s);e.push(s);break}f(t,n.elm,i)}(n,e,t,i),!0}}(n,e,t,i)){var u=n.data,p=n.children,g=n.tag;a(g)?(n.elm=n.ns?d.createElementNS(n.ns,g):d.createElement(g,n),y(n),m(n,p,e),a(u)&&v(n,e),f(t,n.elm,i)):s(n.isComment)?(n.elm=d.createComment(n.text),f(t,n.elm,i)):(n.elm=d.createTextNode(n.text),f(t,n.elm,i))}}function h(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,g(n)?(v(n,e),y(n)):(xr(n),e.push(n))}function f(n,e,t){a(n)&&(a(t)?d.parentNode(t)===n&&d.insertBefore(n,e,t):d.appendChild(n,e))}function m(n,e,t){if(i(e)){0;for(var r=0;r<e.length;++r)p(e[r],t,n.elm,null,!0,e,r)}else c(n.text)&&d.appendChild(n.elm,d.createTextNode(String(n.text)))}function g(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function v(n,t){for(var i=0;i<r.create.length;++i)r.create[i](Er,n);a(e=n.data.hook)&&(a(e.create)&&e.create(Er,n),a(e.insert)&&t.push(n))}function y(n){var e;if(a(e=n.fnScopeId))d.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e),t=t.parent;a(e=Ze)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&d.setStyleScope(n.elm,e)}function x(n,e,t,r,i,o){for(;r<=i;++r)p(t[r],o,n,e,!1,t,r)}function _(n){var e,t,i=n.data;if(a(i))for(a(e=i.hook)&&a(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)_(n.children[t])}function E(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(k(r),_(r)):u(r.elm))}}function k(n,e){if(a(e)||a(n.data)){var t,i=r.remove.length+1;for(a(e)?e.listeners+=i:e=function(n,e){function t(){0==--t.listeners&&u(n)}return t.listeners=e,t}(n.elm,i),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&k(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else u(n.elm)}function w(n,e,t,r){for(var i=t;i<r;i++){var o=e[i];if(a(o)&&wr(n,o))return i}}function A(n,e,t,i,c,l){if(n!==e){a(e.elm)&&a(i)&&(e=i[c]=gn(e));var u=e.elm=n.elm;if(s(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?j(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,f=e.data;a(f)&&a(h=f.hook)&&a(h=h.prepatch)&&h(n,e);var m=n.children,v=e.children;if(a(f)&&g(e)){for(h=0;h<r.update.length;++h)r.update[h](n,e);a(h=f.hook)&&a(h=h.update)&&h(n,e)}o(e.text)?a(m)&&a(v)?m!==v&&function(n,e,t,r,i){var s,c,l,u=0,h=0,f=e.length-1,m=e[0],g=e[f],v=t.length-1,b=t[0],y=t[v],_=!i;for(0;u<=f&&h<=v;)o(m)?m=e[++u]:o(g)?g=e[--f]:wr(m,b)?(A(m,b,r,t,h),m=e[++u],b=t[++h]):wr(g,y)?(A(g,y,r,t,v),g=e[--f],y=t[--v]):wr(m,y)?(A(m,y,r,t,v),_&&d.insertBefore(n,m.elm,d.nextSibling(g.elm)),m=e[++u],y=t[--v]):wr(g,b)?(A(g,b,r,t,h),_&&d.insertBefore(n,g.elm,m.elm),g=e[--f],b=t[++h]):(o(s)&&(s=Ar(e,u,f)),o(c=a(b.key)?s[b.key]:w(b,e,u,f))?p(b,r,n,m.elm,!1,t,h):wr(l=e[c],b)?(A(l,b,r,t,h),e[c]=void 0,_&&d.insertBefore(n,l.elm,m.elm)):p(b,r,n,m.elm,!1,t,h),b=t[++h]);u>f?x(n,o(t[v+1])?null:t[v+1].elm,t,h,v,r):h>v&&E(e,u,f)}(u,m,v,t,l):a(v)?(a(n.text)&&d.setTextContent(u,""),x(u,null,v,0,v.length-1,t)):a(m)?E(m,0,m.length-1):a(n.text)&&d.setTextContent(u,""):n.text!==e.text&&d.setTextContent(u,e.text),a(f)&&a(h=f.hook)&&a(h=h.postpatch)&&h(n,e)}}}function $(n,e,t){if(s(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var T=b("attrs,class,staticClass,staticStyle,key");function j(n,e,t,r){var i,o=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,s(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(i=c.hook)&&a(i=i.init)&&i(e,!0),a(i=e.componentInstance)))return h(e,t),!0;if(a(o)){if(a(l))if(n.hasChildNodes())if(a(i=c)&&a(i=i.domProps)&&a(i=i.innerHTML)){if(i!==n.innerHTML)return!1}else{for(var d=!0,u=n.firstChild,p=0;p<l.length;p++){if(!u||!j(u,l[p],t,r)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else m(e,l,t);if(a(c)){var f=!1;for(var g in c)if(!T(g)){f=!0,v(e,t);break}!f&&c.class&&Re(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,i){if(!o(e)){var c,l=!1,u=[];if(o(n))l=!0,p(e,u);else{var h=a(n.nodeType);if(!h&&wr(n,e))A(n,e,u,null,null,i);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&j(n,e,u))return $(e,u,!0),n;c=n,n=new hn(d.tagName(c).toLowerCase(),{},[],void 0,c)}var f=n.elm,m=d.parentNode(f);if(p(e,u,f._leaveCb?null:m,d.nextSibling(f)),a(e.parent))for(var v=e.parent,b=g(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var x=0;x<r.create.length;++x)r.create[x](Er,v);var k=v.data.hook.insert;if(k.merged)for(var w=1;w<k.fns.length;w++)k.fns[w]()}else xr(v);v=v.parent}a(m)?E([n],0,0):a(n.tag)&&_(n)}}return $(e,u,l),e.elm}a(n)&&_(n)}}({nodeOps:br,modules:[Gr,Lr,Wr,Zr,ai,Y?{create:Si,activate:Si,remove:function(n,e){!0!==n.data.show?Ti(n,e):e()}}:{}].concat(Ir)});K&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Li(n,"input")}));var Ii={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Wn(t,"postpatch",(function(){Ii.componentUpdated(n,e,t)})):Di(n,e,t.context),n._vOptions=[].map.call(n.options,Gi)):("textarea"===t.tag||vr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",Pi),n.addEventListener("compositionend",qi),n.addEventListener("change",qi),K&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Di(n,e,t.context);var r=n._vOptions,i=n._vOptions=[].map.call(n.options,Gi);if(i.some((function(n,e){return!G(n,r[e])})))(n.multiple?e.value.some((function(n){return zi(n,i)})):e.value!==e.oldValue&&zi(e.value,i))&&Li(n,"change")}}};function Di(n,e,t){Bi(n,e,t),(X||J)&&setTimeout((function(){Bi(n,e,t)}),0)}function Bi(n,e,t){var r=e.value,i=n.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,c=n.options.length;s<c;s++)if(a=n.options[s],i)o=P(r,Gi(a))>-1,a.selected!==o&&(a.selected=o);else if(G(Gi(a),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));i||(n.selectedIndex=-1)}}function zi(n,e){return e.every((function(e){return!G(e,n)}))}function Gi(n){return"_value"in n?n._value:n.value}function Pi(n){n.target.composing=!0}function qi(n){n.target.composing&&(n.target.composing=!1,Li(n.target,"input"))}function Li(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Hi(n){return!n.componentInstance||n.data&&n.data.transition?n:Hi(n.componentInstance._vnode)}var Ri={model:Ii,show:{bind:function(n,e,t){var r=e.value,i=(t=Hi(t)).data&&t.data.transition,o=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&i?(t.data.show=!0,$i(t,(function(){n.style.display=o}))):n.style.display=r?o:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Hi(t)).data&&t.data.transition?(t.data.show=!0,r?$i(t,(function(){n.style.display=n.__vOriginalDisplay})):Ti(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,i){i||(n.style.display=n.__vOriginalDisplay)}}},Mi={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ui(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Ui(ke(e.children)):n}function Ni(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var i=t._parentListeners;for(var r in i)e[A(r)]=i[r];return e}function Fi(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Wi=function(n){return n.tag||he(n)},Vi=function(n){return"show"===n.name},Yi={name:"transition",props:Mi,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Wi)).length){0;var r=this.mode;0;var i=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return i;var o=Ui(i);if(!o)return i;if(this._leaving)return Fi(n,i);var a="__transition-".concat(this._uid,"-");o.key=null==o.key?o.isComment?a+"comment":a+o.tag:c(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var s=(o.data||(o.data={})).transition=Ni(this),l=this._vnode,d=Ui(l);if(o.data.directives&&o.data.directives.some(Vi)&&(o.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(o,d)&&!he(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=O({},s);if("out-in"===r)return this._leaving=!0,Wn(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Fi(n,i);if("in-out"===r){if(he(o))return l;var p,h=function(){p()};Wn(s,"afterEnter",h),Wn(s,"enterCancelled",h),Wn(u,"delayLeave",(function(n){p=n}))}}return i}}},Zi=O({tag:String,moveClass:String},Mi);function Xi(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ki(n){n.data.newPos=n.elm.getBoundingClientRect()}function Ji(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,i=e.top-t.top;if(r||i){n.data.moved=!0;var o=n.elm.style;o.transform=o.WebkitTransform="translate(".concat(r,"px,").concat(i,"px)"),o.transitionDuration="0s"}}delete Zi.mode;var Qi={Transition:Yi,TransitionGroup:{props:Zi,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var i=Xe(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,i(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=Ni(this),s=0;s<i.length;s++){if((d=i[s]).tag)if(null!=d.key&&0!==String(d.key).indexOf("__vlist"))o.push(d),t[d.key]=d,(d.data||(d.data={})).transition=a;else;}if(r){var c=[],l=[];for(s=0;s<r.length;s++){var d;(d=r[s]).data.transition=a,d.data.pos=d.elm.getBoundingClientRect(),t[d.key]?c.push(d):l.push(d)}this.kept=n(e,null,c),this.removed=l}return n(e,null,o)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Xi),n.forEach(Ki),n.forEach(Ji),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;yi(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(fi,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(fi,n),t._moveCb=null,xi(t,e))})}})))},methods:{hasMove:function(n,e){if(!pi)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){li(t,n)})),ci(t,e),t.style.display="none",this.$el.appendChild(t);var r=ki(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function no(n,e){for(var t in e)n[t]=e[t];return n}Ft.config.mustUseProp=function(n,e,t){return"value"===t&&nr(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ft.config.isReservedTag=mr,Ft.config.isReservedAttr=Qt,Ft.config.getTagNamespace=function(n){return fr(n)?"svg":"math"===n?"math":void 0},Ft.config.isUnknownElement=function(n){if(!Y)return!0;if(mr(n))return!1;if(n=n.toLowerCase(),null!=gr[n])return gr[n];var e=document.createElement(n);return n.indexOf("-")>-1?gr[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:gr[n]=/HTMLUnknownElement/.test(e.toString())},O(Ft.options.directives,Ri),O(Ft.options.components,Qi),Ft.prototype.__patch__=Y?Oi:D,Ft.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=fn),Qe(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ne(n,r,D,{before:function(){n._isMounted&&!n._isDestroyed&&Qe(n,"beforeUpdate")}},!0),t=!1;var i=n._preWatchers;if(i)for(var o=0;o<i.length;o++)i[o].run();return null==n.$vnode&&(n._isMounted=!0,Qe(n,"mounted")),n}(this,n=n&&Y?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},Y&&setTimeout((function(){M.devtools&&sn&&sn.emit("init",Ft)}),0);var eo=/[!'()*]/g,to=function(n){return"%"+n.charCodeAt(0).toString(16)},ro=/%2C/g,io=function(n){return encodeURIComponent(n).replace(eo,to).replace(ro,",")};function oo(n){try{return decodeURIComponent(n)}catch(n){0}return n}var ao=function(n){return null==n||"object"==typeof n?n:String(n)};function so(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=oo(t.shift()),i=t.length>0?oo(t.join("=")):null;void 0===e[r]?e[r]=i:Array.isArray(e[r])?e[r].push(i):e[r]=[e[r],i]})),e):e}function co(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return io(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(io(e)):r.push(io(e)+"="+io(n)))})),r.join("&")}return io(e)+"="+io(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var lo=/\/?$/;function uo(n,e,t,r){var i=r&&r.options.stringifyQuery,o=e.query||{};try{o=po(o)}catch(n){}var a={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:o,params:e.params||{},fullPath:mo(e,i),matched:n?fo(n):[]};return t&&(a.redirectedFrom=mo(t,i)),Object.freeze(a)}function po(n){if(Array.isArray(n))return n.map(po);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=po(n[t]);return e}return n}var ho=uo(null,{path:"/"});function fo(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function mo(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var i=n.hash;return void 0===i&&(i=""),(t||"/")+(e||co)(r)+i}function go(n,e,t){return e===ho?n===e:!!e&&(n.path&&e.path?n.path.replace(lo,"")===e.path.replace(lo,"")&&(t||n.hash===e.hash&&vo(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&vo(n.query,e.query)&&vo(n.params,e.params))))}function vo(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,i){var o=n[t];if(r[i]!==t)return!1;var a=e[t];return null==o||null==a?o===a:"object"==typeof o&&"object"==typeof a?vo(o,a):String(o)===String(a)}))}function bo(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var i=t.instances[r],o=t.enteredCbs[r];if(i&&o){delete t.enteredCbs[r];for(var a=0;a<o.length;a++)i._isBeingDestroyed||o[a](i)}}}}var yo={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,i=e.parent,o=e.data;o.routerView=!0;for(var a=i.$createElement,s=t.name,c=i.$route,l=i._routerViewCache||(i._routerViewCache={}),d=0,u=!1;i&&i._routerRoot!==i;){var p=i.$vnode?i.$vnode.data:{};p.routerView&&d++,p.keepAlive&&i._directInactive&&i._inactive&&(u=!0),i=i.$parent}if(o.routerViewDepth=d,u){var h=l[s],f=h&&h.component;return f?(h.configProps&&xo(f,o,h.route,h.configProps),a(f,o,r)):a()}var m=c.matched[d],g=m&&m.components[s];if(!m||!g)return l[s]=null,a();l[s]={component:g},o.registerRouteInstance=function(n,e){var t=m.instances[s];(e&&t!==n||!e&&t===n)&&(m.instances[s]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){m.instances[s]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==m.instances[s]&&(m.instances[s]=n.componentInstance),bo(c)};var v=m.props&&m.props[s];return v&&(no(l[s],{route:c,configProps:v}),xo(g,o,c,v)),a(g,o,r)}};function xo(n,e,t,r){var i=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(i){i=e.props=no({},i);var o=e.attrs=e.attrs||{};for(var a in i)n.props&&a in n.props||(o[a]=i[a],delete i[a])}}function _o(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var i=e.split("/");t&&i[i.length-1]||i.pop();for(var o=n.replace(/^\//,"").split("/"),a=0;a<o.length;a++){var s=o[a];".."===s?i.pop():"."!==s&&i.push(s)}return""!==i[0]&&i.unshift(""),i.join("/")}function Eo(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var ko=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},wo=qo,Ao=So,$o=function(n,e){return Io(So(n,e),e)},To=Io,jo=Po,Co=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function So(n,e){for(var t,r=[],i=0,o=0,a="",s=e&&e.delimiter||"/";null!=(t=Co.exec(n));){var c=t[0],l=t[1],d=t.index;if(a+=n.slice(o,d),o=d+c.length,l)a+=l[1];else{var u=n[o],p=t[2],h=t[3],f=t[4],m=t[5],g=t[6],v=t[7];a&&(r.push(a),a="");var b=null!=p&&null!=u&&u!==p,y="+"===g||"*"===g,x="?"===g||"*"===g,_=t[2]||s,E=f||m;r.push({name:h||i++,prefix:p||"",delimiter:_,optional:x,repeat:y,partial:b,asterisk:!!v,pattern:E?Bo(E):v?".*":"[^"+Do(_)+"]+?"})}}return o<n.length&&(a+=n.substr(o)),a&&r.push(a),r}function Oo(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Io(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Go(e)));return function(e,r){for(var i="",o=e||{},a=(r||{}).pretty?Oo:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,d=o[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(ko(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(l=a(d[u]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");i+=(0===u?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):a(d),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');i+=c.prefix+l}}else i+=c}return i}}function Do(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Bo(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function zo(n,e){return n.keys=e,n}function Go(n){return n&&n.sensitive?"":"i"}function Po(n,e,t){ko(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,i=!1!==t.end,o="",a=0;a<n.length;a++){var s=n[a];if("string"==typeof s)o+=Do(s);else{var c=Do(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),o+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var d=Do(t.delimiter||"/"),u=o.slice(-d.length)===d;return r||(o=(u?o.slice(0,-d.length):o)+"(?:"+d+"(?=$))?"),o+=i?"$":r&&u?"":"(?="+d+"|$)",zo(new RegExp("^"+o,Go(t)),e)}function qo(n,e,t){return ko(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return zo(n,e)}(n,e):ko(n)?function(n,e,t){for(var r=[],i=0;i<n.length;i++)r.push(qo(n[i],e,t).source);return zo(new RegExp("(?:"+r.join("|")+")",Go(t)),e)}(n,e,t):function(n,e,t){return Po(So(n,t),e,t)}(n,e,t)}wo.parse=Ao,wo.compile=$o,wo.tokensToFunction=To,wo.tokensToRegExp=jo;var Lo=Object.create(null);function Ho(n,e,t){e=e||{};try{var r=Lo[n]||(Lo[n]=wo.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Ro(n,e,t,r){var i="string"==typeof n?{path:n}:n;if(i._normalized)return i;if(i.name){var o=(i=no({},n)).params;return o&&"object"==typeof o&&(i.params=no({},o)),i}if(!i.path&&i.params&&e){(i=no({},i))._normalized=!0;var a=no(no({},e.params),i.params);if(e.name)i.name=e.name,i.params=a;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;i.path=Ho(s,a,e.path)}else 0;return i}var c=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var i=n.indexOf("?");return i>=0&&(t=n.slice(i+1),n=n.slice(0,i)),{path:n,query:t,hash:e}}(i.path||""),l=e&&e.path||"/",d=c.path?_o(c.path,l,t||i.append):l,u=function(n,e,t){void 0===e&&(e={});var r,i=t||so;try{r=i(n||"")}catch(n){r={}}for(var o in e){var a=e[o];r[o]=Array.isArray(a)?a.map(ao):ao(a)}return r}(c.query,i.query,r&&r.options.parseQuery),p=i.hash||c.hash;return p&&"#"!==p.charAt(0)&&(p="#"+p),{_normalized:!0,path:d,query:u,hash:p}}var Mo,Uo=function(){},No={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,i=t.resolve(this.to,r,this.append),o=i.location,a=i.route,s=i.href,c={},l=t.options.linkActiveClass,d=t.options.linkExactActiveClass,u=null==l?"router-link-active":l,p=null==d?"router-link-exact-active":d,h=null==this.activeClass?u:this.activeClass,f=null==this.exactActiveClass?p:this.exactActiveClass,m=a.redirectedFrom?uo(null,Ro(a.redirectedFrom),null,t):a;c[f]=go(r,m,this.exactPath),c[h]=this.exact||this.exactPath?c[f]:function(n,e){return 0===n.path.replace(lo,"/").indexOf(e.path.replace(lo,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,m);var g=c[f]?this.ariaCurrentValue:null,v=function(n){Fo(n)&&(e.replace?t.replace(o,Uo):t.push(o,Uo))},b={click:Fo};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:c},x=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:a,navigate:v,isActive:c[h],isExactActive:c[f]});if(x){if(1===x.length)return x[0];if(x.length>1||!x.length)return 0===x.length?n():n("span",{},x)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":g};else{var _=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(_){_.isStatic=!1;var E=_.data=no({},_.data);for(var k in E.on=E.on||{},E.on){var w=E.on[k];k in b&&(E.on[k]=Array.isArray(w)?w:[w])}for(var A in b)A in E.on?E.on[A].push(b[A]):E.on[A]=v;var $=_.data.attrs=no({},_.data.attrs);$.href=s,$["aria-current"]=g}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Fo(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Wo="undefined"!=typeof window;function Vo(n,e,t,r,i){var o=e||[],a=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,i,o,a){var s=i.path,c=i.name;0;var l=i.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return Eo(e.path+"/"+n)}(s,o,l.strict);"boolean"==typeof i.caseSensitive&&(l.sensitive=i.caseSensitive);var u={path:d,regex:Yo(d,l),components:i.components||{default:i.component},alias:i.alias?"string"==typeof i.alias?[i.alias]:i.alias:[],instances:{},enteredCbs:{},name:c,parent:o,matchAs:a,redirect:i.redirect,beforeEnter:i.beforeEnter,meta:i.meta||{},props:null==i.props?{}:i.components?i.props:{default:i.props}};i.children&&i.children.forEach((function(i){var o=a?Eo(a+"/"+i.path):void 0;n(e,t,r,i,u,o)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==i.alias)for(var p=Array.isArray(i.alias)?i.alias:[i.alias],h=0;h<p.length;++h){0;var f={path:p[h],children:i.children};n(e,t,r,f,o,u.path||"/")}c&&(r[c]||(r[c]=u))}(o,a,s,n,i)}));for(var c=0,l=o.length;c<l;c++)"*"===o[c]&&(o.push(o.splice(c,1)[0]),l--,c--);return{pathList:o,pathMap:a,nameMap:s}}function Yo(n,e){return wo(n,[],e)}function Zo(n,e){var t=Vo(n),r=t.pathList,i=t.pathMap,o=t.nameMap;function a(n,t,a){var s=Ro(n,t,!1,e),l=s.name;if(l){var d=o[l];if(!d)return c(null,s);var u=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=Ho(d.path,s.params),c(d,s,a)}if(s.path){s.params={};for(var h=0;h<r.length;h++){var f=r[h],m=i[f];if(Xo(m.regex,s.path,s.params))return c(m,s,a)}}return c(null,s)}function s(n,t){var r=n.redirect,i="function"==typeof r?r(uo(n,t,null,e)):r;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return c(null,t);var s=i,l=s.name,d=s.path,u=t.query,p=t.hash,h=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,h=s.hasOwnProperty("params")?s.params:h,l){o[l];return a({_normalized:!0,name:l,query:u,hash:p,params:h},void 0,t)}if(d){var f=function(n,e){return _o(n,e.parent?e.parent.path:"/",!0)}(d,n);return a({_normalized:!0,path:Ho(f,h),query:u,hash:p},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=a({_normalized:!0,path:Ho(t,e.params)});if(r){var i=r.matched,o=i[i.length-1];return e.params=r.params,c(o,e)}return c(null,e)}(0,t,n.matchAs):uo(n,t,r,e)}return{match:a,addRoute:function(n,e){var t="object"!=typeof n?o[n]:void 0;Vo([e||n],r,i,o,t),t&&t.alias.length&&Vo(t.alias.map((function(n){return{path:n,children:[e]}})),r,i,o,t)},getRoutes:function(){return r.map((function(n){return i[n]}))},addRoutes:function(n){Vo(n,r,i,o)}}}function Xo(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var i=1,o=r.length;i<o;++i){var a=n.keys[i-1];a&&(t[a.name||"pathMatch"]="string"==typeof r[i]?oo(r[i]):r[i])}return!0}var Ko=Wo&&window.performance&&window.performance.now?window.performance:Date;function Jo(){return Ko.now().toFixed(3)}var Qo=Jo();function na(){return Qo}function ea(n){return Qo=n}var ta=Object.create(null);function ra(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=no({},window.history.state);return t.key=na(),window.history.replaceState(t,"",e),window.addEventListener("popstate",aa),function(){window.removeEventListener("popstate",aa)}}function ia(n,e,t,r){if(n.app){var i=n.options.scrollBehavior;i&&n.app.$nextTick((function(){var o=function(){var n=na();if(n)return ta[n]}(),a=i.call(n,e,t,r?o:null);a&&("function"==typeof a.then?a.then((function(n){ua(n,o)})).catch((function(n){0})):ua(a,o))}))}}function oa(){var n=na();n&&(ta[n]={x:window.pageXOffset,y:window.pageYOffset})}function aa(n){oa(),n.state&&n.state.key&&ea(n.state.key)}function sa(n){return la(n.x)||la(n.y)}function ca(n){return{x:la(n.x)?n.x:window.pageXOffset,y:la(n.y)?n.y:window.pageYOffset}}function la(n){return"number"==typeof n}var da=/^#\d/;function ua(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var i=da.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(i){var o=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(i,o={x:la((t=o).x)?t.x:0,y:la(t.y)?t.y:0})}else sa(n)&&(e=ca(n))}else r&&sa(n)&&(e=ca(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var pa,ha=Wo&&((-1===(pa=window.navigator.userAgent).indexOf("Android 2.")&&-1===pa.indexOf("Android 4.0")||-1===pa.indexOf("Mobile Safari")||-1!==pa.indexOf("Chrome")||-1!==pa.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function fa(n,e){oa();var t=window.history;try{if(e){var r=no({},t.state);r.key=na(),t.replaceState(r,"",n)}else t.pushState({key:ea(Jo())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function ma(n){fa(n,!0)}function ga(n,e,t){var r=function(i){i>=n.length?t():n[i]?e(n[i],(function(){r(i+1)})):r(i+1)};r(0)}var va={redirected:2,aborted:4,cancelled:8,duplicated:16};function ba(n,e){return xa(n,e,va.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return _a.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function ya(n,e){return xa(n,e,va.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function xa(n,e,t,r){var i=new Error(r);return i._isRouter=!0,i.from=n,i.to=e,i.type=t,i}var _a=["params","query","hash"];function Ea(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function ka(n,e){return Ea(n)&&n._isRouter&&(null==e||n.type===e)}function wa(n){return function(e,t,r){var i=!1,o=0,a=null;Aa(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){i=!0,o++;var c,l=ja((function(e){var i;((i=e).__esModule||Ta&&"Module"===i[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Mo.extend(e),t.components[s]=e,--o<=0&&r()})),d=ja((function(n){var e="Failed to resolve async component "+s+": "+n;a||(a=Ea(n)?n:new Error(e),r(a))}));try{c=n(l,d)}catch(n){d(n)}if(c)if("function"==typeof c.then)c.then(l,d);else{var u=c.component;u&&"function"==typeof u.then&&u.then(l,d)}}})),i||r()}}function Aa(n,e){return $a(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function $a(n){return Array.prototype.concat.apply([],n)}var Ta="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function ja(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Ca=function(n,e){this.router=n,this.base=function(n){if(!n)if(Wo){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ho,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Sa(n,e,t,r){var i=Aa(n,(function(n,r,i,o){var a=function(n,e){"function"!=typeof n&&(n=Mo.extend(n));return n.options[e]}(n,e);if(a)return Array.isArray(a)?a.map((function(n){return t(n,r,i,o)})):t(a,r,i,o)}));return $a(r?i.reverse():i)}function Oa(n,e){if(e)return function(){return n.apply(e,arguments)}}Ca.prototype.listen=function(n){this.cb=n},Ca.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Ca.prototype.onError=function(n){this.errorCbs.push(n)},Ca.prototype.transitionTo=function(n,e,t){var r,i=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var o=this.current;this.confirmTransition(r,(function(){i.updateRoute(r),e&&e(r),i.ensureURL(),i.router.afterHooks.forEach((function(n){n&&n(r,o)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!i.ready&&(ka(n,va.redirected)&&o===ho||(i.ready=!0,i.readyErrorCbs.forEach((function(e){e(n)}))))}))},Ca.prototype.confirmTransition=function(n,e,t){var r=this,i=this.current;this.pending=n;var o,a,s=function(n){!ka(n)&&Ea(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=i.matched.length-1;if(go(n,i)&&c===l&&n.matched[c]===i.matched[l])return this.ensureURL(),n.hash&&ia(this.router,i,n,!1),s(((a=xa(o=i,n,va.duplicated,'Avoided redundant navigation to current location: "'+o.fullPath+'".')).name="NavigationDuplicated",a));var d=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=d.updated,p=d.deactivated,h=d.activated,f=[].concat(function(n){return Sa(n,"beforeRouteLeave",Oa,!0)}(p),this.router.beforeHooks,function(n){return Sa(n,"beforeRouteUpdate",Oa)}(u),h.map((function(n){return n.beforeEnter})),wa(h)),m=function(e,t){if(r.pending!==n)return s(ya(i,n));try{e(n,i,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return xa(n,e,va.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(i,n))):Ea(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(ba(i,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};ga(f,m,(function(){ga(function(n){return Sa(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,i,o){return n(r,i,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),o(n)}))}}(n,t,r)}))}(h).concat(r.router.resolveHooks),m,(function(){if(r.pending!==n)return s(ya(i,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){bo(n)}))}))}))},Ca.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Ca.prototype.setupListeners=function(){},Ca.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ho,this.pending=null};var Ia=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Da(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=ha&&t;r&&this.listeners.push(ra());var i=function(){var t=n.current,i=Da(n.base);n.current===ho&&i===n._startLocation||n.transitionTo(i,(function(n){r&&ia(e,n,t,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){fa(Eo(r.base+n.fullPath)),ia(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){ma(Eo(r.base+n.fullPath)),ia(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Da(this.base)!==this.current.fullPath){var e=Eo(this.base+this.current.fullPath);n?fa(e):ma(e)}},e.prototype.getCurrentLocation=function(){return Da(this.base)},e}(Ca);function Da(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(Eo(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ba=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Da(n);if(!/^\/#/.test(e))return window.location.replace(Eo(n+"/#"+e)),!0}(this.base)||za()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=ha&&e;t&&this.listeners.push(ra());var r=function(){var e=n.current;za()&&n.transitionTo(Ga(),(function(r){t&&ia(n.router,r,e,!0),ha||La(r.fullPath)}))},i=ha?"popstate":"hashchange";window.addEventListener(i,r),this.listeners.push((function(){window.removeEventListener(i,r)}))}},e.prototype.push=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){qa(n.fullPath),ia(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,i=this.current;this.transitionTo(n,(function(n){La(n.fullPath),ia(r.router,n,i,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Ga()!==e&&(n?qa(e):La(e))},e.prototype.getCurrentLocation=function(){return Ga()},e}(Ca);function za(){var n=Ga();return"/"===n.charAt(0)||(La("/"+n),!1)}function Ga(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Pa(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function qa(n){ha?fa(Pa(n)):window.location.hash=n}function La(n){ha?ma(Pa(n)):window.location.replace(Pa(n))}var Ha=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){ka(n,va.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Ca),Ra=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Zo(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!ha&&!1!==n.fallback,this.fallback&&(e="hash"),Wo||(e="abstract"),this.mode=e,e){case"history":this.history=new Ia(this,n.base);break;case"hash":this.history=new Ba(this,n.base,this.fallback);break;case"abstract":this.history=new Ha(this,n.base);break;default:0}},Ma={currentRoute:{configurable:!0}};function Ua(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Ra.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Ma.currentRoute.get=function(){return this.history&&this.history.current},Ra.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Ia||t instanceof Ba){var r=function(n){t.setupListeners(),function(n){var r=t.current,i=e.options.scrollBehavior;ha&&i&&"fullPath"in n&&ia(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Ra.prototype.beforeEach=function(n){return Ua(this.beforeHooks,n)},Ra.prototype.beforeResolve=function(n){return Ua(this.resolveHooks,n)},Ra.prototype.afterEach=function(n){return Ua(this.afterHooks,n)},Ra.prototype.onReady=function(n,e){this.history.onReady(n,e)},Ra.prototype.onError=function(n){this.history.onError(n)},Ra.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Ra.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Ra.prototype.go=function(n){this.history.go(n)},Ra.prototype.back=function(){this.go(-1)},Ra.prototype.forward=function(){this.go(1)},Ra.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Ra.prototype.resolve=function(n,e,t){var r=Ro(n,e=e||this.history.current,t,this),i=this.match(r,e),o=i.redirectedFrom||i.fullPath;return{location:r,route:i,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?Eo(n+"/"+r):r}(this.history.base,o,this.mode),normalizedTo:r,resolved:i}},Ra.prototype.getRoutes=function(){return this.matcher.getRoutes()},Ra.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Ra.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ho&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Ra.prototype,Ma),Ra.install=function n(e){if(!n.installed||Mo!==e){n.installed=!0,Mo=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",yo),e.component("RouterLink",No);var i=e.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},Ra.version="3.5.4",Ra.isNavigationFailure=ka,Ra.NavigationFailureType=va,Ra.START_LOCATION=ho,Wo&&window.Vue&&window.Vue.use(Ra);var Na=Ra;t(101);t(124);var Fa={NotFound:()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,320)),Layout:()=>Promise.all([t.e(0),t.e(2)]).then(t.bind(null,319))},Wa={"v-5e909b5b":()=>t.e(6).then(t.bind(null,322)),"v-7c2c6350":()=>t.e(8).then(t.bind(null,323)),"v-48f5430b":()=>t.e(5).then(t.bind(null,324)),"v-872760aa":()=>t.e(9).then(t.bind(null,325)),"v-2a6badba":()=>t.e(7).then(t.bind(null,326)),"v-359bbf28":()=>t.e(10).then(t.bind(null,327)),"v-5767fbc2":()=>t.e(11).then(t.bind(null,328)),"v-08ad58a0":()=>t.e(12).then(t.bind(null,329)),"v-3e46ea57":()=>t.e(13).then(t.bind(null,330)),"v-2cabb872":()=>t.e(14).then(t.bind(null,331)),"v-49a516bf":()=>t.e(15).then(t.bind(null,332)),"v-075dd83a":()=>t.e(16).then(t.bind(null,333)),"v-536eeaee":()=>t.e(20).then(t.bind(null,334)),"v-315eaca2":()=>t.e(19).then(t.bind(null,335)),"v-136aae16":()=>t.e(18).then(t.bind(null,336)),"v-19490270":()=>t.e(17).then(t.bind(null,337)),"v-023acc9c":()=>t.e(21).then(t.bind(null,338)),"v-520a127a":()=>t.e(22).then(t.bind(null,339)),"v-ceb2af28":()=>t.e(23).then(t.bind(null,340)),"v-83c0cd92":()=>t.e(24).then(t.bind(null,341)),"v-6e212844":()=>t.e(25).then(t.bind(null,321)),"v-0e159cdf":()=>t.e(26).then(t.bind(null,342)),"v-35f74d3a":()=>t.e(27).then(t.bind(null,343)),"v-34bf908c":()=>t.e(29).then(t.bind(null,344)),"v-0f39661a":()=>t.e(28).then(t.bind(null,345)),"v-57880ef5":()=>t.e(30).then(t.bind(null,346)),"v-8e768e3a":()=>t.e(31).then(t.bind(null,347)),"v-b25db088":()=>t.e(32).then(t.bind(null,348)),"v-46ca88df":()=>t.e(34).then(t.bind(null,349)),"v-058d456c":()=>t.e(33).then(t.bind(null,350)),"v-4d45b047":()=>t.e(35).then(t.bind(null,351)),"v-50f5aca8":()=>t.e(37).then(t.bind(null,352)),"v-36670896":()=>t.e(36).then(t.bind(null,353)),"v-6272af7a":()=>t.e(38).then(t.bind(null,354)),"v-36651a58":()=>t.e(39).then(t.bind(null,355)),"v-5512fcca":()=>t.e(40).then(t.bind(null,356)),"v-1b991e46":()=>t.e(41).then(t.bind(null,357)),"v-9120984c":()=>t.e(42).then(t.bind(null,358)),"v-7150bdca":()=>t.e(43).then(t.bind(null,359)),"v-3d3ada26":()=>t.e(44).then(t.bind(null,360))};function Va(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Ya=/-(\w)/g,Za=Va(n=>n.replace(Ya,(n,e)=>e?e.toUpperCase():"")),Xa=/\B([A-Z])/g,Ka=Va(n=>n.replace(Xa,"-$1").toLowerCase()),Ja=Va(n=>n.charAt(0).toUpperCase()+n.slice(1));function Qa(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Ja(Za(e))):n(Ja(e))||n(Ka(e))}const ns=Object.assign({},Fa,Wa),es=n=>ns[n],ts=n=>Wa[n],rs=n=>Fa[n],is=n=>Ft.component(n);function os(n){return Qa(ts,n)}function as(n){return Qa(rs,n)}function ss(n){return Qa(es,n)}function cs(n){return Qa(is,n)}function ls(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&ss(n)){const e=await ss(n)();Ft.component(n,e.default)}}))}function ds(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var us=t(90),ps=t.n(us),hs=t(91),fs=t.n(hs),ms={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${fs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=bs(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return ps()([{name:"description",content:this.$description}],n,this.siteMeta,ys)},updateCanonicalLink(){gs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){bs(null,this.currentMetaTags),gs()}};function gs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function vs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function bs(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ys(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var xs=t(49),_s={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xs)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+t;for(let n=0;n<e.length;n++){const o=e[n],a=e[n+1],s=0===n&&0===t||t>=o.parentElement.offsetTop+10&&(!a||t<a.parentElement.offsetTop-10),c=decodeURIComponent(this.$route.hash);if(s&&c!==decodeURIComponent(o.hash)){const t=o;if(i===r)for(let t=n+1;t<e.length;t++)if(c===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},Es=t(23),ks=t.n(Es),ws={mounted(){ks.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Ft.component(n.name)||ks.a.start(),t()}),this.$router.afterEach(()=>{ks.a.done(),this.isSidebarOpen=!1})}};t(231),t(232);class As{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var $s={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new As).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&r.firstChild?r.insertBefore(i,r.firstChild):r.appendChild(i),i.styleSheet?i.styleSheet.cssText=n:i.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Ts={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},js={},Cs=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Ss=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Ts[n]},Os=function n(e,t,r){var i=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))i[n]=t[n];else{var e=n.replace("data","");i.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,o=e.children;i.appendChild(n(t,r,o))})),i},Is=function(n,e,t){var r,i=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==i.length||t?i:i[0]},Ds=function(n,e){var t,r,i=n.match(/<style>([\s\S]+)<\/style>/),o=n.match(/<template>([\s\S]+)<\/template>/),a=n.match(/<script>([\s\S]+)<\/script>/),s={css:i&&i[1].replace(/^\n|\n$/g,""),html:o&&o[1].replace(/^\n|\n$/g,""),js:a&&a[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Cs(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),i=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,o=[eval][0](i);return o.template=e,o}(s.js,s.html);var c=Ss("vue");return s.jsLib.unshift(c),s},Bs=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<html>([\s\S]+)<\/html>/),o=n.match(/<script>([\s\S]+)<\/script>/),a={css:r&&r[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return a.htmlTpl=a.html,a.jsTpl=a.js,a.script=(t=a.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),a},zs=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Gs(){var n=Is(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Is(n,"vuepress-plugin-demo-block__code"),t=Is(n,"vuepress-plugin-demo-block__display"),r=Is(n,"vuepress-plugin-demo-block__footer"),i=Is(t,"vuepress-plugin-demo-block__app"),o=decodeURIComponent(n.dataset.code),a=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);a=a?JSON.parse(a):{};var c=e.querySelector("div").clientHeight,l="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),i=new Function("return ".concat(r))(),o={js:i,css:i.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:zs(n),htmlTpl:Cs("")},a=Ss("react"),s=Ss("reactDOM");return o.jsLib.unshift(a,s),o}(o,a):"vanilla"===s?Bs(o,a):Ds(o,a),d=Os("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(d),d.addEventListener("click",Ps.bind(null,d,c,e,r)),Ss("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,i=n.jsLib,o=n.cssLib,a=i.concat(o).concat(Ss("cssLib")).concat(Ss("jsLib")).join(",");return Os("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:a}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(l)),Ss("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,i=n.jsLib,o=n.cssLib,a=JSON.stringify({css:e,html:t,js:r,js_external:i.concat(Ss("jsLib")).join(";"),css_external:o.concat(Ss("cssLib")).join(";"),layout:Ss("codepenLayout"),js_pre_processor:Ss("codepenJsProcessor"),editors:Ss("codepenEditors")});return Os("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:a}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(l)),void 0!==a.horizontal?a.horizontal:Ss("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var u=e.firstChild.cloneNode(!0);u.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(u)}if(l.css&&function(n){if(!js[n]){var e=Os("style",{innerHTML:n});document.body.appendChild(e),js[n]=!0}}(l.css),"react"===s)ReactDOM.render(React.createElement(l.js),i);else if("vue"===s){var p=(new(Vue.extend(l.script))).$mount();i.appendChild(p.$el)}else"vanilla"===s&&(i.innerHTML=l.html,new Function("return (function(){".concat(l.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Gs()}),300)}function Ps(n,e,t,r){var i="1"!==n.dataset.isExpand;t.style.height=i?"".concat(e,"px"):0,i?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=i?"1":"0"}var qs={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Gs()},updated:function(){Gs()}},Ls="auto",Hs="zoom-in",Rs="zoom-out",Ms="grab",Us="move";function Ns(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i={passive:!1};r?n.addEventListener(e,t,i):n.removeEventListener(e,t,i)}function Fs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Ws(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Vs(n,e,t){!function(n){var e=Ys,t=Zs;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var i=n.transform;delete n.transform,n[t]=i}}(e);var r=n.style,i={};for(var o in e)t&&(i[o]=r[o]||""),r[o]=e[o];return i}var Ys="transition",Zs="transform",Xs="transform",Ks="transitionend";var Js=function(){},Qs={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Js,onClose:Js,onGrab:Js,onMove:Js,onRelease:Js,onBeforeOpen:Js,onBeforeClose:Js,onBeforeGrab:Js,onBeforeRelease:Js,onImageLoading:Js,onImageLoaded:Js},nc={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),tc(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,i=this.lastScrollPosition.y-t,o=this.options.scrollThreshold;(Math.abs(i)>=o||Math.abs(r)>=o)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(ec(n)&&!tc(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){ec(n)&&!tc(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function ec(n){return 0===n.button}function tc(n){return n.metaKey||n.ctrlKey}var rc={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Vs(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Ns(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Vs(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},ic="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},oc=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),ac=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},sc={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ws(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,i=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Ms:Rs,transition:Xs+"\n        "+r+"s\n        "+i,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Vs(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Vs(this.el,{transform:"none"})},grab:function(n,e,t){var r=cc(),i=r.x-n,o=r.y-e;Vs(this.el,{cursor:Us,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=cc(),i=r.x-n,o=r.y-e;Vs(this.el,{transition:Xs,transform:"translate3d(\n        "+(this.translate.x+i)+"px, "+(this.translate.y+o)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Vs(this.el,this.styleClose)},restoreOpenStyle:function(){Vs(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=cc(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,i=r.customSize,o=r.scaleBase;if(!i&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(i&&"object"===(void 0===i?"undefined":ic(i)))return{x:i.width/this.rect.width,y:i.height/this.rect.height};var a=this.rect.width/2,s=this.rect.height/2,c=cc(),l={x:c.x-a,y:c.y-s},d=l.x/a,u=l.y/s,p=o+Math.min(d,u);if(i&&"string"==typeof i){var h=t||this.el.naturalWidth,f=e||this.el.naturalHeight,m=parseFloat(i)*h/(100*this.rect.width),g=parseFloat(i)*f/(100*this.rect.height);if(p>m||p>g)return{x:m,y:g}}return{x:p,y:p}}};function cc(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function lc(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Ns(n,r,e[r],t)}))}var dc=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(sc),this.overlay=Object.create(rc),this.handler=Object.create(nc),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ac({},Qs,e),this.overlay.init(this),this.handler.init(this)}return oc(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Hs,Ns(n,"click",this.handler.click),this.options.preloadImage&&Fs(Ws(n)));return this}},{key:"config",value:function(n){return n?(ac(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var i=this.target.srcOriginal;null!=i&&(this.options.onImageLoading(r),Fs(i,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Ns(document,"scroll",this.handler.scroll),Ns(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Ns(window,"resize",this.handler.resizeWindow);var o=function n(){Ns(r,Ks,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&lc(document,e.handler,!0),t(r)};return Ns(r,Ks,o),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ls,this.overlay.fadeOut(),this.target.zoomOut(),Ns(document,"scroll",this.handler.scroll,!1),Ns(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Ns(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Ns(t,Ks,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&lc(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Ns(t,Ks,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var i=this.target.el;this.options.onBeforeGrab(i),this.released=!1,this.target.grab(n,e,t);var o=function n(){Ns(i,Ks,n,!1),r(i)};return Ns(i,Ks,o),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Us,this.target.move(n,e,t);var i=this.target.el,o=function n(){Ns(i,Ks,n,!1),r(i)};return Ns(i,Ks,o),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ls,this.target.restoreOpenStyle();var r=function r(){Ns(t,Ks,r,!1),n.lock=!1,n.released=!0,e(t)};return Ns(t,Ks,r),this}}}]),n}();const uc=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),pc=Number("500");class hc{constructor(){this.instance=new dc(uc)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=pc){setTimeout(()=>this.update(n),e)}}var fc=[ms,_s,ws,$s,qs,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new hc,this.$vuepress.zooming.updateDelay()}}],mc={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ds("layout",n),Ft.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},gc=t(6),vc=Object(gc.a)(mc,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(vc,"mixins",fc);const bc=[{name:"v-5e909b5b",path:"/pages/3ac5a6/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5e909b5b").then(t)}},{path:"/pages/3ac5a6/index.html",redirect:"/pages/3ac5a6/"},{path:"/03.记录/01.git/01.git相关.html",redirect:"/pages/3ac5a6/"},{name:"v-7c2c6350",path:"/pages/1ba760/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-7c2c6350").then(t)}},{path:"/pages/1ba760/index.html",redirect:"/pages/1ba760/"},{path:"/03.记录/02.Mysql/02.mysql语法相关.html",redirect:"/pages/1ba760/"},{name:"v-48f5430b",path:"/technology/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-48f5430b").then(t)}},{path:"/technology/index.html",redirect:"/technology/"},{path:"/00.目录页/03.记录.html",redirect:"/technology/"},{name:"v-872760aa",path:"/pages/f95cf0/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-872760aa").then(t)}},{path:"/pages/f95cf0/index.html",redirect:"/pages/f95cf0/"},{path:"/03.记录/03.Python/01.Django/02.django-首次启动.html",redirect:"/pages/f95cf0/"},{name:"v-2a6badba",path:"/pages/42ea29/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-2a6badba").then(t)}},{path:"/pages/42ea29/index.html",redirect:"/pages/42ea29/"},{path:"/03.记录/02.Mysql/01.mysql的安装.html",redirect:"/pages/42ea29/"},{name:"v-359bbf28",path:"/pages/a13db2/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-359bbf28").then(t)}},{path:"/pages/a13db2/index.html",redirect:"/pages/a13db2/"},{path:"/03.记录/03.Python/02.Unittest/01.unittest基础.html",redirect:"/pages/a13db2/"},{name:"v-5767fbc2",path:"/pages/8d13e3/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5767fbc2").then(t)}},{path:"/pages/8d13e3/index.html",redirect:"/pages/8d13e3/"},{path:"/03.记录/03.Python/02.Unittest/02.python+unittest+request等模块搭建接口自动化框架.html",redirect:"/pages/8d13e3/"},{name:"v-08ad58a0",path:"/pages/44c83f/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-08ad58a0").then(t)}},{path:"/pages/44c83f/index.html",redirect:"/pages/44c83f/"},{path:"/03.记录/03.Python/04.一些模块方法/01.openpyxl-操作excel读取数据.html",redirect:"/pages/44c83f/"},{name:"v-3e46ea57",path:"/pages/51754f/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-3e46ea57").then(t)}},{path:"/pages/51754f/index.html",redirect:"/pages/51754f/"},{path:"/03.记录/03.Python/04.一些模块方法/02.requests和一些其他模块.html",redirect:"/pages/51754f/"},{name:"v-2cabb872",path:"/pages/73d2aa/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-2cabb872").then(t)}},{path:"/pages/73d2aa/index.html",redirect:"/pages/73d2aa/"},{path:"/03.记录/03.Python/04.一些模块方法/03.re-正则提取.html",redirect:"/pages/73d2aa/"},{name:"v-49a516bf",path:"/pages/2f1c24/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-49a516bf").then(t)}},{path:"/pages/2f1c24/index.html",redirect:"/pages/2f1c24/"},{path:"/03.记录/03.Python/04.一些模块方法/04.configparser&json读取配置文件&json文件.html",redirect:"/pages/2f1c24/"},{name:"v-075dd83a",path:"/pages/a7e63e/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-075dd83a").then(t)}},{path:"/pages/a7e63e/index.html",redirect:"/pages/a7e63e/"},{path:"/03.记录/04.测试/01.接口测试/01.接口测试.html",redirect:"/pages/a7e63e/"},{name:"v-536eeaee",path:"/pages/65bf04/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-536eeaee").then(t)}},{path:"/pages/65bf04/index.html",redirect:"/pages/65bf04/"},{path:"/03.记录/05.测试学习笔记/03.threeday-测试需求分析.html",redirect:"/pages/65bf04/"},{name:"v-315eaca2",path:"/pages/08c68a/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-315eaca2").then(t)}},{path:"/pages/08c68a/index.html",redirect:"/pages/08c68a/"},{path:"/03.记录/05.测试学习笔记/02.twoday-软件的生命周期&测试流程.html",redirect:"/pages/08c68a/"},{name:"v-136aae16",path:"/pages/040e07/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-136aae16").then(t)}},{path:"/pages/040e07/index.html",redirect:"/pages/040e07/"},{path:"/03.记录/05.测试学习笔记/01.oneday-测试基础-软件测试的定义及分类.html",redirect:"/pages/040e07/"},{name:"v-19490270",path:"/pages/7ab77c/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-19490270").then(t)}},{path:"/pages/7ab77c/index.html",redirect:"/pages/7ab77c/"},{path:"/03.记录/04.测试/01.接口测试/02.jmeter.html",redirect:"/pages/7ab77c/"},{name:"v-023acc9c",path:"/pages/1b8a63/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-023acc9c").then(t)}},{path:"/pages/1b8a63/index.html",redirect:"/pages/1b8a63/"},{path:"/03.记录/05.测试学习笔记/04.fourday-测试用例四大金刚.html",redirect:"/pages/1b8a63/"},{name:"v-520a127a",path:"/pages/f8d3dd/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-520a127a").then(t)}},{path:"/pages/f8d3dd/index.html",redirect:"/pages/f8d3dd/"},{path:"/03.记录/05.测试学习笔记/05.fiveday-测试用例的编写&用例评审.html",redirect:"/pages/f8d3dd/"},{name:"v-ceb2af28",path:"/pages/995ea1/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-ceb2af28").then(t)}},{path:"/pages/995ea1/index.html",redirect:"/pages/995ea1/"},{path:"/03.记录/05.测试学习笔记/06.sixday_bug生命周期.html",redirect:"/pages/995ea1/"},{name:"v-83c0cd92",path:"/pages/99ef91/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-83c0cd92").then(t)}},{path:"/pages/99ef91/index.html",redirect:"/pages/99ef91/"},{path:"/03.记录/06.问题合集/01.问题合集(更新).html",redirect:"/pages/99ef91/"},{name:"v-6e212844",path:"/about/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6e212844").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/05.关于/01.关于.html",redirect:"/about/"},{name:"v-0e159cdf",path:"/pages/beb6c0bd8a66cea6/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-0e159cdf").then(t)}},{path:"/pages/beb6c0bd8a66cea6/index.html",redirect:"/pages/beb6c0bd8a66cea6/"},{path:"/06.收藏/01.网站.html",redirect:"/pages/beb6c0bd8a66cea6/"},{name:"v-35f74d3a",path:"/archives/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-35f74d3a").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-34bf908c",path:"/tags/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-34bf908c").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-0f39661a",path:"/categories/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-0f39661a").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-57880ef5",path:"/pages/8292d8/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-57880ef5").then(t)}},{path:"/pages/8292d8/index.html",redirect:"/pages/8292d8/"},{path:"/Git学习笔记/10.手册/00.常用Git命令清单.html",redirect:"/pages/8292d8/"},{name:"v-8e768e3a",path:"/pages/c10281/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-8e768e3a").then(t)}},{path:"/pages/c10281/index.html",redirect:"/pages/c10281/"},{path:"/Git学习笔记/10.手册/03.Git变基合并.html",redirect:"/pages/c10281/"},{name:"v-b25db088",path:"/pages/4cbc21/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-b25db088").then(t)}},{path:"/pages/4cbc21/index.html",redirect:"/pages/4cbc21/"},{path:"/Git学习笔记/10.手册/06.Git命令思维导图.html",redirect:"/pages/4cbc21/"},{name:"v-46ca88df",path:"/pages/1832fe/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-46ca88df").then(t)}},{path:"/pages/1832fe/index.html",redirect:"/pages/1832fe/"},{path:"/Git学习笔记/20.文档笔记/100.Git工具-重写历史.html",redirect:"/pages/1832fe/"},{name:"v-058d456c",path:"/pages/635088/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-058d456c").then(t)}},{path:"/pages/635088/index.html",redirect:"/pages/635088/"},{path:"/Git学习笔记/20.文档笔记/10.Git基础与命令.html",redirect:"/pages/635088/"},{name:"v-4d45b047",path:"/pages/d9e9c6/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-4d45b047").then(t)}},{path:"/pages/d9e9c6/index.html",redirect:"/pages/d9e9c6/"},{path:"/Git学习笔记/20.文档笔记/110.Git工具-重置揭密.html",redirect:"/pages/d9e9c6/"},{name:"v-50f5aca8",path:"/pages/ea5a8c/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-50f5aca8").then(t)}},{path:"/pages/ea5a8c/index.html",redirect:"/pages/ea5a8c/"},{path:"/Git学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.html",redirect:"/pages/ea5a8c/"},{name:"v-36670896",path:"/pages/4bef1a/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-36670896").then(t)}},{path:"/pages/4bef1a/index.html",redirect:"/pages/4bef1a/"},{path:"/Git学习笔记/20.文档笔记/20.Git分支-分支原理.html",redirect:"/pages/4bef1a/"},{name:"v-6272af7a",path:"/pages/a399b3/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-6272af7a").then(t)}},{path:"/pages/a399b3/index.html",redirect:"/pages/a399b3/"},{path:"/Git学习笔记/20.文档笔记/40.Git分支管理-查看分支.html",redirect:"/pages/a399b3/"},{name:"v-36651a58",path:"/pages/49ee30/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-36651a58").then(t)}},{path:"/pages/49ee30/index.html",redirect:"/pages/49ee30/"},{path:"/Git学习笔记/20.文档笔记/50.Git分支开发工作流.html",redirect:"/pages/49ee30/"},{name:"v-5512fcca",path:"/pages/574d62/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-5512fcca").then(t)}},{path:"/pages/574d62/index.html",redirect:"/pages/574d62/"},{path:"/Git学习笔记/20.文档笔记/60.Git分支-远程分支.html",redirect:"/pages/574d62/"},{name:"v-1b991e46",path:"/pages/3a3247/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-1b991e46").then(t)}},{path:"/pages/3a3247/index.html",redirect:"/pages/3a3247/"},{path:"/Git学习笔记/20.文档笔记/70.Git分支-变基.html",redirect:"/pages/3a3247/"},{name:"v-9120984c",path:"/pages/c984d1/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-9120984c").then(t)}},{path:"/pages/c984d1/index.html",redirect:"/pages/c984d1/"},{path:"/Git学习笔记/20.文档笔记/80.Git工具-查看修订版本.html",redirect:"/pages/c984d1/"},{name:"v-7150bdca",path:"/pages/76d859/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-7150bdca").then(t)}},{path:"/pages/76d859/index.html",redirect:"/pages/76d859/"},{path:"/Git学习笔记/20.文档笔记/90.Git工具-交互式暂存.html",redirect:"/pages/76d859/"},{name:"v-3d3ada26",path:"/",component:vc,beforeEnter:(n,e,t)=>{ls("Layout","v-3d3ada26").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:vc}],yc={title:"",description:"",base:"/Yuqing_blog/",headTags:[["link",{rel:"icon",href:"/Yuqing_blog/img/logo.png"}],["meta",{name:"keywords",content:"前端博客,个人技术博客,前端,前端开发,前端框架,web前端,前端面试题,技术文档,学习,面试,JavaScript,js,ES6,TypeScript,vue,python,css3,html5,Node,git,github,markdown"}],["meta",{name:"baidu-site-verification",content:"7F55weZDDc"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"git相关",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"Git学习笔记",imgUrl:"https://avatars3.githubusercontent.com/u/18133?s=200&v=4",description:"<a href='https://git-scm.com/book/zh/v2' target='_blank'>Git官网文档</a>的学习笔记，以官方文档为准。",titleTag:"转载"}},title:"git相关",date:"2022-04-06T11:07:57.000Z",permalink:"/pages/3ac5a6/",article:!1,comment:!1,editLink:!1,categories:["记录","git学习笔记"],tags:[null],titleTag:"转载"},regularPath:"/03.%E8%AE%B0%E5%BD%95/01.git/01.git%E7%9B%B8%E5%85%B3.html",relativePath:"03.记录/01.git/01.git相关.md",key:"v-5e909b5b",path:"/pages/3ac5a6/",lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"mysql语法相关",frontmatter:{title:"mysql语法相关",date:"2022-02-10T17:10:54.000Z",permalink:"/pages/1ba760/",categories:["记录","Mysql"],tags:["mysql"],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/02.Mysql/02.mysql%E8%AF%AD%E6%B3%95%E7%9B%B8%E5%85%B3.html",relativePath:"03.记录/02.Mysql/02.mysql语法相关.md",key:"v-7c2c6350",path:"/pages/1ba760/",headers:[{level:2,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:2},{level:2,title:"数据类型",slug:"数据类型",normalizedTitle:"数据类型",charIndex:72},{level:2,title:"相关语法",slug:"相关语法",normalizedTitle:"相关语法",charIndex:484},{level:3,title:"查看数据库",slug:"查看数据库",normalizedTitle:"查看数据库",charIndex:493},{level:3,title:"创建数据库",slug:"创建数据库",normalizedTitle:"创建数据库",charIndex:525},{level:3,title:"创建表",slug:"创建表",normalizedTitle:"创建表",charIndex:566},{level:3,title:"多表查询",slug:"多表查询",normalizedTitle:"多表查询",charIndex:801},{level:3,title:"ORDER BY",slug:"order-by",normalizedTitle:"order by",charIndex:1121},{level:3,title:"IN",slug:"in",normalizedTitle:"in",charIndex:661},{level:3,title:"LIKE",slug:"like",normalizedTitle:"like",charIndex:1325},{level:3,title:"GROUP BY",slug:"group-by",normalizedTitle:"group by",charIndex:1530},{level:3,title:"BETWEEN",slug:"between",normalizedTitle:"between",charIndex:1754},{level:3,title:"DISTINCT",slug:"distinct",normalizedTitle:"distinct",charIndex:2005},{level:3,title:"LIMIT",slug:"limit",normalizedTitle:"limit",charIndex:2112}],excerpt:'<h2 id="概念"><a class="header-anchor" href="#概念">#</a> 概念</h2>\n<p>SQL:结构化查询语言，Structured Query Language</p>\n<p>SQL是用于访问和处理数据库的标准计算机语言</p>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"概念 数据类型 相关语法 查看数据库 创建数据库 创建表 多表查询 ORDER BY IN LIKE GROUP BY BETWEEN DISTINCT LIMIT",content:"# 概念\n\nSQL:结构化查询语言，Structured Query Language\n\nSQL是用于访问和处理数据库的标准计算机语言\n\n\n# 数据类型\n\n 1. 整形:\n    \n    * tinyint:占1字节，取值范围-128～127\n    * int:占4字节\n\n 2. 字符串型:\n    \n    * char(n):最多255个字符，固定长度\n    * varchar(n):最多65535个字符，可变长度\n\n 3. 时间和日期:\n    \n    * date:日期，格式(yyyy-mm-dd)\n    * tune:时间，格式(hh:mm:ss)\n    * datetime:日期时间，格式(yyyy-mm-dd hh-mm-ss)\n\n 4. 浮点型:\n    \n    * float(m,d):单精度浮点型，m总位数，d小位数\n    * 栗子：99.99--\x3efloat(4,2) 共4位数，2位小数\n    * double(m,d):双精度浮点型，m总位数，d小位数\n    * decimal(m,d):精准数据类型\n\n\n# 相关语法\n\n\n# 查看数据库\n\nshow databases;\n\n\n1\n\n\n\n# 创建数据库\n\ncreate database text_01;\n\n\n1\n\n\n\n# 创建表\n\n-- 语法\ncreate table 表名(字段名 类型,字段名 类型)default charset=utf8;\n-- 栗子\nCREATE TABLE text_01(\n\tid INT PRIMARY KEY,\n\tusername VARCHAR(10),\n\ttelephone_number CHAR(11),\n\taddress VARCHAR(120)\n)DEFAULT charset = utf8;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 多表查询\n\n-- 语法\nselect 要查询的字段 from 表1，表2... where 关联条件和过滤条件;\n-- 注意：多表关联，字段要加上表前缀来区分是哪张表的字段\n-- 栗子,需求：查询id为1001的用户的用户名,手机号码(text_01),以及该用户喜欢的运动(text_02)\nSELECT\n\ttext_01.username,\n\ttext_01.telephonenumber \nFROM\n\ttext_01,\n\ttext_02 \nWHERE\n\ttext_01.id = text_02.memberid\nAND text_01.id = 1001\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# ORDER BY\n\n-- 语法\nselect * from text_01 order by 需要排序的字段名 asc\n-- 默认升序排列(asc)\n\n\n1\n2\n3\n\n\n\n# IN\n\n-- 在\n select ... from text_01 where ... in ()\n-- 不在\n select ... from text_01 where ... not in ()\n\n\n1\n2\n3\n4\n\n\n\n# LIKE\n\n-- 小开头任意结尾\nselect * from text_01 where usernanme like '小%';\n-- 任意开头小结尾\nselect * from text_01 where usernanme like '%小';\n-- 只要包含小的\nselect * from text_01 where usernanme like '%小%';\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# GROUP BY\n\n-- 语法\nselect 查询字段,聚合函数 from 查询设计到的表 group by 分组字段 having 过滤条件;\n-- 聚合函数\nsum() max() 等\n-- 栗子\n-- 统计text_01中每个人的平均分数\nSELECT\n\t*,\n\tavg( fraction ) \nFROM\n\ttext_01 \nGROUP BY\n\tusername;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# BETWEEN\n\n-- 语法\nselect ... from 表名 where 条件字段 between 数值A and 数值B;\n-- 包括边界值\n-- 栗子\nSELECT\n\t* \nFROM\n\ttext_01 \nWHERE\n\tid BETWEEN 3 \n\tAND 10;\n-- 等同于\nSELECT\n\t* \nFROM\n\ttext_01 \nWHERE\n\tid >= 3 amd id <= 10;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# DISTINCT\n\n-- 语法\nselect distinct 字段名 from 表名;\n-- 去重\n-- 栗子\nselect distinct id from text_01;\n\n\n1\n2\n3\n4\n5\n\n\n\n# LIMIT\n\n-- 语法\nselect ... from 表名 limit m,n\n-- m指索引开始,n表示每页取多少条\n-- 栗子\n-- 每页取十条展示\n-- 索引0开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 0,10;\n-- 索引10开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 10,10;\n-- 索引20开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 20,10;\n-- text_01按分数排序然后取前5条\nSELECT\n\t* \nFROM\n\ttext_01 \nORDER BY\n\tfraction ASC \n\tLIMIT 0,5;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",normalizedContent:"# 概念\n\nsql:结构化查询语言，structured query language\n\nsql是用于访问和处理数据库的标准计算机语言\n\n\n# 数据类型\n\n 1. 整形:\n    \n    * tinyint:占1字节，取值范围-128～127\n    * int:占4字节\n\n 2. 字符串型:\n    \n    * char(n):最多255个字符，固定长度\n    * varchar(n):最多65535个字符，可变长度\n\n 3. 时间和日期:\n    \n    * date:日期，格式(yyyy-mm-dd)\n    * tune:时间，格式(hh:mm:ss)\n    * datetime:日期时间，格式(yyyy-mm-dd hh-mm-ss)\n\n 4. 浮点型:\n    \n    * float(m,d):单精度浮点型，m总位数，d小位数\n    * 栗子：99.99--\x3efloat(4,2) 共4位数，2位小数\n    * double(m,d):双精度浮点型，m总位数，d小位数\n    * decimal(m,d):精准数据类型\n\n\n# 相关语法\n\n\n# 查看数据库\n\nshow databases;\n\n\n1\n\n\n\n# 创建数据库\n\ncreate database text_01;\n\n\n1\n\n\n\n# 创建表\n\n-- 语法\ncreate table 表名(字段名 类型,字段名 类型)default charset=utf8;\n-- 栗子\ncreate table text_01(\n\tid int primary key,\n\tusername varchar(10),\n\ttelephone_number char(11),\n\taddress varchar(120)\n)default charset = utf8;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 多表查询\n\n-- 语法\nselect 要查询的字段 from 表1，表2... where 关联条件和过滤条件;\n-- 注意：多表关联，字段要加上表前缀来区分是哪张表的字段\n-- 栗子,需求：查询id为1001的用户的用户名,手机号码(text_01),以及该用户喜欢的运动(text_02)\nselect\n\ttext_01.username,\n\ttext_01.telephonenumber \nfrom\n\ttext_01,\n\ttext_02 \nwhere\n\ttext_01.id = text_02.memberid\nand text_01.id = 1001\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# order by\n\n-- 语法\nselect * from text_01 order by 需要排序的字段名 asc\n-- 默认升序排列(asc)\n\n\n1\n2\n3\n\n\n\n# in\n\n-- 在\n select ... from text_01 where ... in ()\n-- 不在\n select ... from text_01 where ... not in ()\n\n\n1\n2\n3\n4\n\n\n\n# like\n\n-- 小开头任意结尾\nselect * from text_01 where usernanme like '小%';\n-- 任意开头小结尾\nselect * from text_01 where usernanme like '%小';\n-- 只要包含小的\nselect * from text_01 where usernanme like '%小%';\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# group by\n\n-- 语法\nselect 查询字段,聚合函数 from 查询设计到的表 group by 分组字段 having 过滤条件;\n-- 聚合函数\nsum() max() 等\n-- 栗子\n-- 统计text_01中每个人的平均分数\nselect\n\t*,\n\tavg( fraction ) \nfrom\n\ttext_01 \ngroup by\n\tusername;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# between\n\n-- 语法\nselect ... from 表名 where 条件字段 between 数值a and 数值b;\n-- 包括边界值\n-- 栗子\nselect\n\t* \nfrom\n\ttext_01 \nwhere\n\tid between 3 \n\tand 10;\n-- 等同于\nselect\n\t* \nfrom\n\ttext_01 \nwhere\n\tid >= 3 amd id <= 10;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# distinct\n\n-- 语法\nselect distinct 字段名 from 表名;\n-- 去重\n-- 栗子\nselect distinct id from text_01;\n\n\n1\n2\n3\n4\n5\n\n\n\n# limit\n\n-- 语法\nselect ... from 表名 limit m,n\n-- m指索引开始,n表示每页取多少条\n-- 栗子\n-- 每页取十条展示\n-- 索引0开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 0,10;\n-- 索引10开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 10,10;\n-- 索引20开始取10条，展示信息为tex_01全字段信息\nselect * from text_01 limit 20,10;\n-- text_01按分数排序然后取前5条\nselect\n\t* \nfrom\n\ttext_01 \norder by\n\tfraction asc \n\tlimit 0,5;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n",charsets:{cjk:!0}},{title:"记录",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"03.记录",imgUrl:"/img/other.png",description:"问题记录，学习记录"}},title:"记录",date:"2022-04-11T21:50:55.000Z",permalink:"/technology",sidebar:!1,article:!1,comment:!1,editLink:!1},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.%E8%AE%B0%E5%BD%95.html",relativePath:"00.目录页/03.记录.md",key:"v-48f5430b",path:"/technology/",lastUpdated:"2022/4/27 00:41:01",lastUpdatedTimestamp:1650991261e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"django-首次启动",frontmatter:{title:"django-首次启动",date:"2022-01-22T11:10:13.000Z",permalink:"/pages/f95cf0/",categories:["记录","Python","Django"],tags:["python"],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/01.Django/02.django-%E9%A6%96%E6%AC%A1%E5%90%AF%E5%8A%A8.html",relativePath:"03.记录/03.Python/01.Django/02.django-首次启动.md",key:"v-872760aa",path:"/pages/f95cf0/",headers:[{level:3,title:"准备",slug:"准备",normalizedTitle:"准备",charIndex:2},{level:3,title:"开始",slug:"开始",normalizedTitle:"开始",charIndex:18}],excerpt:'<h3 id="准备"><a class="header-anchor" href="#准备">#</a> 准备</h3>\n<p>python3</p>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"准备 开始",content:"# 准备\n\npython3\n\n\n# 开始\n\n 1. 创建python虚拟环境\n\n# 命令行输入\npython3 -m venv env_ll\n# 此时虚拟环境已创建好，在当前目录下有名为env_ll的文件夹\n\n\n1\n2\n3\n\n 2. 激活虚拟环境\n\n# 激活虚拟环境，从当前目录开始，windows\nenv_ll/Scripts/activate\n# 激活虚拟环境，从当前目录开始，mac\nsource env_ll/bin/activate\n\n\n1\n2\n3\n4\n\n 3. 安装django\n\npip install django\n# 仅在虚拟环境下使用\n\n\n1\n2\n\n 4. 在django中创建项目\n\ndjango-admin startproject text_01 .\n# 此时django项目已创建完成\n# 当前目录下有\n# env_ll文件夹：创建的虚拟环境\n# text_01文件夹：创建的django项目\n# manage.py 文件：简单的程序，接受命令并将其交给django的相关部分运行，使用这些命令来管理使用数据库和运行服务器等\n\n\n1\n2\n3\n4\n5\n6\n\n 5. 创建数据库\n\npython manage.py migrate\n# 此时当前目录下多了db.sqlite3文件\n\n\n1\n2\n\n 6. 查看项目\n\npython manage.py runserver\n# 此时，在浏览器中输入http://localhost:8000/或http://127.0.0.1:8000/，将看到一个小火箭发射的页面\n# 如果你看到了这个页面，证明到目前为止一些正常\n\n\n1\n2\n3\n\n\n\n\n 7. 创建应用程序\n\npython manage.py startapp text_01_app\n# 此时，目录结构如下，在jango项目下settings.py注册app(详见下图)\n\n\n1\n2\n\n\n\n\n# 迁移数据\npython manage.py makemigrations text_01_app\npython manage.py migrate\n\n\n1\n2\n3\n\n 8. 注册超级用户\n\npython manage.py createsuperuser admin_01\n# 回车输入用户名，邮箱(可不写)，密码\n\n\n1\n2\n",normalizedContent:"# 准备\n\npython3\n\n\n# 开始\n\n 1. 创建python虚拟环境\n\n# 命令行输入\npython3 -m venv env_ll\n# 此时虚拟环境已创建好，在当前目录下有名为env_ll的文件夹\n\n\n1\n2\n3\n\n 2. 激活虚拟环境\n\n# 激活虚拟环境，从当前目录开始，windows\nenv_ll/scripts/activate\n# 激活虚拟环境，从当前目录开始，mac\nsource env_ll/bin/activate\n\n\n1\n2\n3\n4\n\n 3. 安装django\n\npip install django\n# 仅在虚拟环境下使用\n\n\n1\n2\n\n 4. 在django中创建项目\n\ndjango-admin startproject text_01 .\n# 此时django项目已创建完成\n# 当前目录下有\n# env_ll文件夹：创建的虚拟环境\n# text_01文件夹：创建的django项目\n# manage.py 文件：简单的程序，接受命令并将其交给django的相关部分运行，使用这些命令来管理使用数据库和运行服务器等\n\n\n1\n2\n3\n4\n5\n6\n\n 5. 创建数据库\n\npython manage.py migrate\n# 此时当前目录下多了db.sqlite3文件\n\n\n1\n2\n\n 6. 查看项目\n\npython manage.py runserver\n# 此时，在浏览器中输入http://localhost:8000/或http://127.0.0.1:8000/，将看到一个小火箭发射的页面\n# 如果你看到了这个页面，证明到目前为止一些正常\n\n\n1\n2\n3\n\n\n\n\n 7. 创建应用程序\n\npython manage.py startapp text_01_app\n# 此时，目录结构如下，在jango项目下settings.py注册app(详见下图)\n\n\n1\n2\n\n\n\n\n# 迁移数据\npython manage.py makemigrations text_01_app\npython manage.py migrate\n\n\n1\n2\n3\n\n 8. 注册超级用户\n\npython manage.py createsuperuser admin_01\n# 回车输入用户名，邮箱(可不写)，密码\n\n\n1\n2\n",charsets:{cjk:!0}},{title:"mysql的安装",frontmatter:{title:"mysql的安装",date:"2021-10-21T10:01:28.000Z",permalink:"/pages/42ea29/",categories:["记录","Mysql"],tags:["mysql"],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/02.Mysql/01.mysql%E7%9A%84%E5%AE%89%E8%A3%85.html",relativePath:"03.记录/02.Mysql/01.mysql的安装.md",key:"v-2a6badba",path:"/pages/42ea29/",headers:[{level:3,title:"Ubuntu20,mysql8",slug:"ubuntu20-mysql8",normalizedTitle:"ubuntu20,mysql8",charIndex:2},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:21},{level:4,title:"验证安装是否成功",slug:"验证安装是否成功",normalizedTitle:"验证安装是否成功",charIndex:104},{level:4,title:"登录",slug:"登录",normalizedTitle:"登录",charIndex:147},{level:4,title:"配置远程连接",slug:"配置远程连接",normalizedTitle:"配置远程连接",charIndex:218}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"Ubuntu20,mysql8 安装 验证安装是否成功 登录 配置远程连接",content:"# Ubuntu20,mysql8\n\n# 安装\n\nsudo apt update\nsudo apt install mysql-server\n# Ubuntu20默认安装mysql8\n\n\n1\n2\n3\n\n\n# 验证安装是否成功\n\nsystemctl status mysql\n\n\n1\n\n\n\n\n# 登录\n\nsudo mysql -u root\n# 首次可直接无密码登录\n# 至此安装结束，现在只限本机使用，很不方便\n\n\n1\n2\n3\n\n\n# 配置远程连接\n\n# show databases一下会发现很多库，需要去mysql库中的user表更改些信息并授权\n\n# 1.\nuse user;\n\n# 2.看下现在user表的user，host，authentication_string字段\nselect user,host,authentication_string from user;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n-- 3.可以看到user-root，host-localhost，authentication_string-空\n\n-- 4.接下来更改root用户的host\nupdate user set host=\"%\" where user=\"root\";\n\n-- 5.给予root用户所有权限\nGRANT ALL privileges on root.* to 'root'@'%';\nGRANT ALL ON *.* TO 'root'@'%';\n\n-- 6.修改root用户密码及加密方式\nALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'yourpassword';\n\n-- 7.刷新权限\nFLUSH PRIVILEGES;\n\n-- 8.退出mysql(exit),修改mysql配置文件mysqlid.cnf\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n-- 注释 bind-address=127.0.0.1\n\n# 9.重启mysql服务\nsudo systemctl restart mysql.service\n#至此数据库可远程连接\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n",normalizedContent:"# ubuntu20,mysql8\n\n# 安装\n\nsudo apt update\nsudo apt install mysql-server\n# ubuntu20默认安装mysql8\n\n\n1\n2\n3\n\n\n# 验证安装是否成功\n\nsystemctl status mysql\n\n\n1\n\n\n\n\n# 登录\n\nsudo mysql -u root\n# 首次可直接无密码登录\n# 至此安装结束，现在只限本机使用，很不方便\n\n\n1\n2\n3\n\n\n# 配置远程连接\n\n# show databases一下会发现很多库，需要去mysql库中的user表更改些信息并授权\n\n# 1.\nuse user;\n\n# 2.看下现在user表的user，host，authentication_string字段\nselect user,host,authentication_string from user;\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n-- 3.可以看到user-root，host-localhost，authentication_string-空\n\n-- 4.接下来更改root用户的host\nupdate user set host=\"%\" where user=\"root\";\n\n-- 5.给予root用户所有权限\ngrant all privileges on root.* to 'root'@'%';\ngrant all on *.* to 'root'@'%';\n\n-- 6.修改root用户密码及加密方式\nalter user 'root'@'%' identified with mysql_native_password by 'yourpassword';\n\n-- 7.刷新权限\nflush privileges;\n\n-- 8.退出mysql(exit),修改mysql配置文件mysqlid.cnf\nsudo vim /etc/mysql/mysql.conf.d/mysqld.cnf\n-- 注释 bind-address=127.0.0.1\n\n# 9.重启mysql服务\nsudo systemctl restart mysql.service\n#至此数据库可远程连接\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n",charsets:{cjk:!0}},{title:"unittest基础",frontmatter:{title:"unittest基础",date:"2021-08-26T22:08:42.000Z",permalink:"/pages/a13db2/",categories:["记录","Python","Unittest"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/02.Unittest/01.unittest%E5%9F%BA%E7%A1%80.html",relativePath:"03.记录/03.Python/02.Unittest/01.unittest基础.md",key:"v-359bbf28",path:"/pages/a13db2/",headers:[{level:2,title:"unittest四大组件",slug:"unittest四大组件",normalizedTitle:"unittest四大组件",charIndex:2},{level:2,title:"unittest使用大致流程",slug:"unittest使用大致流程",normalizedTitle:"unittest使用大致流程",charIndex:499}],excerpt:'<h2 id="unittest四大组件"><a class="header-anchor" href="#unittest四大组件">#</a> unittest四大组件</h2>\n<ol>\n<li>TestCase  测试用例\n<ul>\n<li>定义一个测试用例类，必须继承unittest模块中的TestCase类</li>\n<li>测试用例类中，一个test开头的就是一条测试用例</li>\n<li>用例执行逻辑编写</li>\n</ul>\n</li>\n<li>TestSuite 测试套件</li>\n<li>TestRunner 测试运行</li>\n</ol>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"unittest四大组件 unittest使用大致流程",content:"# unittest四大组件\n\n 1. TestCase 测试用例\n    * 定义一个测试用例类，必须继承unittest模块中的TestCase类\n    * 测试用例类中，一个test开头的就是一条测试用例\n    * 用例执行逻辑编写\n 2. TestSuite 测试套件\n 3. TestRunner 测试运行\n\nimport unittest\nfrom unittestreport import TestRunner\n# 创建测试套件收集测试用例类\nsuite = unittest.defaultTestLoader.discover('TestCase文件夹路径')\nrunner = TestRunner(suite)\nrunner.run()\n\n\n1\n2\n3\n4\n5\n6\n\n 4. fixtrue 测试夹具\n\n * 前置：\n   * setUp 用例级别的前置：每条用例执行前执行\n   * tearDown 用例级别的后置：每条用例执行后执行\n * 后置：\n   * setUpclass 测试类级别的前置\n   * tearDownclass 测试类列级别的后置\n\n\n# unittest使用大致流程\n\n 1. 准备测试用例数据 excel表\n 2. 创建测试类\n\n * 使用ddt数据驱动\n * 细化测试用例逻辑 是否有前置需要\n   1. 接口参数 预期\n   2. 运行获取实际结果\n   3. 断言\n      * 成功：回写数据到excel 输出log为用例通过\n      * 失败：回写数据到excel 输出log为用例不通过\n      * 数据库校验\n\n 3. 运行测试用例类\n\n * unittestreport中的TestRunner方法\n\n 4. 运行成功查看日志&excel回写&unittestreport生成的测试报告",normalizedContent:"# unittest四大组件\n\n 1. testcase 测试用例\n    * 定义一个测试用例类，必须继承unittest模块中的testcase类\n    * 测试用例类中，一个test开头的就是一条测试用例\n    * 用例执行逻辑编写\n 2. testsuite 测试套件\n 3. testrunner 测试运行\n\nimport unittest\nfrom unittestreport import testrunner\n# 创建测试套件收集测试用例类\nsuite = unittest.defaulttestloader.discover('testcase文件夹路径')\nrunner = testrunner(suite)\nrunner.run()\n\n\n1\n2\n3\n4\n5\n6\n\n 4. fixtrue 测试夹具\n\n * 前置：\n   * setup 用例级别的前置：每条用例执行前执行\n   * teardown 用例级别的后置：每条用例执行后执行\n * 后置：\n   * setupclass 测试类级别的前置\n   * teardownclass 测试类列级别的后置\n\n\n# unittest使用大致流程\n\n 1. 准备测试用例数据 excel表\n 2. 创建测试类\n\n * 使用ddt数据驱动\n * 细化测试用例逻辑 是否有前置需要\n   1. 接口参数 预期\n   2. 运行获取实际结果\n   3. 断言\n      * 成功：回写数据到excel 输出log为用例通过\n      * 失败：回写数据到excel 输出log为用例不通过\n      * 数据库校验\n\n 3. 运行测试用例类\n\n * unittestreport中的testrunner方法\n\n 4. 运行成功查看日志&excel回写&unittestreport生成的测试报告",charsets:{cjk:!0}},{title:"python+unittest+request等模块搭建接口自动化框架",frontmatter:{title:"python+unittest+request等模块搭建接口自动化框架",date:"2022-05-26T11:58:18.000Z",permalink:"/pages/8d13e3/",categories:["记录","Python","Unittest"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/02.Unittest/02.python+unittest+request%E7%AD%89%E6%A8%A1%E5%9D%97%E6%90%AD%E5%BB%BA%E6%8E%A5%E5%8F%A3%E8%87%AA%E5%8A%A8%E5%8C%96%E6%A1%86%E6%9E%B6.html",relativePath:"03.记录/03.Python/02.Unittest/02.python+unittest+request等模块搭建接口自动化框架.md",key:"v-5767fbc2",path:"/pages/8d13e3/",headers:[{level:2,title:"目录结构--demo",slug:"目录结构-demo",normalizedTitle:"目录结构--demo",charIndex:481},{level:2,title:"pip list",slug:"pip-list",normalizedTitle:"pip list",charIndex:1120},{level:2,title:"读写excel表封装 openpyxl",slug:"读写excel表封装-openpyxl",normalizedTitle:"读写excel表封装 openpyxl",charIndex:1275},{level:2,title:"项目路径优化处理 os",slug:"项目路径优化处理-os",normalizedTitle:"项目路径优化处理 os",charIndex:2235},{level:2,title:"读取配置文件 configparser",slug:"读取配置文件-configparser",normalizedTitle:"读取配置文件 configparser",charIndex:2629},{level:2,title:"日志收集 logging",slug:"日志收集-logging",normalizedTitle:"日志收集 logging",charIndex:2959},{level:2,title:"正则替换 re",slug:"正则替换-re",normalizedTitle:"正则替换 re",charIndex:4113},{level:2,title:"前置登录处理+处理token鉴权封装",slug:"前置登录处理-处理token鉴权封装",normalizedTitle:"前置登录处理+处理token鉴权封装",charIndex:4719},{level:2,title:"运行测试用例+生成测试报告+邮箱推送",slug:"运行测试用例-生成测试报告-邮箱推送",normalizedTitle:"运行测试用例+生成测试报告+邮箱推送",charIndex:5652}],excerpt:'<ul>\n<li>关于搭建借口自动化框架过程中遇到的一些坑</li>\n</ul>\n<ol>\n<li></li>\n</ol>\n<ul>\n<li><strong>问题</strong>：excel中写的用例请求参数类型为dict,通过openpyxl读取出来为str</li>\n<li><strong>原因</strong>：excel只有int和str两种数据类型，并不认识dict</li>\n<li><strong>解法</strong>：eval()转换下</li>\n</ul>\n<ol start="2">\n<li></li>\n</ol>\n<ul>\n<li><strong>问题</strong>：输出log到控制台和文件中，功能封装后被多个测试类调用，每调用次数加1，相应的日志输出也加1</li>\n<li><strong>原因</strong>：封装后被调用，创建了多个日志收集器，输出文件&amp;控制台只有一个，被调用几次，就创建了几个日志收集器，就收集了几个，最后输出到同一地方</li>\n<li><strong>解法</strong>：封装好直接在py文件中创建日志收集器，之后在其他类直接调用这一个收集器</li>\n</ul>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"目录结构--demo pip list 读写excel表封装 openpyxl 项目路径优化处理 os 读取配置文件 configparser 日志收集 logging 正则替换 re 前置登录处理+处理token鉴权封装 运行测试用例+生成测试报告+邮箱推送",content:" * 关于搭建借口自动化框架过程中遇到的一些坑\n\n 1. \n\n * 问题：excel中写的用例请求参数类型为dict,通过openpyxl读取出来为str\n * 原因：excel只有int和str两种数据类型，并不认识dict\n * 解法：eval()转换下\n\n 2. \n\n * 问题：输出log到控制台和文件中，功能封装后被多个测试类调用，每调用次数加1，相应的日志输出也加1\n * 原因：封装后被调用，创建了多个日志收集器，输出文件&控制台只有一个，被调用几次，就创建了几个日志收集器，就收集了几个，最后输出到同一地方\n * 解法：封装好直接在py文件中创建日志收集器，之后在其他类直接调用这一个收集器\n\n 3. \n\n * 问题：pymysql进行数据库校验，接口请求钱前和接口请求后分别查库，结果显示一致，导致断言失败\n * 原因：pymysql0.9.3版本支持with写法 不用手动commit 新版中不支持with写法 需要手动commit 在封装方法中忘记commit了\n * 解法：封装方法中使用数据库连接对象调用.commit()方法\n\n\n# 目录结构--demo\n\n├── common # 封装的公共方法文件夹，直接调用\n│   ├── handle_conf.py # 读取配置文件内容 configparser\n│   ├── handle_excel.py # 操作excel openpyxl\n│   ├── handle_log.py # log收集输出 logging\n│   ├── handle_mysql.py # 操作数据库 pymysql\n│   ├── handle_path.py # 路径优化 os\n│   └── handle_re.py # 正则提取 re\n├── conf # 配置文件存放文件夹\n│   └── conf.ini \n├── datas # 用例数据存放文件夹\n│   └── demo_data.xlsx\n├── logs # 输出日志存放文件夹\n│   └── log.txt\n├── reports # 测试报告生成文件夹\n│   └── report.html\n├── run.py # 测试启动运行文件\n└── test_cases # 测试用例\n   ├── super_cls.py # 封装的前置条件\n   ├── test_01_register.py # 模块1用例\n   └── test_02_login.py # 模块2用例\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# pip list\n\njsonpath       0.82\nopenpyxl       3.0.9\nPyMySQL        1.0.2\nPyYAML         5.3.1\nrequests       2.24.0\nunittestreport 1.4.0\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 读写excel表封装 openpyxl\n\nhandle_excel.py\n\nimport openpyxl\n\n# 处理excel\n\nclass handle_excel:\n\n    def __init__(self,excel_path,sheet_name):\n        self.excel_path = excel_path\n        self.sheet_name = sheet_name\n\n    # 读\n    def read(self):\n        workbook = openpyxl.load_workbook(self.excel_path)\n        sheet = workbook[self.sheet_name]\n        cells = list(sheet.rows)\n        title = [i.value for i in cells[0]]\n        list_data = []\n\n        for items in cells[1:]:\n            data = [i.value for i in items]\n            new_data = dict(zip(title,data))\n            list_data.append(new_data)\n\n        return list_data\n    # 写\n    def write(self,row,column,value):\n        workbook = openpyxl.load_workbook(self.excel_path)\n        sheet = workbook[self.sheet_name]\n        sheet.cell(row=row,column=column,value=value)\n\n        workbook.save(self.excel_path)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 项目路径优化处理 os\n\nhandle_path.py\n\nimport os\n\n# 当前项目根目录\nROOT_PATH = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# 用例数据路径\nDATAS_PATH = os.path.join(ROOT_PATH,'datas')\n\n# 配置文件路径\nConf_PATH = os.path.join(ROOT_PATH,'conf')\n\n# 日志文件路径\nLogs_PATH = os.path.join(ROOT_PATH,'logs')\n\n# 测试用例路径\nTest_cases_PATH = os.path.join(ROOT_PATH,'test_cases')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 读取配置文件 configparser\n\nhandle_conf.py\n\nfrom configparser import ConfigParser\nimport os\nfrom common.handle_path import Conf_PATH\nclass handle_conf(ConfigParser):\n    def __init__(self,conf_path):\n        super().__init__()\n        self.read(conf_path)\n\nconf = handle_conf(os.path.join(Conf_PATH,'conf.ini'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 日志收集 logging\n\nhandle_log.py\n\nimport logging\nimport os\nfrom common.handle_conf import conf # 导入配置文件读取方法\nfrom common.handle_path import Logs_PATH # 导入日志输出路径\ndef  handle_log(log_name,log_level,file_name,file_level,str_level):\n    log = logging.getLogger(log_name)\n    # 设置日志收集等级\n    log.setLevel(log_level)\n\n    file_log = logging.FileHandler(file_name,encoding='utf-8')\n    # 设置日志输出等级 --- 文件\n    file_log.setLevel(file_level)\n    log.addHandler(file_log)\n\n    str_log = logging.StreamHandler()\n    # 设置日志输出等级 --- 控制台\n    str_log.setLevel(str_level)\n    log.addHandler(str_log)\n\n    # 日志输出格式\n    type = logging.Formatter('日志输出的格式')\n    file_log.setFormatter(type)\n    str_log.setFormatter(type)\n\n\n    return log\n\n# 创建一个日志收集器对象，其他类只调用这一个即可，避免日志重复收集\nmy_log = handle_log(\n    log_name = conf.get('logging','log_name'), # 参数来自配置文件\n    log_level = conf.get('logging','log_level'),\n    file_name = os.path.join(Logs_PATH,conf.get('logging','file_name')),\n    file_level = conf.get('logging','file_level'),\n    str_level = conf.get('logging','str_level')\n)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 正则替换 re\n\nhandle_re.py\n\nimport re\nfrom common.handle_conf import conf\ndef handle_re(str,cls):\n    while re.search('#(.+?)#',str):\n        # 匹配到需要替换的字符对象\n        re_1 = re.search('#(.+?)#',str)\n        # 获取需要替换的字符\n        re_2 = re_1.group()\n        # 获取要替换属性的名称\n        re_3 = re_1.group(1)\n        # 通过类属性获取要替换的值\n        # 如果类属性没有找到要替换的值，那么去配置文件找\n        try:\n            re_4 = getattr(cls,re_3)\n        except AttributeError:\n            re_4 = conf.get('test_data',re_2) \n        # 替换该字符串中的值\n        str = str.replace(re_2,re_4)\n\n    return str\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 前置登录处理+处理token鉴权封装\n\nsuper_cls\n\nimport requests\nfrom jsonpath import jsonpath\nfrom common.handle_conf import conf\n\nclass BASA_DATA:\n\n    @classmethod\n    def user_login(cls):\n        # 配置文件读取测试用的登录用户账号信息\n        headers = eval(conf.get('env', 'headers'))\n        login_url = conf.get('env', 'url') + '登录接口地址'\n        login_params = {\n            'phone': conf.get('test_data', 'phone'),\n            'pwd': conf.get('test_data', 'pwd')\n        }\n\n        # 发送请求\n        response = requests.post(url=login_url, headers=headers, json=login_params)\n        # 获取返回结果\n        login_res = response.json()\n\n        # jsonpath提取token\n        token = jsonpath(login_res, '$..token')\n        # 更新headers并保存为类属性\n        headers['Authorization'] = 'Bearer ' + token[0]\n        cls.headers = headers\n        # token提取完成，并已经保存到请求头中，登录后才能进行操作的模块，前置条件中直接调用此方法即可setupclass\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 运行测试用例+生成测试报告+邮箱推送\n\nrun.py\n\nimport unittest\nfrom unittestreport import TestRunner\nfrom common.handle_path import Test_cases_PATH\n\n\ndef main():\n    # 用例收集\n    suite = unittest.defaultTestLoader.discover(Test_cases_PATH)\n    # 套件加载\n    runner = TestRunner(suite,\n                        title='demo',\n                        tester='liyuqing',\n                        desc=\"demo项目测试生成的报告\",\n                        )\n    # 运行\n    runner.run()\n\n    # 邮箱推送测试结果\n    # 首先要开通邮箱smtp服务，获取授权码\n    runner.send_email(host='smtp.qq.com', # smtp服务器地址\n                      port=456, # smtp服务器地址端口\n                      user='1923313276@qq.com', # 发送人邮箱账号\n                      password='授权码',  # smtp授权码\n                      to_addrs='1923313276@qq.com',# 收件人邮箱账号，群发传list，单发str\n                      )\n\nif __name__ == '__main__':\n    main()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n![邮箱]https://fastly.jsdelivr.net/gh/liyuqinggg/cdn@1.5/qq_01.png",normalizedContent:" * 关于搭建借口自动化框架过程中遇到的一些坑\n\n 1. \n\n * 问题：excel中写的用例请求参数类型为dict,通过openpyxl读取出来为str\n * 原因：excel只有int和str两种数据类型，并不认识dict\n * 解法：eval()转换下\n\n 2. \n\n * 问题：输出log到控制台和文件中，功能封装后被多个测试类调用，每调用次数加1，相应的日志输出也加1\n * 原因：封装后被调用，创建了多个日志收集器，输出文件&控制台只有一个，被调用几次，就创建了几个日志收集器，就收集了几个，最后输出到同一地方\n * 解法：封装好直接在py文件中创建日志收集器，之后在其他类直接调用这一个收集器\n\n 3. \n\n * 问题：pymysql进行数据库校验，接口请求钱前和接口请求后分别查库，结果显示一致，导致断言失败\n * 原因：pymysql0.9.3版本支持with写法 不用手动commit 新版中不支持with写法 需要手动commit 在封装方法中忘记commit了\n * 解法：封装方法中使用数据库连接对象调用.commit()方法\n\n\n# 目录结构--demo\n\n├── common # 封装的公共方法文件夹，直接调用\n│   ├── handle_conf.py # 读取配置文件内容 configparser\n│   ├── handle_excel.py # 操作excel openpyxl\n│   ├── handle_log.py # log收集输出 logging\n│   ├── handle_mysql.py # 操作数据库 pymysql\n│   ├── handle_path.py # 路径优化 os\n│   └── handle_re.py # 正则提取 re\n├── conf # 配置文件存放文件夹\n│   └── conf.ini \n├── datas # 用例数据存放文件夹\n│   └── demo_data.xlsx\n├── logs # 输出日志存放文件夹\n│   └── log.txt\n├── reports # 测试报告生成文件夹\n│   └── report.html\n├── run.py # 测试启动运行文件\n└── test_cases # 测试用例\n   ├── super_cls.py # 封装的前置条件\n   ├── test_01_register.py # 模块1用例\n   └── test_02_login.py # 模块2用例\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# pip list\n\njsonpath       0.82\nopenpyxl       3.0.9\npymysql        1.0.2\npyyaml         5.3.1\nrequests       2.24.0\nunittestreport 1.4.0\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 读写excel表封装 openpyxl\n\nhandle_excel.py\n\nimport openpyxl\n\n# 处理excel\n\nclass handle_excel:\n\n    def __init__(self,excel_path,sheet_name):\n        self.excel_path = excel_path\n        self.sheet_name = sheet_name\n\n    # 读\n    def read(self):\n        workbook = openpyxl.load_workbook(self.excel_path)\n        sheet = workbook[self.sheet_name]\n        cells = list(sheet.rows)\n        title = [i.value for i in cells[0]]\n        list_data = []\n\n        for items in cells[1:]:\n            data = [i.value for i in items]\n            new_data = dict(zip(title,data))\n            list_data.append(new_data)\n\n        return list_data\n    # 写\n    def write(self,row,column,value):\n        workbook = openpyxl.load_workbook(self.excel_path)\n        sheet = workbook[self.sheet_name]\n        sheet.cell(row=row,column=column,value=value)\n\n        workbook.save(self.excel_path)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 项目路径优化处理 os\n\nhandle_path.py\n\nimport os\n\n# 当前项目根目录\nroot_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# 用例数据路径\ndatas_path = os.path.join(root_path,'datas')\n\n# 配置文件路径\nconf_path = os.path.join(root_path,'conf')\n\n# 日志文件路径\nlogs_path = os.path.join(root_path,'logs')\n\n# 测试用例路径\ntest_cases_path = os.path.join(root_path,'test_cases')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 读取配置文件 configparser\n\nhandle_conf.py\n\nfrom configparser import configparser\nimport os\nfrom common.handle_path import conf_path\nclass handle_conf(configparser):\n    def __init__(self,conf_path):\n        super().__init__()\n        self.read(conf_path)\n\nconf = handle_conf(os.path.join(conf_path,'conf.ini'))\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 日志收集 logging\n\nhandle_log.py\n\nimport logging\nimport os\nfrom common.handle_conf import conf # 导入配置文件读取方法\nfrom common.handle_path import logs_path # 导入日志输出路径\ndef  handle_log(log_name,log_level,file_name,file_level,str_level):\n    log = logging.getlogger(log_name)\n    # 设置日志收集等级\n    log.setlevel(log_level)\n\n    file_log = logging.filehandler(file_name,encoding='utf-8')\n    # 设置日志输出等级 --- 文件\n    file_log.setlevel(file_level)\n    log.addhandler(file_log)\n\n    str_log = logging.streamhandler()\n    # 设置日志输出等级 --- 控制台\n    str_log.setlevel(str_level)\n    log.addhandler(str_log)\n\n    # 日志输出格式\n    type = logging.formatter('日志输出的格式')\n    file_log.setformatter(type)\n    str_log.setformatter(type)\n\n\n    return log\n\n# 创建一个日志收集器对象，其他类只调用这一个即可，避免日志重复收集\nmy_log = handle_log(\n    log_name = conf.get('logging','log_name'), # 参数来自配置文件\n    log_level = conf.get('logging','log_level'),\n    file_name = os.path.join(logs_path,conf.get('logging','file_name')),\n    file_level = conf.get('logging','file_level'),\n    str_level = conf.get('logging','str_level')\n)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 正则替换 re\n\nhandle_re.py\n\nimport re\nfrom common.handle_conf import conf\ndef handle_re(str,cls):\n    while re.search('#(.+?)#',str):\n        # 匹配到需要替换的字符对象\n        re_1 = re.search('#(.+?)#',str)\n        # 获取需要替换的字符\n        re_2 = re_1.group()\n        # 获取要替换属性的名称\n        re_3 = re_1.group(1)\n        # 通过类属性获取要替换的值\n        # 如果类属性没有找到要替换的值，那么去配置文件找\n        try:\n            re_4 = getattr(cls,re_3)\n        except attributeerror:\n            re_4 = conf.get('test_data',re_2) \n        # 替换该字符串中的值\n        str = str.replace(re_2,re_4)\n\n    return str\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\n# 前置登录处理+处理token鉴权封装\n\nsuper_cls\n\nimport requests\nfrom jsonpath import jsonpath\nfrom common.handle_conf import conf\n\nclass basa_data:\n\n    @classmethod\n    def user_login(cls):\n        # 配置文件读取测试用的登录用户账号信息\n        headers = eval(conf.get('env', 'headers'))\n        login_url = conf.get('env', 'url') + '登录接口地址'\n        login_params = {\n            'phone': conf.get('test_data', 'phone'),\n            'pwd': conf.get('test_data', 'pwd')\n        }\n\n        # 发送请求\n        response = requests.post(url=login_url, headers=headers, json=login_params)\n        # 获取返回结果\n        login_res = response.json()\n\n        # jsonpath提取token\n        token = jsonpath(login_res, '$..token')\n        # 更新headers并保存为类属性\n        headers['authorization'] = 'bearer ' + token[0]\n        cls.headers = headers\n        # token提取完成，并已经保存到请求头中，登录后才能进行操作的模块，前置条件中直接调用此方法即可setupclass\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 运行测试用例+生成测试报告+邮箱推送\n\nrun.py\n\nimport unittest\nfrom unittestreport import testrunner\nfrom common.handle_path import test_cases_path\n\n\ndef main():\n    # 用例收集\n    suite = unittest.defaulttestloader.discover(test_cases_path)\n    # 套件加载\n    runner = testrunner(suite,\n                        title='demo',\n                        tester='liyuqing',\n                        desc=\"demo项目测试生成的报告\",\n                        )\n    # 运行\n    runner.run()\n\n    # 邮箱推送测试结果\n    # 首先要开通邮箱smtp服务，获取授权码\n    runner.send_email(host='smtp.qq.com', # smtp服务器地址\n                      port=456, # smtp服务器地址端口\n                      user='1923313276@qq.com', # 发送人邮箱账号\n                      password='授权码',  # smtp授权码\n                      to_addrs='1923313276@qq.com',# 收件人邮箱账号，群发传list，单发str\n                      )\n\nif __name__ == '__main__':\n    main()\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n![邮箱]https://fastly.jsdelivr.net/gh/liyuqinggg/cdn@1.5/qq_01.png",charsets:{cjk:!0}},{title:"openpyxl-操作excel读取数据",frontmatter:{title:"openpyxl-操作excel读取数据",date:"2022-02-22T11:26:52.000Z",permalink:"/pages/44c83f/",categories:["记录","Python","一些模块方法"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/04.%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95/01.openpyxl-%E6%93%8D%E4%BD%9Cexcel%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE.html",relativePath:"03.记录/03.Python/04.一些模块方法/01.openpyxl-操作excel读取数据.md",key:"v-08ad58a0",path:"/pages/44c83f/",headers:[{level:2,title:"openpyxl基本使用",slug:"openpyxl基本使用",normalizedTitle:"openpyxl基本使用",charIndex:2},{level:2,title:"openpyxl封装",slug:"openpyxl封装",normalizedTitle:"openpyxl封装",charIndex:740}],excerpt:'<h2 id="openpyxl基本使用"><a class="header-anchor" href="#openpyxl基本使用">#</a> openpyxl基本使用</h2>\n<p>pip install openpyxl</p>\n<ol>\n<li>把excel解析为<strong>Workbook</strong>：工作薄对象</li>\n<li>Sheet：表单对象</li>\n<li>Cell：表格对象</li>\n</ol>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"openpyxl基本使用 openpyxl封装",content:"# openpyxl基本使用\n\npip install openpyxl\n\n 1. 把excel解析为Workbook：工作薄对象\n 2. Sheet：表单对象\n 3. Cell：表格对象\n\n# 读\n# 1.导入openpyxl模块，解析指定excel\nworkbook = openpyxl.load_workbook('excel路径')\n# 2.指定解析的sheet\nsheet = workbook['sheet名']\n# 3.按行读取cell并转换为list存储\ncell = list(sheet.rows)\n# 4.此时cell是一个列表嵌套元组的形式，元祖包括读取到的cell表格，用下标取值后遍历，单个的cell拥有value方法，可读取单个cell格子的值\ndata = [i.value for i in cell[0]]\n# 5.此时data为该sheet的第一行的所有值\nprint(data)\n\n# 写\n# 1.导入openpyxl模块，解析指定excel\nworkbook = openpyxl.load_workbook('excel路径')\n# 2.指定解析的sheet\nsheet = workbook['sheet名']\n# 3.写入需要cell方法并传入row,column,value\nsheet.cell(row=1,colum=1,'hello')\n# 4.此时数据在该sheet的第一行，第一列即A1的单元格写入了hello，但此时表中数据还没有变，需要保存\nworkbook.save('excel路径')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# openpyxl封装",normalizedContent:"# openpyxl基本使用\n\npip install openpyxl\n\n 1. 把excel解析为workbook：工作薄对象\n 2. sheet：表单对象\n 3. cell：表格对象\n\n# 读\n# 1.导入openpyxl模块，解析指定excel\nworkbook = openpyxl.load_workbook('excel路径')\n# 2.指定解析的sheet\nsheet = workbook['sheet名']\n# 3.按行读取cell并转换为list存储\ncell = list(sheet.rows)\n# 4.此时cell是一个列表嵌套元组的形式，元祖包括读取到的cell表格，用下标取值后遍历，单个的cell拥有value方法，可读取单个cell格子的值\ndata = [i.value for i in cell[0]]\n# 5.此时data为该sheet的第一行的所有值\nprint(data)\n\n# 写\n# 1.导入openpyxl模块，解析指定excel\nworkbook = openpyxl.load_workbook('excel路径')\n# 2.指定解析的sheet\nsheet = workbook['sheet名']\n# 3.写入需要cell方法并传入row,column,value\nsheet.cell(row=1,colum=1,'hello')\n# 4.此时数据在该sheet的第一行，第一列即a1的单元格写入了hello，但此时表中数据还没有变，需要保存\nworkbook.save('excel路径')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# openpyxl封装",charsets:{cjk:!0}},{title:"requests-和一些其他模块",frontmatter:{title:"requests-和一些其他模块",date:"2022-02-22T11:30:38.000Z",permalink:"/pages/51754f/",categories:["记录","Python","一些模块方法"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/04.%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95/02.requests%E5%92%8C%E4%B8%80%E4%BA%9B%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97.html",relativePath:"03.记录/03.Python/04.一些模块方法/02.requests和一些其他模块.md",key:"v-3e46ea57",path:"/pages/51754f/",headers:[{level:2,title:"requests 简单请求",slug:"requests-简单请求",normalizedTitle:"requests 简单请求",charIndex:61},{level:2,title:"各种content-type对应的参数",slug:"各种content-type对应的参数",normalizedTitle:"各种content-type对应的参数",charIndex:708},{level:2,title:"处理cookie+session鉴权",slug:"处理cookie-session鉴权",normalizedTitle:"处理cookie+session鉴权",charIndex:1384},{level:2,title:"jsonpath 提取token 处理token鉴权",slug:"jsonpath-提取token-处理token鉴权",normalizedTitle:"jsonpath 提取token 处理token鉴权",charIndex:1488},{level:2,title:"pysql 操作数据库",slug:"pysql-操作数据库",normalizedTitle:"pysql 操作数据库",charIndex:2117}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"requests 简单请求 各种content-type对应的参数 处理cookie+session鉴权 jsonpath 提取token 处理token鉴权 pysql 操作数据库",content:"requests使用\n\n 1. pip install requests\n 2. import requests\n\n\n# requests 简单请求\n\nimport requests\nurl = 'https://www.baidu.com' # 百度为例\nresponse = requests.get(url=url)\nprint(response) # 返回的格式和正常有区别 可以用其他为例 因为是pycharm通过requests发送出去的 请求头为'User-Agent': 'python-requests/2.24.0',百度有鉴别功能会认为是机器人\n\n# 获取响应状态码\nprint(response.status_code)\n\n# 获取响应头\nprint(response.headers)\n\n# 获取响应体\n# 1.\nprint(response.text) # 自动识别返回内容进行解码 可能会乱码\n# 2.\nprint(response.content.decode('utf-8')) # 通过decode方法指定编码方式解码\n# 3.\nprint(response.json()) # 只有返回的数据是json才能用 否则会报错 接口测试用 会将返回的json转换为python数据\n\n# 获取请求头\nprint(response.requests.headers)\n\n# 获取请求提\nprint(response.requests.body)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 各种content-type对应的参数\n\nimport requests\n# content-type : application/x-www-form-urlencoded\n# 参数类型为表单对应使用data关键字传参\nresponse = requests.post(url=url,data=data)\n\n# content-type : application/json\n# 参数类型为json对应使用json关键字传参\nresponse = requests.post(url=url,json=data)\n\n# get请求参数\n# 方式一：参数直接拼接在url后，？链接 参数&链接\nurl = 'http://xxxx.com?param1&param2'\nresponse = requests.get(url=url)\n\n# 方式二：使用params关键字参数传参\nurl = 'http://xxx.com'\nparams = {\n    'one':'param1',\n    'two':'param2'\n}\nresponse = requests.get(url=url,params=params)\n\n# content-type : form-data\n# 文件上传，关键files传参\nresponse = request.post(url=url,files=file)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 处理cookie+session鉴权\n\n# requests自带session功能函数，直接调用即可\nimport requests\n\ns = requests.session\n\n\n1\n2\n3\n4\n\n\n\n# jsonpath 提取token 处理token鉴权\n\n 1. 取出token\n 2. 把token传递给下游接口\n\n# 把登录接口返回的token值取出来，传递给下游接口\n# 返回数据是json格式可直接通过requests.json()获取数据后通过索引取值\n# 也可以用jsonpath取值\nfrom jsonpath import jsonpath\n# 1.    $               根节点          jsonpath('数据','jsonpath表达式')\n# 2.    .               直接子节点\n# 3.    ..              子孙节点\n# 4.    []              选择子节点/索引\n# 5.    [,]             选择多个字段\n# 6.    @               代表当前选中的节点，和过滤条件一起用\n# 7.    [?(过滤条件)]    通过条件过滤数据\n# 获取到token后通过headers参数传递过去\ntoken = {\n    'Authorztion' : 'Bearer' + 'json()中获取的token值' \n}\nrequests.post(url=url,headers=token,json=param)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# pysql 操作数据库\n\n# pip install pymysql\nimport pymysql\n\n# 1.创建链接\ncon = pymysql.connect(host='数据库地址',port='端口号',user='数据库用户名','password'='数据密码',charset='utf8')\n\n# 2.创建游标对象\ncur = con.cursor()\n\n# 3.游标对象执行sql语句\ncur.execute('sql')\n# 4.涉及增删改 需提交事务\ncon.commit()\n# 通过with语句解决\nwith con as c:\n  c.execute('sql')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",normalizedContent:"requests使用\n\n 1. pip install requests\n 2. import requests\n\n\n# requests 简单请求\n\nimport requests\nurl = 'https://www.baidu.com' # 百度为例\nresponse = requests.get(url=url)\nprint(response) # 返回的格式和正常有区别 可以用其他为例 因为是pycharm通过requests发送出去的 请求头为'user-agent': 'python-requests/2.24.0',百度有鉴别功能会认为是机器人\n\n# 获取响应状态码\nprint(response.status_code)\n\n# 获取响应头\nprint(response.headers)\n\n# 获取响应体\n# 1.\nprint(response.text) # 自动识别返回内容进行解码 可能会乱码\n# 2.\nprint(response.content.decode('utf-8')) # 通过decode方法指定编码方式解码\n# 3.\nprint(response.json()) # 只有返回的数据是json才能用 否则会报错 接口测试用 会将返回的json转换为python数据\n\n# 获取请求头\nprint(response.requests.headers)\n\n# 获取请求提\nprint(response.requests.body)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 各种content-type对应的参数\n\nimport requests\n# content-type : application/x-www-form-urlencoded\n# 参数类型为表单对应使用data关键字传参\nresponse = requests.post(url=url,data=data)\n\n# content-type : application/json\n# 参数类型为json对应使用json关键字传参\nresponse = requests.post(url=url,json=data)\n\n# get请求参数\n# 方式一：参数直接拼接在url后，？链接 参数&链接\nurl = 'http://xxxx.com?param1&param2'\nresponse = requests.get(url=url)\n\n# 方式二：使用params关键字参数传参\nurl = 'http://xxx.com'\nparams = {\n    'one':'param1',\n    'two':'param2'\n}\nresponse = requests.get(url=url,params=params)\n\n# content-type : form-data\n# 文件上传，关键files传参\nresponse = request.post(url=url,files=file)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 处理cookie+session鉴权\n\n# requests自带session功能函数，直接调用即可\nimport requests\n\ns = requests.session\n\n\n1\n2\n3\n4\n\n\n\n# jsonpath 提取token 处理token鉴权\n\n 1. 取出token\n 2. 把token传递给下游接口\n\n# 把登录接口返回的token值取出来，传递给下游接口\n# 返回数据是json格式可直接通过requests.json()获取数据后通过索引取值\n# 也可以用jsonpath取值\nfrom jsonpath import jsonpath\n# 1.    $               根节点          jsonpath('数据','jsonpath表达式')\n# 2.    .               直接子节点\n# 3.    ..              子孙节点\n# 4.    []              选择子节点/索引\n# 5.    [,]             选择多个字段\n# 6.    @               代表当前选中的节点，和过滤条件一起用\n# 7.    [?(过滤条件)]    通过条件过滤数据\n# 获取到token后通过headers参数传递过去\ntoken = {\n    'authorztion' : 'bearer' + 'json()中获取的token值' \n}\nrequests.post(url=url,headers=token,json=param)\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# pysql 操作数据库\n\n# pip install pymysql\nimport pymysql\n\n# 1.创建链接\ncon = pymysql.connect(host='数据库地址',port='端口号',user='数据库用户名','password'='数据密码',charset='utf8')\n\n# 2.创建游标对象\ncur = con.cursor()\n\n# 3.游标对象执行sql语句\ncur.execute('sql')\n# 4.涉及增删改 需提交事务\ncon.commit()\n# 通过with语句解决\nwith con as c:\n  c.execute('sql')\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n",charsets:{cjk:!0}},{title:"re-正则提取",frontmatter:{title:"re-正则提取",date:"2022-02-22T11:35:04.000Z",permalink:"/pages/73d2aa/",categories:["记录","Python","一些模块方法"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/04.%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95/03.re-%E6%AD%A3%E5%88%99%E6%8F%90%E5%8F%96.html",relativePath:"03.记录/03.Python/04.一些模块方法/03.re-正则提取.md",key:"v-2cabb872",path:"/pages/73d2aa/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"元字符/单字符",slug:"元字符-单字符",normalizedTitle:"元字符/单字符",charIndex:31},{level:2,title:"表示数量",slug:"表示数量",normalizedTitle:"表示数量",charIndex:223},{level:2,title:"表示边界",slug:"表示边界",normalizedTitle:"表示边界",charIndex:597}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"简介 元字符/单字符 表示数量 表示边界",content:"# 简介\n\npython中正则表达式需要用到re模块\n\n\n# 元字符/单字符\n\nimport re\n\nre = re.findall('正则表达式','数据')\n\n# \\d 匹配数字\n# \\D 匹配非数字\n\n# \\s 匹配空格\n# \\S 匹配非空格\n\n# \\w 匹配单词字符（数字 字母 下划线）\n# \\W 匹配非单词字符\n\n# . 任意字符\n# [] 枚举\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 表示数量\n\nimport re\n\n# {n} 表示一个字符出现n次\ns1 = '12345.123.5678910'\nre = re.findall('\\d{5}',s1)\nprint (re) # 结果：['12345','56789']\n\n# {n,} 表示一个字符出现n次以上 包括n\nre1 = re.findall('\\d{5,}',s1)\nprint(re1) # 结果:['12345','5678910']\n\n# {n,m} 表示一个字符出现n-m次 包括n\n\n# ?贪婪模式\nre2 = re.findall('#.{1,}?#'s1)\n\n# + 出现一次以上 等同于{1,}\n\n# *  出现0次以上\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 表示边界\n\nimport re\n\n# 字符串边界\n# ^ 开头\n# $ 结尾\n\n# 单词边界\n# \\b \n# \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",normalizedContent:"# 简介\n\npython中正则表达式需要用到re模块\n\n\n# 元字符/单字符\n\nimport re\n\nre = re.findall('正则表达式','数据')\n\n# \\d 匹配数字\n# \\d 匹配非数字\n\n# \\s 匹配空格\n# \\s 匹配非空格\n\n# \\w 匹配单词字符（数字 字母 下划线）\n# \\w 匹配非单词字符\n\n# . 任意字符\n# [] 枚举\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 表示数量\n\nimport re\n\n# {n} 表示一个字符出现n次\ns1 = '12345.123.5678910'\nre = re.findall('\\d{5}',s1)\nprint (re) # 结果：['12345','56789']\n\n# {n,} 表示一个字符出现n次以上 包括n\nre1 = re.findall('\\d{5,}',s1)\nprint(re1) # 结果:['12345','5678910']\n\n# {n,m} 表示一个字符出现n-m次 包括n\n\n# ?贪婪模式\nre2 = re.findall('#.{1,}?#'s1)\n\n# + 出现一次以上 等同于{1,}\n\n# *  出现0次以上\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 表示边界\n\nimport re\n\n# 字符串边界\n# ^ 开头\n# $ 结尾\n\n# 单词边界\n# \\b \n# \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",charsets:{cjk:!0}},{title:"configparser&json读取配置文件&json文件",frontmatter:{title:"configparser&json读取配置文件&json文件",date:"2022-02-22T11:43:47.000Z",permalink:"/pages/2f1c24/",categories:["记录","Python","一些模块方法"],tags:[null],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/03.Python/04.%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9D%97%E6%96%B9%E6%B3%95/04.configparser&json%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&json%E6%96%87%E4%BB%B6.html",relativePath:"03.记录/03.Python/04.一些模块方法/04.configparser&json读取配置文件&json文件.md",key:"v-49a516bf",path:"/pages/2f1c24/",headers:[{level:2,title:"配置文件相关",slug:"配置文件相关",normalizedTitle:"配置文件相关",charIndex:2},{level:3,title:"ini文件",slug:"ini文件",normalizedTitle:"ini文件",charIndex:13},{level:3,title:"json文件",slug:"json文件",normalizedTitle:"json文件",charIndex:312}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"配置文件相关 ini文件 json文件",content:"# 配置文件相关\n\n\n# ini文件\n\n * 配置文件： [mylog]\n * name = mylog\n * level = DEBUG\n * ilename = log.txt\n\nfrom configparser import ConfigParser\n# 创建conf对象\nconf = ConfigParser()\n# 读取相关配置文件\nconf.read('path')\n# 获取配置项的值,get 方法传入配置块的名称 和 配置项的名称\nlevel = conf.get('mylog','level')\nprint(level)\n# level=DEBUG\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# json文件\n\nimport json\n# 打开并读取json文件\nwith open('path','权限',encoding='utf-8') as f:\n  data = json.load(f)\nprint(data)\n# data=被转化为pthon的json字符串，data=dict\n# 如json字符串中,对象=字典,数组=列表,true=True,null=None,false=False 前者为json字符串中的表示形式，后者为python\n\n# 将data转换为json字符串，data=str\njson.dumps(data)\n# 将data转换为python数据，data=dict\njson.loads(data)\n\n# 总结：\n# 1.load()读取json文件转换为python数据\n# 2.dumps()将python数据转换为json字符串\n# 3.loads()将json字符串转换为python数据\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",normalizedContent:"# 配置文件相关\n\n\n# ini文件\n\n * 配置文件： [mylog]\n * name = mylog\n * level = debug\n * ilename = log.txt\n\nfrom configparser import configparser\n# 创建conf对象\nconf = configparser()\n# 读取相关配置文件\nconf.read('path')\n# 获取配置项的值,get 方法传入配置块的名称 和 配置项的名称\nlevel = conf.get('mylog','level')\nprint(level)\n# level=debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# json文件\n\nimport json\n# 打开并读取json文件\nwith open('path','权限',encoding='utf-8') as f:\n  data = json.load(f)\nprint(data)\n# data=被转化为pthon的json字符串，data=dict\n# 如json字符串中,对象=字典,数组=列表,true=true,null=none,false=false 前者为json字符串中的表示形式，后者为python\n\n# 将data转换为json字符串，data=str\njson.dumps(data)\n# 将data转换为python数据，data=dict\njson.loads(data)\n\n# 总结：\n# 1.load()读取json文件转换为python数据\n# 2.dumps()将python数据转换为json字符串\n# 3.loads()将json字符串转换为python数据\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n",charsets:{cjk:!0}},{title:"接口测试",frontmatter:{title:"接口测试",date:"2021-08-17T13:22:08.000Z",permalink:"/pages/a7e63e/",categories:["记录","测试","接口测试"],titleTag:"原创",tags:[null]},regularPath:"/03.%E8%AE%B0%E5%BD%95/04.%E6%B5%8B%E8%AF%95/01.%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/01.%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95.html",relativePath:"03.记录/04.测试/01.接口测试/01.接口测试.md",key:"v-075dd83a",path:"/pages/a7e63e/",headers:[{level:3,title:"有接口文档/无接口文档时,如何进行接口测试",slug:"有接口文档-无接口文档时-如何进行接口测试",normalizedTitle:"有接口文档/无接口文档时,如何进行接口测试",charIndex:2},{level:3,title:"做借口测试需要的接口信息",slug:"做借口测试需要的接口信息",normalizedTitle:"做借口测试需要的接口信息",charIndex:92},{level:3,title:"GET&POST",slug:"get-post",normalizedTitle:"get&amp;post",charIndex:null},{level:3,title:"接口测试用例设计",slug:"接口测试用例设计",normalizedTitle:"接口测试用例设计",charIndex:406}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"有接口文档/无接口文档时,如何进行接口测试 做借口测试需要的接口信息 GET&POST 接口测试用例设计",content:"# 有接口文档/无接口文档时,如何进行接口测试\n\n有接口文档：postman，jmeter\n\n无接口文档：fiddler抓包，web端也可以直接F12（效率低，参数抓不完全）\n\n\n# 做借口测试需要的接口信息\n\n 1. 接口名称\n 2. 接口访问地址\n 3. 接口请求方式(get,post)\n 4. 传入参数\n 5. 服务器返回结果\n\n\n# GET&POST\n\n 1. get请求方式\n    * http:主机地址:端口号/text/text_01/模块/接口名?参数1:XXX&参数2:XXX\n 2. post请求方式\n    * http:主机地址:端口号/text/text_01/模块/接口名\n    * body体:参数1:XXX&参数2:XXX\n 3. 区别 get向服务器获取数据 (快) 参数拼接在url中---不安全 post向服务器传送数据 (慢) 参数在body体中---安全\n\n\n# 接口测试用例设计\n\n和正常功能用例设计思路一样\n\n 1. 考虑接口的正常调用，输入正常参数，检查接口返回的响应结果跟接口文档预期是否一致，包括status(状态),code等\n 2. 考虑接口的异常验证，类型，必填值，同步考虑边界等如传递类型错误，id支持整数是否支持小数or字符串，过大或为负数，接口是否能处理\n 3. 业务规则验证，如权限不够无法修改其他任务\n 4. 接口安全性验证，用户相关信息是否加密（查数据库）\n 5. 接口性能测试",normalizedContent:"# 有接口文档/无接口文档时,如何进行接口测试\n\n有接口文档：postman，jmeter\n\n无接口文档：fiddler抓包，web端也可以直接f12（效率低，参数抓不完全）\n\n\n# 做借口测试需要的接口信息\n\n 1. 接口名称\n 2. 接口访问地址\n 3. 接口请求方式(get,post)\n 4. 传入参数\n 5. 服务器返回结果\n\n\n# get&post\n\n 1. get请求方式\n    * http:主机地址:端口号/text/text_01/模块/接口名?参数1:xxx&参数2:xxx\n 2. post请求方式\n    * http:主机地址:端口号/text/text_01/模块/接口名\n    * body体:参数1:xxx&参数2:xxx\n 3. 区别 get向服务器获取数据 (快) 参数拼接在url中---不安全 post向服务器传送数据 (慢) 参数在body体中---安全\n\n\n# 接口测试用例设计\n\n和正常功能用例设计思路一样\n\n 1. 考虑接口的正常调用，输入正常参数，检查接口返回的响应结果跟接口文档预期是否一致，包括status(状态),code等\n 2. 考虑接口的异常验证，类型，必填值，同步考虑边界等如传递类型错误，id支持整数是否支持小数or字符串，过大或为负数，接口是否能处理\n 3. 业务规则验证，如权限不够无法修改其他任务\n 4. 接口安全性验证，用户相关信息是否加密（查数据库）\n 5. 接口性能测试",charsets:{cjk:!0}},{title:"threeday-测试需求分析",frontmatter:{title:"threeday-测试需求分析",date:"2022-07-20T21:58:22.000Z",permalink:"/pages/65bf04/",categories:["记录","测试学习笔记"],tags:[null]},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/03.threeday-%E6%B5%8B%E8%AF%95%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90.html",relativePath:"03.记录/05.测试学习笔记/03.threeday-测试需求分析.md",key:"v-536eeaee",path:"/pages/65bf04/",headers:[{level:2,title:"什么是软件测试需求",slug:"什么是软件测试需求",normalizedTitle:"什么是软件测试需求",charIndex:2},{level:2,title:"软件测试需求的必要性",slug:"软件测试需求的必要性",normalizedTitle:"软件测试需求的必要性",charIndex:242},{level:2,title:"如何对软件测试需求进行分析（重点）/拿到一个新的项目后，应该怎么开展测试工作？",slug:"如何对软件测试需求进行分析-重点-拿到一个新的项目后-应该怎么开展测试工作",normalizedTitle:"如何对软件测试需求进行分析（重点）/拿到一个新的项目后，应该怎么开展测试工作？",charIndex:257},{level:5,title:"1. 先了解这是一个什么项目？电商？银行？，再了解项目结构，C/S? B/S? 然后看涉及到哪些端？pc？ios？android？h5？小程序？大概的业务逻辑是什么？对业务流程做一个整体的把握",slug:"_1-先了解这是一个什么项目-电商-银行-再了解项目结构-c-s-b-s-然后看涉及到哪些端-pc-ios-android-h5-小程序-大概的业务逻辑是什么-对业务流程做一个整体的把握",normalizedTitle:"1. 先了解这是一个什么项目？电商？银行？，再了解项目结构，c/s? b/s? 然后看涉及到哪些端？pc？ios？android？h5？小程序？大概的业务逻辑是什么？对业务流程做一个整体的把握",charIndex:300},{level:5,title:"2. 细化分析，分模块，约束条件，测试要点，把具体的测试点列出来，正常场景+异常场景",slug:"_2-细化分析-分模块-约束条件-测试要点-把具体的测试点列出来-正常场景-异常场景",normalizedTitle:"2. 细化分析，分模块，约束条件，测试要点，把具体的测试点列出来，正常场景+异常场景",charIndex:400},{level:5,title:"3. 功能之间的模块交互测试",slug:"_3-功能之间的模块交互测试",normalizedTitle:"3. 功能之间的模块交互测试",charIndex:446},{level:5,title:"4. 非功能的测试，兼容性，易用性，界面，性能，安全",slug:"_4-非功能的测试-兼容性-易用性-界面-性能-安全",normalizedTitle:"4. 非功能的测试，兼容性，易用性，界面，性能，安全",charIndex:464},{level:3,title:"测试点思路",slug:"测试点思路",normalizedTitle:"测试点思路",charIndex:511}],lastUpdated:"2022/7/21 00:34:47",lastUpdatedTimestamp:1658334887e3,headersStr:"什么是软件测试需求 软件测试需求的必要性 如何对软件测试需求进行分析（重点）/拿到一个新的项目后，应该怎么开展测试工作？ 1. 先了解这是一个什么项目？电商？银行？，再了解项目结构，C/S? B/S? 然后看涉及到哪些端？pc？ios？android？h5？小程序？大概的业务逻辑是什么？对业务流程做一个整体的把握 2. 细化分析，分模块，约束条件，测试要点，把具体的测试点列出来，正常场景+异常场景 3. 功能之间的模块交互测试 4. 非功能的测试，兼容性，易用性，界面，性能，安全 测试点思路",content:"# 什么是软件测试需求\n\n项目立项--\x3e项目需求分析--\x3e测试计划--\x3e测试设计（1.测试需求分析 2.测试用例）--\x3e测试执行--\x3e测试评估--\x3e项目结束\n需求文档：产品经理收集、市场调研\n测试--分析需求文档--怎么测试？测试什么内容？测试点？\n为什么需要测试需求？ 明确测试需求，才能知道测试什么内容，怎么去测试\n测试什么内容？---测试的范围：自己负责的模块 怎么测试？---测试方法（用例设计）和 工具（接口/性能/数据库）\n什么时候开始测试？--- 测试时间评估\n\n\n# 软件测试需求的必要性\n\n\n# 如何对软件测试需求进行分析（重点）/拿到一个新的项目后，应该怎么开展测试工作？\n\n# 1. 先了解这是一个什么项目？电商？银行？，再了解项目结构，C/S? B/S? 然后看涉及到哪些端？pc？ios？android？h5？小程序？大概的业务逻辑是什么？对业务流程做一个整体的把握\n\n# 2. 细化分析，分模块，约束条件，测试要点，把具体的测试点列出来，正常场景+异常场景\n\n# 3. 功能之间的模块交互测试\n\n# 4. 非功能的测试，兼容性，易用性，界面，性能，安全\n\n按照以上4个步骤开展测试工作\n\n\n# 测试点思路\n\n 1. 正常功能\n 2. 单个功能验证 （数据长度，类型，必填，隐形需求）\n 3. 功能交互\n 4. 非功能",normalizedContent:"# 什么是软件测试需求\n\n项目立项--\x3e项目需求分析--\x3e测试计划--\x3e测试设计（1.测试需求分析 2.测试用例）--\x3e测试执行--\x3e测试评估--\x3e项目结束\n需求文档：产品经理收集、市场调研\n测试--分析需求文档--怎么测试？测试什么内容？测试点？\n为什么需要测试需求？ 明确测试需求，才能知道测试什么内容，怎么去测试\n测试什么内容？---测试的范围：自己负责的模块 怎么测试？---测试方法（用例设计）和 工具（接口/性能/数据库）\n什么时候开始测试？--- 测试时间评估\n\n\n# 软件测试需求的必要性\n\n\n# 如何对软件测试需求进行分析（重点）/拿到一个新的项目后，应该怎么开展测试工作？\n\n# 1. 先了解这是一个什么项目？电商？银行？，再了解项目结构，c/s? b/s? 然后看涉及到哪些端？pc？ios？android？h5？小程序？大概的业务逻辑是什么？对业务流程做一个整体的把握\n\n# 2. 细化分析，分模块，约束条件，测试要点，把具体的测试点列出来，正常场景+异常场景\n\n# 3. 功能之间的模块交互测试\n\n# 4. 非功能的测试，兼容性，易用性，界面，性能，安全\n\n按照以上4个步骤开展测试工作\n\n\n# 测试点思路\n\n 1. 正常功能\n 2. 单个功能验证 （数据长度，类型，必填，隐形需求）\n 3. 功能交互\n 4. 非功能",charsets:{cjk:!0}},{title:"twoday-软件的生命周期&测试流程",frontmatter:{title:"twoday-软件的生命周期&测试流程",date:"2022-07-15T16:04:54.000Z",permalink:"/pages/08c68a/",categories:["记录","测试学习笔记"],tags:[null],titleTag:"那必须是我了"},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/02.twoday-%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F&%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.html",relativePath:"03.记录/05.测试学习笔记/02.twoday-软件的生命周期&测试流程.md",key:"v-315eaca2",path:"/pages/08c68a/",headers:[{level:2,title:"软件生命周期",slug:"软件生命周期",normalizedTitle:"软件生命周期",charIndex:2},{level:2,title:"软件生命周期模型",slug:"软件生命周期模型",normalizedTitle:"软件生命周期模型",charIndex:42},{level:2,title:"软件测试流程",slug:"软件测试流程",normalizedTitle:"软件测试流程",charIndex:530}],excerpt:'<h2 id="软件生命周期"><a class="header-anchor" href="#软件生命周期">#</a> 软件生命周期</h2>\n<p>软件生命周期是软件开始研制最终废弃不用所经历的各个阶段</p>\n',lastUpdated:"2022/7/15 17:31:49",lastUpdatedTimestamp:1657877509e3,headersStr:"软件生命周期 软件生命周期模型 软件测试流程",content:"# 软件生命周期\n\n软件生命周期是软件开始研制最终废弃不用所经历的各个阶段\n\n\n# 软件生命周期模型\n\n瀑布模型\n\n 1. 问题定义及规划：确定软件的开发目的和可行性，制定项目总体开发\n\n 2. 需求分析：在软件开发可行的情况下，对软件需要实现的各个功能进行详细的分析，明确客户的需求，输出需求规格说明书 ，提交评审\n\n 3. 设计：把需求分析得到的结果转换为软件结构和数据结构，形成系统架构\n\n 4. 编码：按照设计好的详细模块功能表，编写出计算机可运行的程序代码\n\n 5. 测试：单元测试（主白盒，开发自测）-集成测试（主灰盒，开发+测试）-系统测试（主黑盒，测试根据写好的测试用例独立完成）-验收测试（甲方/ 用户）\n\n 6. 运行维护：纠错性维护和改进性维护\n\n特点：固定次序，具有顺序性和依赖性，目前不用\n\nV模型\n\n 1. 开发和测试并行，提高开发效率(测试左移)\n\n 2. 系统测试用例=====需求规格说明书\n\n 3. 集成测试用例根据概要设计中模块功能及接口等实现方法编写出来\n    \n\n敏捷开发模型\n\n 1. 以用户需求为核心\n\n 2. 可分割为多个独立运行的小项目，快速迭代，收集用户需求\n\n 3. 弱化文档，强调人之间的沟通\n\n\n# 软件测试流程\n\n 1. 测试需求分析阶段：\n    阅读需求，理解需求，对业务的学习，分析需求点 ，参与需求评审会\n\n 2. 测试计划阶段：\n    以写测试计划为主，参考需求规格说明书和项目总体计划\n    内容：测试的范围，进度安排,人力物力的分配,整体测试策略的制定,风险评估和规避措施等 一般由测试负责人编写\n\n 3. 测试设计阶段：\n    写测试用例为主，会参考需求文档（原型图）,有不明确的及时和开发，产品沟通。\n    用例编写完后会进行用例评审（敏捷开发可能没有）\n\n 4. 测试执行阶段：\n    首先搭建测试环境，执行预测（冒烟测试）来确定当前版本是否可测\n    预测通过将正式进入系统测试，遇到问题提交到bug管理平台并追踪，直至被测软件达到测试需求要求，无重大bug，测试结束\n\n 5. 测试评估阶段：\n    出测试报告，对测试的整个过程和版本质量做一个详细的评估。确认是否可上线。",normalizedContent:"# 软件生命周期\n\n软件生命周期是软件开始研制最终废弃不用所经历的各个阶段\n\n\n# 软件生命周期模型\n\n瀑布模型\n\n 1. 问题定义及规划：确定软件的开发目的和可行性，制定项目总体开发\n\n 2. 需求分析：在软件开发可行的情况下，对软件需要实现的各个功能进行详细的分析，明确客户的需求，输出需求规格说明书 ，提交评审\n\n 3. 设计：把需求分析得到的结果转换为软件结构和数据结构，形成系统架构\n\n 4. 编码：按照设计好的详细模块功能表，编写出计算机可运行的程序代码\n\n 5. 测试：单元测试（主白盒，开发自测）-集成测试（主灰盒，开发+测试）-系统测试（主黑盒，测试根据写好的测试用例独立完成）-验收测试（甲方/ 用户）\n\n 6. 运行维护：纠错性维护和改进性维护\n\n特点：固定次序，具有顺序性和依赖性，目前不用\n\nv模型\n\n 1. 开发和测试并行，提高开发效率(测试左移)\n\n 2. 系统测试用例=====需求规格说明书\n\n 3. 集成测试用例根据概要设计中模块功能及接口等实现方法编写出来\n    \n\n敏捷开发模型\n\n 1. 以用户需求为核心\n\n 2. 可分割为多个独立运行的小项目，快速迭代，收集用户需求\n\n 3. 弱化文档，强调人之间的沟通\n\n\n# 软件测试流程\n\n 1. 测试需求分析阶段：\n    阅读需求，理解需求，对业务的学习，分析需求点 ，参与需求评审会\n\n 2. 测试计划阶段：\n    以写测试计划为主，参考需求规格说明书和项目总体计划\n    内容：测试的范围，进度安排,人力物力的分配,整体测试策略的制定,风险评估和规避措施等 一般由测试负责人编写\n\n 3. 测试设计阶段：\n    写测试用例为主，会参考需求文档（原型图）,有不明确的及时和开发，产品沟通。\n    用例编写完后会进行用例评审（敏捷开发可能没有）\n\n 4. 测试执行阶段：\n    首先搭建测试环境，执行预测（冒烟测试）来确定当前版本是否可测\n    预测通过将正式进入系统测试，遇到问题提交到bug管理平台并追踪，直至被测软件达到测试需求要求，无重大bug，测试结束\n\n 5. 测试评估阶段：\n    出测试报告，对测试的整个过程和版本质量做一个详细的评估。确认是否可上线。",charsets:{cjk:!0}},{title:"oneday-测试基础-软件测试的定义及分类",frontmatter:{title:"oneday-测试基础-软件测试的定义及分类",date:"2022-07-12T22:38:46.000Z",permalink:"/pages/040e07/",categories:["记录","测试学习笔记"],tags:[null],titleTag:"原创原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/01.oneday-%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80-%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E5%88%86%E7%B1%BB.html",relativePath:"03.记录/05.测试学习笔记/01.oneday-测试基础-软件测试的定义及分类.md",key:"v-136aae16",path:"/pages/040e07/",headers:[{level:2,title:"软件测试的定义&目的",slug:"软件测试的定义-目的",normalizedTitle:"软件测试的定义&amp;目的",charIndex:null},{level:4,title:"1. 定义",slug:"_1-定义",normalizedTitle:"1. 定义",charIndex:16},{level:4,title:"2. 目的",slug:"_2-目的",normalizedTitle:"2. 目的",charIndex:53},{level:2,title:"软件测试的分类",slug:"软件测试的分类",normalizedTitle:"软件测试的分类",charIndex:116},{level:4,title:"1. 按测试技术划分",slug:"_1-按测试技术划分",normalizedTitle:"1. 按测试技术划分",charIndex:127},{level:4,title:"2. 按被测试对象是否运行划分",slug:"_2-按被测试对象是否运行划分",normalizedTitle:"2. 按被测试对象是否运行划分",charIndex:238},{level:4,title:"3. 按不同测试手段划分",slug:"_3-按不同测试手段划分",normalizedTitle:"3. 按不同测试手段划分",charIndex:307},{level:4,title:"4. 按测试包含的内容划分",slug:"_4-按测试包含的内容划分",normalizedTitle:"4. 按测试包含的内容划分",charIndex:355},{level:4,title:"5. 按测试阶段",slug:"_5-按测试阶段",normalizedTitle:"5. 按测试阶段",charIndex:448},{level:4,title:"6. 其他",slug:"_6-其他",normalizedTitle:"6. 其他",charIndex:507},{level:2,title:"应用软件架构",slug:"应用软件架构",normalizedTitle:"应用软件架构",charIndex:695}],excerpt:'<h2 id="软件测试的定义-目的"><a class="header-anchor" href="#软件测试的定义-目的">#</a> 软件测试的定义&amp;目的</h2>\n<h4 id="_1-定义"><a class="header-anchor" href="#_1-定义">#</a> 1. <strong>定义</strong></h4>\n<ul>\n<li>按规定手段执行程序的过程叫软件测试（个人理解）</li>\n</ul>\n<h4 id="_2-目的"><a class="header-anchor" href="#_2-目的">#</a> 2. <strong>目的</strong></h4>\n<ul>\n<li>尽可能多的发现程序中代码或业务逻辑错误</li>\n<li>检验产品是否符合需求（prd）</li>\n<li>提高用户体验</li>\n</ul>\n',lastUpdated:"2022/7/15 17:31:49",lastUpdatedTimestamp:1657877509e3,headersStr:"软件测试的定义&目的 1. 定义 2. 目的 软件测试的分类 1. 按测试技术划分 2. 按被测试对象是否运行划分 3. 按不同测试手段划分 4. 按测试包含的内容划分 5. 按测试阶段 6. 其他 应用软件架构",content:"# 软件测试的定义&目的\n\n# 1. 定义\n\n * 按规定手段执行程序的过程叫软件测试（个人理解）\n\n# 2. 目的\n\n * 尽可能多的发现程序中代码或业务逻辑错误\n * 检验产品是否符合需求（prd）\n * 提高用户体验\n\n\n# 软件测试的分类\n\n# 1. 按测试技术划分\n\n * 黑盒测试\n   * ps:不关注内部逻辑 只关注输入输出\n * 白盒测试\n   * ps：不仅关注输入输出，同时关注内部运行逻辑\n * 灰盒测试\n   * ps:介于黑盒，白盒两者之间\n\n# 2. 按被测试对象是否运行划分\n\n * 动态测试\n   * ps:界面发生变化\n * 静态测试\n   * ps：文档检查，代码走查\n\n# 3. 按不同测试手段划分\n\n * 手工测试\n * 自动化测试\n   * ps：工具+代码\n\n# 4. 按测试包含的内容划分\n\n * 功能\n   * 功能测试\n * 非功能\n   * 界面测试\n   * 兼容性测试\n   * 易用性测试\n   * 性能测试\n   * 安全测试\n\n# 5. 按测试阶段\n\n * 单元测试\n * 系统测试\n * 集成测试\n * 验收测试\n * α测试\n * β测试\n\n# 6. 其他\n\n * 回归测试\n   * ps1：提交bug开发修复后需回归，回归范围--bug涉及相关功能都需回归\n   * ps2：代码变动/需求变更需回归，回归范围--所有功能点\n   * ps3：系统测试，上线前需回归，回归范围--所有功能点\n * 冒烟测试\n   * ps：针对主流程的测试，冒烟不通过，无需进行后续测试工作，打回给开发\n * 探索/自由测试\n\n\n# 应用软件架构\n\nB/S\n只需要浏览器就可以访问服务\n\nC/S\n需要安装客户端才可访问服务的\n如电脑客户端(.exe),手机客户端(.apk)",normalizedContent:"# 软件测试的定义&目的\n\n# 1. 定义\n\n * 按规定手段执行程序的过程叫软件测试（个人理解）\n\n# 2. 目的\n\n * 尽可能多的发现程序中代码或业务逻辑错误\n * 检验产品是否符合需求（prd）\n * 提高用户体验\n\n\n# 软件测试的分类\n\n# 1. 按测试技术划分\n\n * 黑盒测试\n   * ps:不关注内部逻辑 只关注输入输出\n * 白盒测试\n   * ps：不仅关注输入输出，同时关注内部运行逻辑\n * 灰盒测试\n   * ps:介于黑盒，白盒两者之间\n\n# 2. 按被测试对象是否运行划分\n\n * 动态测试\n   * ps:界面发生变化\n * 静态测试\n   * ps：文档检查，代码走查\n\n# 3. 按不同测试手段划分\n\n * 手工测试\n * 自动化测试\n   * ps：工具+代码\n\n# 4. 按测试包含的内容划分\n\n * 功能\n   * 功能测试\n * 非功能\n   * 界面测试\n   * 兼容性测试\n   * 易用性测试\n   * 性能测试\n   * 安全测试\n\n# 5. 按测试阶段\n\n * 单元测试\n * 系统测试\n * 集成测试\n * 验收测试\n * α测试\n * β测试\n\n# 6. 其他\n\n * 回归测试\n   * ps1：提交bug开发修复后需回归，回归范围--bug涉及相关功能都需回归\n   * ps2：代码变动/需求变更需回归，回归范围--所有功能点\n   * ps3：系统测试，上线前需回归，回归范围--所有功能点\n * 冒烟测试\n   * ps：针对主流程的测试，冒烟不通过，无需进行后续测试工作，打回给开发\n * 探索/自由测试\n\n\n# 应用软件架构\n\nb/s\n只需要浏览器就可以访问服务\n\nc/s\n需要安装客户端才可访问服务的\n如电脑客户端(.exe),手机客户端(.apk)",charsets:{cjk:!0}},{title:"jmeter",frontmatter:{title:"jmeter",date:"2021-06-20T09:32:09.000Z",permalink:"/pages/7ab77c/",categories:["记录","测试","接口测试"],tags:["jmeter"],titleTag:"原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/04.%E6%B5%8B%E8%AF%95/01.%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/02.jmeter.html",relativePath:"03.记录/04.测试/01.接口测试/02.jmeter.md",key:"v-19490270",path:"/pages/7ab77c/",headers:[{level:3,title:"遇到得一些问题",slug:"遇到得一些问题",normalizedTitle:"遇到得一些问题",charIndex:2},{level:3,title:"jmeter进行接口测试的原理",slug:"jmeter进行接口测试的原理",normalizedTitle:"jmeter进行接口测试的原理",charIndex:106},{level:3,title:"jmeter简单请求http协议接口使用",slug:"jmeter简单请求http协议接口使用",normalizedTitle:"jmeter简单请求http协议接口使用",charIndex:169},{level:3,title:"关于jmeter重定向到登录",slug:"关于jmeter重定向到登录",normalizedTitle:"关于jmeter重定向到登录",charIndex:805},{level:3,title:"JDBC",slug:"jdbc",normalizedTitle:"jdbc",charIndex:1142},{level:3,title:"参数化方式",slug:"参数化方式",normalizedTitle:"参数化方式",charIndex:1861}],excerpt:'<h3 id="遇到得一些问题"><a class="header-anchor" href="#遇到得一些问题">#</a> 遇到得一些问题</h3>\n<ol>\n<li>响应数据返回的中文显示乱码\n<ul>\n<li>解决：添加后置处理器BeanShell PostProcessor，输入prev.setDataEncoding(&quot;utf-8&quot;);</li>\n</ul>\n</li>\n</ol>\n',lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"遇到得一些问题 jmeter进行接口测试的原理 jmeter简单请求http协议接口使用 关于jmeter重定向到登录 JDBC 参数化方式",content:'# 遇到得一些问题\n\n 1. 响应数据返回的中文显示乱码\n    * 解决：添加后置处理器BeanShell PostProcessor，输入prev.setDataEncoding("utf-8");\n\n\n# jmeter进行接口测试的原理\n\n 1. 用工具去模拟客户端发起请求，服务器接受请求返回结果，工具模拟客户端接受请求\n\n\n# jmeter简单请求http协议接口使用\n\n 1. jmeter for mac 配置\n    * 下载java JDK 推荐8，版本太高jmeter无法保存文件\n    * 下载jmeter\n    * sudu spctl --master-disable---\x3e系统偏好设置----\x3e安全性隐私---\x3e通用---\x3e任何来源\n 2. jmeter 使用\n    1. 创建线程组\n       * 线程数 == 并发数 普通功能测试1，涉及性能按照需求更改\n       * 循环次数 针对每个线程的循环\n    2. 添加sampler(采样器)\n       * 选择协议(http)\n       * 填写协议(http) 默认：http\n       * 服务器 or ip\n       * 端口号 不填默认：80\n       * 请求方法(get)\n       * 路径 栗子:http:主机地址:端口号/text/text_01/模块/接口名?参数1:XXX&参数2:XXX 路径为:/text/text_01\n       * Content encoding (编码类型) utf-8\n       * 参数 复制后点Add from Clipboard可以直接粘贴过来\n    3. 如果是post，以json方式传参，添加HTTP信息头管理器配置，Content-Type application/json\n    4. 查看结果树\n\n\n# 关于jmeter重定向到登录\n\n 1. 流程：注册-登录-操作，此时第三步骤会失败并提示你要登录再操作\n 2. 原因：在登陆时服务器会创建一个session会话来保存登录的用户信息，并返回这个会话的编号，存储在set-cookie里，按上述流程登录后返回的cookie并没有给到操作这一步，所以服务器认为是未登录的人直接进行此操作，重定向到登录\n 3. 解决办法：把cookie传给第三步操作，添加jmeter中的配置元件HTTP cookie管理器，此时流程为HTTP cookice管理器-注册-登录-操作====>操作成功\n 4. 如登录后退出登录,会向服务器发送个请求，服务器会把此sessionid过期或删除，此时再带着cookie登录，也会重定向到登录\n\n\n# JDBC\n\n 1. jdbc就是针对数据库的请求\n 2. 添加配置元件 JDBC Connection Configuration 主要用来配置数据库连接，以下以以mysql为例\n    * 添加mysql-connector-java包，下载后放到jmeter的lib目录，在测试计划中，选择此jar包\n    * \n    * 填写Variable Name，此处需与下方JDBC request Variable Name一致\n    * 填写database URL jdbc:mysql://ip:端口/数据库名\n    * 配置驱动类 mysql的为 com.mysql.jdbc.Driver\n    * username 数据库登录用户名\n    * password 数据库密码\n    * \n 3. 添加采样器 JDBC request\n    * 填写Variable Name，需与JDBC Connection Configuration Variable name一致\n    * 选择Query Type 对应增删改查等\n    * 编写sql语句 select id，name，address from text_study;\n    * \n 4. 添加察看结果叔\n    * 看到本机地址下mysql中text_01库text_study表里id，name，address字段信息\n    * \n 5. 用JDBC请求而不去直接查库原因\n    * 为了测试串联场景，例如登录后需要某些id才能进行操作，此时直接用jdbc去查，或者是主流程的验证\n    * 或者是并发场景，无法手动去查的时候\n\n\n# 参数化方式\n\n 1. 用户定义的变量\n    * 添加配置元件--用户定义的变量，引用方法：${变量名}\n 2. 配置元件CSV Data Set Config 文档',normalizedContent:'# 遇到得一些问题\n\n 1. 响应数据返回的中文显示乱码\n    * 解决：添加后置处理器beanshell postprocessor，输入prev.setdataencoding("utf-8");\n\n\n# jmeter进行接口测试的原理\n\n 1. 用工具去模拟客户端发起请求，服务器接受请求返回结果，工具模拟客户端接受请求\n\n\n# jmeter简单请求http协议接口使用\n\n 1. jmeter for mac 配置\n    * 下载java jdk 推荐8，版本太高jmeter无法保存文件\n    * 下载jmeter\n    * sudu spctl --master-disable---\x3e系统偏好设置----\x3e安全性隐私---\x3e通用---\x3e任何来源\n 2. jmeter 使用\n    1. 创建线程组\n       * 线程数 == 并发数 普通功能测试1，涉及性能按照需求更改\n       * 循环次数 针对每个线程的循环\n    2. 添加sampler(采样器)\n       * 选择协议(http)\n       * 填写协议(http) 默认：http\n       * 服务器 or ip\n       * 端口号 不填默认：80\n       * 请求方法(get)\n       * 路径 栗子:http:主机地址:端口号/text/text_01/模块/接口名?参数1:xxx&参数2:xxx 路径为:/text/text_01\n       * content encoding (编码类型) utf-8\n       * 参数 复制后点add from clipboard可以直接粘贴过来\n    3. 如果是post，以json方式传参，添加http信息头管理器配置，content-type application/json\n    4. 查看结果树\n\n\n# 关于jmeter重定向到登录\n\n 1. 流程：注册-登录-操作，此时第三步骤会失败并提示你要登录再操作\n 2. 原因：在登陆时服务器会创建一个session会话来保存登录的用户信息，并返回这个会话的编号，存储在set-cookie里，按上述流程登录后返回的cookie并没有给到操作这一步，所以服务器认为是未登录的人直接进行此操作，重定向到登录\n 3. 解决办法：把cookie传给第三步操作，添加jmeter中的配置元件http cookie管理器，此时流程为http cookice管理器-注册-登录-操作====>操作成功\n 4. 如登录后退出登录,会向服务器发送个请求，服务器会把此sessionid过期或删除，此时再带着cookie登录，也会重定向到登录\n\n\n# jdbc\n\n 1. jdbc就是针对数据库的请求\n 2. 添加配置元件 jdbc connection configuration 主要用来配置数据库连接，以下以以mysql为例\n    * 添加mysql-connector-java包，下载后放到jmeter的lib目录，在测试计划中，选择此jar包\n    * \n    * 填写variable name，此处需与下方jdbc request variable name一致\n    * 填写database url jdbc:mysql://ip:端口/数据库名\n    * 配置驱动类 mysql的为 com.mysql.jdbc.driver\n    * username 数据库登录用户名\n    * password 数据库密码\n    * \n 3. 添加采样器 jdbc request\n    * 填写variable name，需与jdbc connection configuration variable name一致\n    * 选择query type 对应增删改查等\n    * 编写sql语句 select id，name，address from text_study;\n    * \n 4. 添加察看结果叔\n    * 看到本机地址下mysql中text_01库text_study表里id，name，address字段信息\n    * \n 5. 用jdbc请求而不去直接查库原因\n    * 为了测试串联场景，例如登录后需要某些id才能进行操作，此时直接用jdbc去查，或者是主流程的验证\n    * 或者是并发场景，无法手动去查的时候\n\n\n# 参数化方式\n\n 1. 用户定义的变量\n    * 添加配置元件--用户定义的变量，引用方法：${变量名}\n 2. 配置元件csv data set config 文档',charsets:{cjk:!0}},{title:"fourday-测试用例四大金刚",frontmatter:{title:"fourday-测试用例四大金刚",date:"2022-07-21T21:29:26.000Z",permalink:"/pages/1b8a63/",categories:["记录","测试学习笔记"],tags:[null]},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/04.fourday-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%9B%9B%E5%A4%A7%E9%87%91%E5%88%9A.html",relativePath:"03.记录/05.测试学习笔记/04.fourday-测试用例四大金刚.md",key:"v-023acc9c",path:"/pages/1b8a63/",headers:[{level:2,title:"等价类划分",slug:"等价类划分",normalizedTitle:"等价类划分",charIndex:2},{level:2,title:"边界值",slug:"边界值",normalizedTitle:"边界值",charIndex:83},{level:2,title:"场景法",slug:"场景法",normalizedTitle:"场景法",charIndex:124},{level:2,title:"错误推断",slug:"错误推断",normalizedTitle:"错误推断",charIndex:381}],lastUpdated:"2022/7/21 22:43:40",lastUpdatedTimestamp:165841462e4,headersStr:"等价类划分 边界值 场景法 错误推断",content:"# 等价类划分\n\n概念：\n等价类是把程序的输入域划分成若干个子集，然后从每个子集中选取有代表性的数据作为测试的输入\n\n 1. 有效等价类\n 2. 无效等价类\n\n\n# 边界值\n\n2点法 3点法 4点法 仅有有效等价类\n7点法 包含无效等价类\n\n\n# 场景法\n\n如何使用场景法：\n\n 1. 画出流程图\n    * 矩形：结果\n    * 菱形：判断\n    * 箭头：流向\n 2. 遍历场景，提取测试用例\n    * 覆盖正常路线，提取正常路线涉及的用例\n    * 走每一个分支，提取正常路线未涉及的用例\n    * 出错步骤重新回到主流程，验证时要多往下走一个步骤 重点：\n      测试流程，流程没问题不代表功能没问题，还需要针对单步的功能进行细化测试\n      所以说，场景法只是补充测试，需要细化测试（等价类，边界值）+ 场景法才算充分的测试\n\n\n# 错误推断\n\n基于经验和直觉推测程序中可能出现的错误\n要素是：经验，知识，直觉",normalizedContent:"# 等价类划分\n\n概念：\n等价类是把程序的输入域划分成若干个子集，然后从每个子集中选取有代表性的数据作为测试的输入\n\n 1. 有效等价类\n 2. 无效等价类\n\n\n# 边界值\n\n2点法 3点法 4点法 仅有有效等价类\n7点法 包含无效等价类\n\n\n# 场景法\n\n如何使用场景法：\n\n 1. 画出流程图\n    * 矩形：结果\n    * 菱形：判断\n    * 箭头：流向\n 2. 遍历场景，提取测试用例\n    * 覆盖正常路线，提取正常路线涉及的用例\n    * 走每一个分支，提取正常路线未涉及的用例\n    * 出错步骤重新回到主流程，验证时要多往下走一个步骤 重点：\n      测试流程，流程没问题不代表功能没问题，还需要针对单步的功能进行细化测试\n      所以说，场景法只是补充测试，需要细化测试（等价类，边界值）+ 场景法才算充分的测试\n\n\n# 错误推断\n\n基于经验和直觉推测程序中可能出现的错误\n要素是：经验，知识，直觉",charsets:{cjk:!0}},{title:"fiveday-测试用例的编写&用例评审",frontmatter:{title:"fiveday-测试用例的编写&用例评审",date:"2022-07-21T22:16:05.000Z",permalink:"/pages/f8d3dd/",categories:["记录","测试学习笔记"],tags:[null]},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/05.fiveday-%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BC%96%E5%86%99&%E7%94%A8%E4%BE%8B%E8%AF%84%E5%AE%A1.html",relativePath:"03.记录/05.测试学习笔记/05.fiveday-测试用例的编写&用例评审.md",key:"v-520a127a",path:"/pages/f8d3dd/",headers:[{level:2,title:"用例8大要素",slug:"用例8大要素",normalizedTitle:"用例8大要素",charIndex:2},{level:2,title:"用例评审",slug:"用例评审",normalizedTitle:"用例评审",charIndex:122}],lastUpdated:"2022/7/21 22:43:40",lastUpdatedTimestamp:165841462e4,headersStr:"用例8大要素 用例评审",content:"# 用例8大要素\n\n 1.  用例编号\n 2.  用例标题\n 3.  测试项目\n 4.  前置条件\n 5.  测试输入\n 6.  操作步骤\n 7.  重要等级\n 8.  预期结果\n 9.  实际结果\n 10. 根据项目添加版本号等信息\n\n\n# 用例评审\n\n 1. 先组内\n 2. 再拉开发，产品一起评审 目的：\n    避免有未覆盖到的测试点或测试条件",normalizedContent:"# 用例8大要素\n\n 1.  用例编号\n 2.  用例标题\n 3.  测试项目\n 4.  前置条件\n 5.  测试输入\n 6.  操作步骤\n 7.  重要等级\n 8.  预期结果\n 9.  实际结果\n 10. 根据项目添加版本号等信息\n\n\n# 用例评审\n\n 1. 先组内\n 2. 再拉开发，产品一起评审 目的：\n    避免有未覆盖到的测试点或测试条件",charsets:{cjk:!0}},{title:"sixday_bug生命周期",frontmatter:{title:"sixday_bug生命周期",date:"2022-07-23T22:42:25.000Z",permalink:"/pages/995ea1/",categories:["记录","测试学习笔记"],tags:[null]},regularPath:"/03.%E8%AE%B0%E5%BD%95/05.%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/06.sixday_bug%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html",relativePath:"03.记录/05.测试学习笔记/06.sixday_bug生命周期.md",key:"v-ceb2af28",path:"/pages/995ea1/",headers:[{level:2,title:"bug生命周期",slug:"bug生命周期",normalizedTitle:"bug生命周期",charIndex:2}],headersStr:"bug生命周期",content:"# bug生命周期",normalizedContent:"# bug生命周期",charsets:{cjk:!0}},{title:"问题合集(更新)",frontmatter:{title:"问题合集(更新)",date:"2022-07-15T10:28:03.000Z",permalink:"/pages/99ef91/",categories:["记录","问题合集"],tags:[null],titleTag:"那必须是原创"},regularPath:"/03.%E8%AE%B0%E5%BD%95/06.%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/01.%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86(%E6%9B%B4%E6%96%B0).html",relativePath:"03.记录/06.问题合集/01.问题合集(更新).md",key:"v-83c0cd92",path:"/pages/99ef91/",headers:[{level:2,title:"问题",slug:"问题",normalizedTitle:"问题",charIndex:2},{level:3,title:"1.什么是软件测试，软件测试的目的是什么",slug:"_1-什么是软件测试-软件测试的目的是什么",normalizedTitle:"1.什么是软件测试，软件测试的目的是什么",charIndex:9},{level:3,title:"2.软件测试分类都有那些",slug:"_2-软件测试分类都有那些",normalizedTitle:"2.软件测试分类都有那些",charIndex:108},{level:3,title:"3.什么是黑盒测试，白盒测试，区别是什么",slug:"_3-什么是黑盒测试-白盒测试-区别是什么",normalizedTitle:"3.什么是黑盒测试，白盒测试，区别是什么",charIndex:354},{level:3,title:"4.生命周期模型包含那些阶段？你们开发的模型是什么？",slug:"_4-生命周期模型包含那些阶段-你们开发的模型是什么",normalizedTitle:"4.生命周期模型包含那些阶段？你们开发的模型是什么？",charIndex:506},{level:3,title:"5.你们公司的开发流程是怎样的？",slug:"_5-你们公司的开发流程是怎样的",normalizedTitle:"5.你们公司的开发流程是怎样的？",charIndex:644},{level:3,title:"6.你们公司的测试流程是怎样的？各个阶段的输出是什么？",slug:"_6-你们公司的测试流程是怎样的-各个阶段的输出是什么",normalizedTitle:"6.你们公司的测试流程是怎样的？各个阶段的输出是什么？",charIndex:736},{level:3,title:"7.开发环境，测试环境，预发布环境，生产环境是什么？你在测试环境后台添加的数据和信息，能够在生产环境看到么？",slug:"_7-开发环境-测试环境-预发布环境-生产环境是什么-你在测试环境后台添加的数据和信息-能够在生产环境看到么",normalizedTitle:"7.开发环境，测试环境，预发布环境，生产环境是什么？你在测试环境后台添加的数据和信息，能够在生产环境看到么？",charIndex:973},{level:3,title:"8.遇到隐形需求怎么办？",slug:"_8-遇到隐形需求怎么办",normalizedTitle:"8.遇到隐形需求怎么办？",charIndex:1212},{level:3,title:"9.给一个带有logo的水杯(A4纸，盆栽，行李箱，电梯，N95口罩)如何测试？",slug:"_9-给一个带有logo的水杯-a4纸-盆栽-行李箱-电梯-n95口罩-如何测试",normalizedTitle:"9.给一个带有logo的水杯(a4纸，盆栽，行李箱，电梯，n95口罩)如何测试？",charIndex:1253},{level:3,title:"10.密码测试点",slug:"_10-密码测试点",normalizedTitle:"10.密码测试点",charIndex:1626},{level:3,title:"11.用例需要评审么？紧急情况下也需要评审么？",slug:"_11-用例需要评审么-紧急情况下也需要评审么",normalizedTitle:"11.用例需要评审么？紧急情况下也需要评审么？",charIndex:1748},{level:3,title:"12.如果被测项目很紧急，来不及写用例怎么办",slug:"_12-如果被测项目很紧急-来不及写用例怎么办",normalizedTitle:"12.如果被测项目很紧急，来不及写用例怎么办",charIndex:1818},{level:3,title:"13.用例有没有优先级？如果一定要有优先级，按什么来划分，有什么作用？",slug:"_13-用例有没有优先级-如果一定要有优先级-按什么来划分-有什么作用",normalizedTitle:"13.用例有没有优先级？如果一定要有优先级，按什么来划分，有什么作用？",charIndex:1873},{level:3,title:"14.如何编写测试用例？",slug:"_14-如何编写测试用例",normalizedTitle:"14.如何编写测试用例？",charIndex:1937},{level:3,title:"15.印象深刻的bug？bug原因 bug如何解决的",slug:"_15-印象深刻的bug-bug原因-bug如何解决的",normalizedTitle:"15.印象深刻的bug？bug原因 bug如何解决的",charIndex:1994},{level:3,title:"16.bug的生命周期",slug:"_16-bug的生命周期",normalizedTitle:"16.bug的生命周期",charIndex:2025},{level:3,title:"17.发现了一个bug，开发不认",slug:"_17-发现了一个bug-开发不认",normalizedTitle:"17.发现了一个bug，开发不认",charIndex:2107},{level:3,title:"18.在发现bug并确认bug的过程中，对复现不高的bug怎么处理？",slug:"_18-在发现bug并确认bug的过程中-对复现不高的bug怎么处理",normalizedTitle:"18.在发现bug并确认bug的过程中，对复现不高的bug怎么处理？",charIndex:2128}],excerpt:'<h2 id="问题"><a class="header-anchor" href="#问题">#</a> 问题</h2>\n<h3 id="_1-什么是软件测试-软件测试的目的是什么"><a class="header-anchor" href="#_1-什么是软件测试-软件测试的目的是什么">#</a> 1.什么是软件测试，软件测试的目的是什么</h3>\n<p><font color=red>软件测试</font>：按规定执行程序的过程是软件测试<br>\n<font color=red>目的</font>：是为了检测产品是否符合需求，尽可能更多的发现程序中存在的错误，提高产品的稳定性，健壮性，用户体验</p>\n',lastUpdated:"2022/7/21 00:34:47",lastUpdatedTimestamp:1658334887e3,headersStr:"问题 1.什么是软件测试，软件测试的目的是什么 2.软件测试分类都有那些 3.什么是黑盒测试，白盒测试，区别是什么 4.生命周期模型包含那些阶段？你们开发的模型是什么？ 5.你们公司的开发流程是怎样的？ 6.你们公司的测试流程是怎样的？各个阶段的输出是什么？ 7.开发环境，测试环境，预发布环境，生产环境是什么？你在测试环境后台添加的数据和信息，能够在生产环境看到么？ 8.遇到隐形需求怎么办？ 9.给一个带有logo的水杯(A4纸，盆栽，行李箱，电梯，N95口罩)如何测试？ 10.密码测试点 11.用例需要评审么？紧急情况下也需要评审么？ 12.如果被测项目很紧急，来不及写用例怎么办 13.用例有没有优先级？如果一定要有优先级，按什么来划分，有什么作用？ 14.如何编写测试用例？ 15.印象深刻的bug？bug原因 bug如何解决的 16.bug的生命周期 17.发现了一个bug，开发不认 18.在发现bug并确认bug的过程中，对复现不高的bug怎么处理？",content:"# 问题\n\n\n# 1.什么是软件测试，软件测试的目的是什么\n\n软件测试：按规定执行程序的过程是软件测试\n目的：是为了检测产品是否符合需求，尽可能更多的发现程序中存在的错误，提高产品的稳定性，健壮性，用户体验\n\n\n# 2.软件测试分类都有那些\n\n按测试手段:          人工，自动化\n按测试阶段:          分为单元测试，集成测试，系统测试，验收测试\n按被测对象是否运行:      静态测试，动态测试\n按测试包含内容:(功能&非功能)⬇\n功能:             功能测试\n非功能:            界面测试，兼容性测试，性能测试，易用性测试，安全测试\n按测试技术分为:        黑盒测试，白盒测试，灰盒测试\n其他的测试方法:        冒烟测试，自由探索测试\n\n\n# 3.什么是黑盒测试，白盒测试，区别是什么\n\n黑盒测试和白盒测试都是测试技术之一，黑盒测试偏功能，白盒测试偏代码走查\n区别：黑盒测试不关注内部逻辑只关注输入输出按规则输入，得到的输出结果符合预期，即正确\n\n白盒测试关注内部逻辑，不仅仅关注输入输出，保证输入输出的正确性的同时，内部处理逻辑也要正确\n\n\n# 4.生命周期模型包含那些阶段？你们开发的模型是什么？\n\n生命周期模型包含：\n\n1.问题定义及规划---\x3e确认开发可行性，有没有市场\n\n2.需求分析---\x3e需求评审，输出需求规格说明书\n\n3.设计\n\n4.编码\n\n5.测试\n\n6.上线/维护\n\n我们的开发模型：\n\nV模型\n\n\n# 5.你们公司的开发流程是怎样的？\n\n首先，参与需求评审，了解需求\n\n然后，依据需求规格说明书对功能进行概要设计和详细设计\n\n最后，按照功能设计进行编码，编写计算机可运行的语言\n\n\n# 6.你们公司的测试流程是怎样的？各个阶段的输出是什么？\n\n首先开需求评审会，输出需求规格说明书\n\n然后测试老大编写测试计划，分配任务\n\n按照分配好的模块，参考需求文档提炼需求点功能点进行用例的编写 同时开发进行开发\n\n开发自测完后说可以提测了，我们首先进行一轮冒烟测试\n\n冒烟测试通过后，开始按照编写的用例执行测试，过程中发现的bug，确认--\x3e指派--\x3e跟进--\x3e修复--\x3e回归\n\n直至无重大bug，符合需求要求，测试结束\n\n编写测试报告，体现测试过程和软件质量\n\n\n# 7.开发环境，测试环境，预发布环境，生产环境是什么？你在测试环境后台添加的数据和信息，能够在生产环境看到么？\n\n开发环境：开发用的环境，一般开发自己用来进行debug调试\n\n测试环境：接近真实用户的环境，测试使用\n\n预发布环境：正式发布前的最后一次测试，功能配置和正式环境高度相仿，避免直接上线出现问题增加成本\n\n生产环境：线上环境，正式环境，所用用户为真实用户\n\n测试环境后台添加的数据和信息，在生产环境看不到，因为他们俩是两套不同的环境，数据存放地址不在同一个地方\n\n\n# 8.遇到隐形需求怎么办？\n\n1）充分理解需求文档\n2）参考同类产品/竞品\n\n\n# 9.给一个带有logo的水杯(A4纸，盆栽，行李箱，电梯，N95口罩)如何测试？\n\n电梯\n功能方面：\n1）单功能方面：能否到达指定楼层(升/降)，到达后能否正常开关门，电梯灯能开关？楼层按钮正常按下？ 2）功能交互：两个人在不同楼层按下电梯，电梯是否会依次停下接人（两人都处于要上行或下行状态）？\n电梯正在下行，人要上行按下按钮电梯是否会停？\n电梯在上行，人要下行按下按钮是否会停？\n单双电梯，按单/双楼层，双/单电梯是否会停？\n\n界面测试：\n广告显示是否正确\n电梯logo显示是否正确\n提示语是否正确\n\n兼容性测试：\n硬件兼容（烟雾警报器），软件兼容，上下楼语音机器人，手势机器人\n\n性能测试：\n承重压力，上升/下降速度，到达楼层停止起伏波动大不大，一定高度落下来内部损伤程度\n\n安全测试： 检测到电车入电梯是否关门，求生装置是否启用\n\n\n# 10.密码测试点\n\n 1. 正向\n\n * 约束条件内密码输入\n\n 2. 反向\n\n * 密码长度\n * 密码类型\n * 非空\n\n 3. 安全\n\n * 前端输入星花加密\n * 前端输入完提交过程中星花加密\n * 后端接受存储数据库星花加密\n\n\n# 11.用例需要评审么？紧急情况下也需要评审么？\n\n需要评审，紧急情况下不会开会评审，邮件方式通知相关人员，邮件回复问题，建议和意见\n\n\n# 12.如果被测项目很紧急，来不及写用例怎么办\n\n先提炼测试点，项目结束后补充完整的测试用例，然后归档\n\n\n# 13.用例有没有优先级？如果一定要有优先级，按什么来划分，有什么作用？\n\n有优先级\n按照功能的重要程度来确定\n作用？？\n\n\n# 14.如何编写测试用例？\n\n 1. 从需求提炼测试点\n 2. 细化测试点，按照等价类边界值场景发反推法等\n\n\n# 15.印象深刻的bug？bug原因 bug如何解决的\n\n\n# 16.bug的生命周期\n\n发现bug--确认bug--指派给对应的开发--跟进--修复--回归--回归通过关闭 延期处理的bug，与产品确认后，做记录备注\n\n\n# 17.发现了一个bug，开发不认\n\n\n# 18.在发现bug并确认bug的过程中，对复现不高的bug怎么处理？",normalizedContent:"# 问题\n\n\n# 1.什么是软件测试，软件测试的目的是什么\n\n软件测试：按规定执行程序的过程是软件测试\n目的：是为了检测产品是否符合需求，尽可能更多的发现程序中存在的错误，提高产品的稳定性，健壮性，用户体验\n\n\n# 2.软件测试分类都有那些\n\n按测试手段:          人工，自动化\n按测试阶段:          分为单元测试，集成测试，系统测试，验收测试\n按被测对象是否运行:      静态测试，动态测试\n按测试包含内容:(功能&非功能)⬇\n功能:             功能测试\n非功能:            界面测试，兼容性测试，性能测试，易用性测试，安全测试\n按测试技术分为:        黑盒测试，白盒测试，灰盒测试\n其他的测试方法:        冒烟测试，自由探索测试\n\n\n# 3.什么是黑盒测试，白盒测试，区别是什么\n\n黑盒测试和白盒测试都是测试技术之一，黑盒测试偏功能，白盒测试偏代码走查\n区别：黑盒测试不关注内部逻辑只关注输入输出按规则输入，得到的输出结果符合预期，即正确\n\n白盒测试关注内部逻辑，不仅仅关注输入输出，保证输入输出的正确性的同时，内部处理逻辑也要正确\n\n\n# 4.生命周期模型包含那些阶段？你们开发的模型是什么？\n\n生命周期模型包含：\n\n1.问题定义及规划---\x3e确认开发可行性，有没有市场\n\n2.需求分析---\x3e需求评审，输出需求规格说明书\n\n3.设计\n\n4.编码\n\n5.测试\n\n6.上线/维护\n\n我们的开发模型：\n\nv模型\n\n\n# 5.你们公司的开发流程是怎样的？\n\n首先，参与需求评审，了解需求\n\n然后，依据需求规格说明书对功能进行概要设计和详细设计\n\n最后，按照功能设计进行编码，编写计算机可运行的语言\n\n\n# 6.你们公司的测试流程是怎样的？各个阶段的输出是什么？\n\n首先开需求评审会，输出需求规格说明书\n\n然后测试老大编写测试计划，分配任务\n\n按照分配好的模块，参考需求文档提炼需求点功能点进行用例的编写 同时开发进行开发\n\n开发自测完后说可以提测了，我们首先进行一轮冒烟测试\n\n冒烟测试通过后，开始按照编写的用例执行测试，过程中发现的bug，确认--\x3e指派--\x3e跟进--\x3e修复--\x3e回归\n\n直至无重大bug，符合需求要求，测试结束\n\n编写测试报告，体现测试过程和软件质量\n\n\n# 7.开发环境，测试环境，预发布环境，生产环境是什么？你在测试环境后台添加的数据和信息，能够在生产环境看到么？\n\n开发环境：开发用的环境，一般开发自己用来进行debug调试\n\n测试环境：接近真实用户的环境，测试使用\n\n预发布环境：正式发布前的最后一次测试，功能配置和正式环境高度相仿，避免直接上线出现问题增加成本\n\n生产环境：线上环境，正式环境，所用用户为真实用户\n\n测试环境后台添加的数据和信息，在生产环境看不到，因为他们俩是两套不同的环境，数据存放地址不在同一个地方\n\n\n# 8.遇到隐形需求怎么办？\n\n1）充分理解需求文档\n2）参考同类产品/竞品\n\n\n# 9.给一个带有logo的水杯(a4纸，盆栽，行李箱，电梯，n95口罩)如何测试？\n\n电梯\n功能方面：\n1）单功能方面：能否到达指定楼层(升/降)，到达后能否正常开关门，电梯灯能开关？楼层按钮正常按下？ 2）功能交互：两个人在不同楼层按下电梯，电梯是否会依次停下接人（两人都处于要上行或下行状态）？\n电梯正在下行，人要上行按下按钮电梯是否会停？\n电梯在上行，人要下行按下按钮是否会停？\n单双电梯，按单/双楼层，双/单电梯是否会停？\n\n界面测试：\n广告显示是否正确\n电梯logo显示是否正确\n提示语是否正确\n\n兼容性测试：\n硬件兼容（烟雾警报器），软件兼容，上下楼语音机器人，手势机器人\n\n性能测试：\n承重压力，上升/下降速度，到达楼层停止起伏波动大不大，一定高度落下来内部损伤程度\n\n安全测试： 检测到电车入电梯是否关门，求生装置是否启用\n\n\n# 10.密码测试点\n\n 1. 正向\n\n * 约束条件内密码输入\n\n 2. 反向\n\n * 密码长度\n * 密码类型\n * 非空\n\n 3. 安全\n\n * 前端输入星花加密\n * 前端输入完提交过程中星花加密\n * 后端接受存储数据库星花加密\n\n\n# 11.用例需要评审么？紧急情况下也需要评审么？\n\n需要评审，紧急情况下不会开会评审，邮件方式通知相关人员，邮件回复问题，建议和意见\n\n\n# 12.如果被测项目很紧急，来不及写用例怎么办\n\n先提炼测试点，项目结束后补充完整的测试用例，然后归档\n\n\n# 13.用例有没有优先级？如果一定要有优先级，按什么来划分，有什么作用？\n\n有优先级\n按照功能的重要程度来确定\n作用？？\n\n\n# 14.如何编写测试用例？\n\n 1. 从需求提炼测试点\n 2. 细化测试点，按照等价类边界值场景发反推法等\n\n\n# 15.印象深刻的bug？bug原因 bug如何解决的\n\n\n# 16.bug的生命周期\n\n发现bug--确认bug--指派给对应的开发--跟进--修复--回归--回归通过关闭 延期处理的bug，与产品确认后，做记录备注\n\n\n# 17.发现了一个bug，开发不认\n\n\n# 18.在发现bug并确认bug的过程中，对复现不高的bug怎么处理？",charsets:{cjk:!0}},{title:"关于",frontmatter:{title:"关于",date:"2022-04-06T11:33:04.000Z",permalink:"/about",sidebar:!1,article:!1},regularPath:"/05.%E5%85%B3%E4%BA%8E/01.%E5%85%B3%E4%BA%8E.html",relativePath:"05.关于/01.关于.md",key:"v-6e212844",path:"/about/",headers:[{level:2,title:"📚Blog",slug:"📚blog",normalizedTitle:"📚blog",charIndex:2},{level:2,title:"✉️ 联系",slug:"联系",normalizedTitle:"✉️ 联系",charIndex:21}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"📚Blog ✉️ 联系",content:"# 📚Blog\n\n个人记录使用\n\n\n# ✉️ 联系\n\n * Email: liyuqinggg@foxmail.com\n * GitHub: https://github.com/liyuqingGG",normalizedContent:"# 📚blog\n\n个人记录使用\n\n\n# ✉️ 联系\n\n * email: liyuqinggg@foxmail.com\n * github: https://github.com/liyuqinggg",charsets:{cjk:!0}},{title:"网站",frontmatter:{title:"网站",permalink:"/pages/beb6c0bd8a66cea6",date:"2022-04-06T11:33:04.000Z",article:!1,titleTag:"推荐"},regularPath:"/06.%E6%94%B6%E8%97%8F/01.%E7%BD%91%E7%AB%99.html",relativePath:"06.收藏/01.网站.md",key:"v-0e159cdf",path:"/pages/beb6c0bd8a66cea6/",headers:[{level:2,title:"大佬们的博客~~推荐！",slug:"大佬们的博客-推荐",normalizedTitle:"大佬们的博客~~推荐！",charIndex:12}],lastUpdated:"2022/4/7 18:06:59",lastUpdatedTimestamp:1649326019e3,headersStr:"大佬们的博客~~推荐！",content:"# 个人收藏夹\n\n\n# 大佬们的博客~~推荐！\n\nheroku常用命令示例\n\njsdelivr+github实现图床\n\nPicX 图床",normalizedContent:"# 个人收藏夹\n\n\n# 大佬们的博客~~推荐！\n\nheroku常用命令示例\n\njsdelivr+github实现图床\n\npicx 图床",charsets:{cjk:!0}},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-35f74d3a",path:"/archives/",lastUpdated:"2020/5/2 18:04:18",lastUpdatedTimestamp:1588413858e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-34bf908c",path:"/tags/",lastUpdated:"2020/5/2 18:04:18",lastUpdatedTimestamp:1588413858e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-0f39661a",path:"/categories/",lastUpdated:"2020/5/2 18:04:18",lastUpdatedTimestamp:1588413858e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"常用Git命令清单",frontmatter:{title:"常用Git命令清单",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/8292d8/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/00.%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.html",relativePath:"Git学习笔记/10.手册/00.常用Git命令清单.md",key:"v-57880ef5",path:"/pages/8292d8/",headers:[{level:2,title:"一、新建代码库",slug:"一、新建代码库",normalizedTitle:"一、新建代码库",charIndex:187},{level:2,title:"二、配置",slug:"二、配置",normalizedTitle:"二、配置",charIndex:334},{level:2,title:"三、增加/删除文件",slug:"三、增加-删除文件",normalizedTitle:"三、增加/删除文件",charIndex:605},{level:2,title:"四、代码提交",slug:"四、代码提交",normalizedTitle:"四、代码提交",charIndex:1005},{level:2,title:"五、分支",slug:"五、分支",normalizedTitle:"五、分支",charIndex:1406},{level:2,title:"六、标签",slug:"六、标签",normalizedTitle:"六、标签",charIndex:2199},{level:2,title:"七、查看信息",slug:"七、查看信息",normalizedTitle:"七、查看信息",charIndex:2616},{level:2,title:"八、远程同步",slug:"八、远程同步",normalizedTitle:"八、远程同步",charIndex:3725},{level:2,title:"九、撤销",slug:"九、撤销",normalizedTitle:"九、撤销",charIndex:4147},{level:2,title:"十、常用操作组合",slug:"十、常用操作组合",normalizedTitle:"十、常用操作组合",charIndex:4799},{level:3,title:"1. 修改本地分支名和远程分支名",slug:"_1-修改本地分支名和远程分支名",normalizedTitle:"1. 修改本地分支名和远程分支名",charIndex:4812}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"一、新建代码库 二、配置 三、增加/删除文件 四、代码提交 五、分支 六、标签 七、查看信息 八、远程同步 九、撤销 十、常用操作组合 1. 修改本地分支名和远程分支名",content:'# 常用Git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n\n>  * Workspace：工作区\n>  * Index / Stage：暂存区\n>  * Repository：仓库区（或本地仓库）\n>  * Remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 Git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',normalizedContent:'# 常用git命令清单\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n\n\n下面是我整理的常用 git 命令清单。几个专用名词的译名如下。\n\n>  * workspace：工作区\n>  * index / stage：暂存区\n>  * repository：仓库区（或本地仓库）\n>  * remote：远程仓库\n\n\n# 一、新建代码库\n\n# 在当前目录新建一个git代码库\n$ git init\n\n# 新建一个目录，将其初始化为git代码库\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 二、配置\n\ngit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的git配置\n$ git config --list\n\n# 编辑git配置文件\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n$ git config [--global] user.name "[name]"\n$ git config [--global] user.email "[email address]"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 三、增加/删除文件\n\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n$ git add .\n\n# 添加每个变化前，都会要求确认\n# 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 四、代码提交\n\n# 提交暂存区到仓库区\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 五、分支\n\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n$ git cherry-pick [commit]\n\n# 删除分支\n$ git branch -d [branch-name]\n\n# 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 六、标签\n\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n$ git tag [tag] [commit]\n\n# 删除本地tag\n$ git tag -d [tag]\n\n# 删除远程tag\n$ git push origin :refs/tags/[tagname]\n\n# 查看tag信息\n$ git show [tag]\n\n# 提交指定tag\n$ git push [remote] [tag]\n\n# 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 七、查看信息\n\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -s [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] head --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件\n$ git log [tag] head --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n$ git log -p [file]\n\n# 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff head\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n$ git diff --shortstat "@{0 day ago}"\n\n# 显示某次提交的元数据和内容变化\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\n\n# 八、远程同步\n\n# 下载远程仓库的所有变动\n$ git fetch [remote]\n\n# 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit]\n\n# 重置当前分支的head为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit]\n\n# 重置当前head为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 十、常用操作组合\n\n\n# 1. 修改本地分支名和远程分支名\n\ngit branch -m old_branch new_branch # 重命名本地分支\ngit push origin :old_branch # 删除远程旧分支（分支名前有冒号）\ngit push --set-upstream origin new_branch # 推送新的分支，并设置本地分支跟踪新的远程分支\n\n\n1\n2\n3\n\n\n相关文章：\n\n《如何撤销 git 操作？》\n\n《git cherry-pick 教程》 复制某分支上的部分提交到另一个分支上（相对于可以选择指定提交的 rebase 操作）。\n\n> 命令清单来源：https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html',charsets:{cjk:!0}},{title:"Git变基合并",frontmatter:{title:"Git变基合并",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/c10281/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/03.Git%E5%8F%98%E5%9F%BA%E5%90%88%E5%B9%B6.html",relativePath:"Git学习笔记/10.手册/03.Git变基合并.md",key:"v-8e768e3a",path:"/pages/c10281/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:17},{level:3,title:"变基要遵守的准则",slug:"变基要遵守的准则",normalizedTitle:"变基要遵守的准则",charIndex:750},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:815},{level:2,title:"后悔药",slug:"后悔药",normalizedTitle:"后悔药",charIndex:531},{level:2,title:"开发期间的rebase操作",slug:"开发期间的rebase操作",normalizedTitle:"开发期间的rebase操作",charIndex:1887},{level:3,title:"背景",slug:"背景",normalizedTitle:"背景",charIndex:1905},{level:3,title:"操作步骤",slug:"操作步骤",normalizedTitle:"操作步骤",charIndex:2159},{level:3,title:"git cherry-pick",slug:"git-cherry-pick",normalizedTitle:"git cherry-pick",charIndex:2524},{level:4,title:"基本应用",slug:"基本应用",normalizedTitle:"基本应用",charIndex:2595},{level:4,title:"转移多个提交",slug:"转移多个提交",normalizedTitle:"转移多个提交",charIndex:2777}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"说明 变基要遵守的准则 变基的实质 后悔药 开发期间的rebase操作 背景 操作步骤 git cherry-pick 基本应用 转移多个提交",content:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。\n\n当完成v2的开发后，需要把代码合并到dev，我们可以使用rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (HEAD -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看HEAD指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (HEAD -> v2, master) HEAD@{0}: checkout: moving from master to v2\n07c398f (HEAD -> v2, master) HEAD@{1}: rebase (finish): returning to refs/heads/master\n07c398f (HEAD -> v2, master) HEAD@{2}: rebase (start): checkout v2\n15a97d8 HEAD@{3}: reset: moving to 15a97d8\n07c398f (HEAD -> v2, master) HEAD@{4}: merge v2: Fast-forward\n15a97d8 HEAD@{5}: checkout: moving from v2 to master\n07c398f (HEAD -> v2, master) HEAD@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (HEAD -> v2, master) HEAD@{7}: rebase (pick): C\n15a97d8 HEAD@{8}: rebase (start): checkout master # 首次rebase\nd278ecd HEAD@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 HEAD@{10}: commit: D\n\n# 可见，示例中最初的 rebase 操作是 HEAD@{8}，想回退到变基前的状态需让指针指向 HEAD@{9}\ngit reset --hard d278ecd  # 重置当前分支的HEAD为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\n2.4-dev 是基于dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在v2进行开发，dev也同时进行开发，并有重大的改变，你需要把dev的提交同步到v2。\n\n需求： 把dev中新的提交同步到v2，且不能影响dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit ID 一致。\n\n 2. 在dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原v2分支，将dev-copy分支名改为v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个[commit]复制到另一个分支。\n\n# 基本应用\n\ngit cherry-pick <commitHash> # 将commitHash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n# 转移多个提交\n\nCherry pick 支持一次转移多个提交。\n\ngit cherry-pick <HashA> <HashB> # A和B提交\n\n\n1\n\n\n上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick A..B # A到B提交，不包含A\n\n\n1\n\n\n上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。\n\ngit cherry-pick A^..B # A到B提交，包含A\n\n\n1\n",normalizedContent:"# rebase分支合并\n\n\n# 说明\n\n以下 v2 是某个需求的开发分支， dev是总的开发分支，v2 是基于dev分支签出的。\n\n当完成v2的开发后，需要把代码合并到dev，我们可以使用rebase进行合并：\n\n# 首先将 v2 push到远程仓库\ngit add .\ngit commit -m 'xxx'\ngit push origin v2\n\n# 切换到 dev 拉取最新代码\ngit checkout dev\ngit pull origin dev\n\n# 切换到 v2\ngit checkout v2\ngit rebase dev # 将 v2 的所有[commit] 变基到(应用到) dev\n\n# 切换到 dev\ngit checkout dev\ngit merge v2  # 将 dev分支 快进合并 （此时 (head -> dev, v2) [commit] 两个分支指向同一个提交）\n\n# 查看 原v2的[commit]记录 是否在dev分支的最前面（变基成功会把v2的提交记录应用到dev分支的最前面）\ngit log\n\n\t# 如果到这一步发现有问题，尝试使用 git --abort中止变基，如果还是有问题的可以在dev分支上使用《后悔药》操作， 再到v2分支上使用《后悔药》操作，即可使两个分支都回退到 rebase变基 之前的状态\n\n# 试运行项目是否有问题\nyarn start\n\ngit status # 查看状态是否有问题\ngit push origin dev # 推送到远程仓库的 dev\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 变基要遵守的准则\n\n几个人同时在一个分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 因此，变基操作过后的分支将不要再使用。\n\n\n# 后悔药\n\n# 查看head指针变动记录\ngit reflog\n# 记录示例(当前分支是v2):\n07c398f (head -> v2, master) head@{0}: checkout: moving from master to v2\n07c398f (head -> v2, master) head@{1}: rebase (finish): returning to refs/heads/master\n07c398f (head -> v2, master) head@{2}: rebase (start): checkout v2\n15a97d8 head@{3}: reset: moving to 15a97d8\n07c398f (head -> v2, master) head@{4}: merge v2: fast-forward\n15a97d8 head@{5}: checkout: moving from v2 to master\n07c398f (head -> v2, master) head@{6}: rebase (finish): returning to refs/heads/v2\n07c398f (head -> v2, master) head@{7}: rebase (pick): c\n15a97d8 head@{8}: rebase (start): checkout master # 首次rebase\nd278ecd head@{9}: checkout: moving from master to v2 # rebase前的状态\n15a97d8 head@{10}: commit: d\n\n# 可见，示例中最初的 rebase 操作是 head@{8}，想回退到变基前的状态需让指针指向 head@{9}\ngit reset --hard d278ecd  # 重置当前分支的head为指定[commit]，同时重置暂存区和工作区，与指定[commit]一致\n\n# 此时打印 log 查看是否回到之前的状态\ngit log\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n注意：此操作只能回退当前的分支，如其他分支也要回退，需要切换到该分支并执行上面操作。\n\n\n# 开发期间的rebase操作\n\n\n# 背景\n\n有两个分支：\n\ndev\n*v2\n\n\n1\n2\n\n\n2.4-dev 是基于dev切出来的。\n\n提交记录如下：\n\n\t\tdev\na - b - c\n\t\tv2\n\n\n1\n2\n3\n\n\n开发期间，两个分支同时有新的commit ：\n\n\t\t\t\tdev\na - b - c - d - e\n\t\t\\ - f - g\n\t\t\t\tv2\n\n\n1\n2\n3\n4\n\n\n当前你正在v2进行开发，dev也同时进行开发，并有重大的改变，你需要把dev的提交同步到v2。\n\n需求： 把dev中新的提交同步到v2，且不能影响dev分支。\n\n\n# 操作步骤\n\n 1. 基于最新的 dev 切一个新的分支 dev-copy\n    \n    > dev-copy 和 dev 两者的 commit id 一致。\n\n 2. 在dev-copy中执行rebase，将 dev-copy 的提交变基到 v2\n    \n    git rebase v2 # 将 dev-copy 的提交[commit] 变基到(应用到) v2\n    \n    \n    1\n    \n\n 3. 删除原v2分支，将dev-copy分支名改为v2\n    \n    # 当前在 dev-copy 分支\n    git branch -d v2 # 删除分支\n    git branch -m dev-copy v2 # 重命名\n    \n    \n    1\n    2\n    3\n    \n\n\n# git cherry-pick\n\n来源：《git cherry-pick 教程》\n\n用于将单个或几个[commit]复制到另一个分支。\n\n# 基本应用\n\ngit cherry-pick <commithash> # 将commithash应用于当前分支\n\n\n1\n\n\n上面命令就会将指定的提交commithash，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。\n\ngit cherry-pick命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。\n\n# 转移多个提交\n\ncherry pick 支持一次转移多个提交。\n\ngit cherry-pick <hasha> <hashb> # a和b提交\n\n\n1\n\n\n上面的命令将 a 和 b 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。\n\n如果想要转移一系列的连续提交，可以使用下面的简便语法。\n\ngit cherry-pick a..b # a到b提交，不包含a\n\n\n1\n\n\n上面的命令可以转移从 a 到 b 的所有提交。它们必须按照正确的顺序放置：提交 a 必须早于提交 b，否则命令将失败，但不会报错。\n\n注意，使用上面的命令，提交 a 将不会包含在 cherry pick 中。如果要包含提交 a，可以使用下面的语法。\n\ngit cherry-pick a^..b # a到b提交，包含a\n\n\n1\n",charsets:{cjk:!0}},{title:"Git命令思维导图",frontmatter:{title:"Git命令思维导图",date:"2022-01-01T09:51:37.000Z",permalink:"/pages/4cbc21/",categories:["《Git》学习笔记"],tags:["Git"]},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/10.%E6%89%8B%E5%86%8C/06.Git%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.html",relativePath:"Git学习笔记/10.手册/06.Git命令思维导图.md",key:"v-b25db088",path:"/pages/4cbc21/",lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:null,content:"",normalizedContent:"",charsets:{}},{title:"Git工具-重写历史",frontmatter:{title:"Git工具-重写历史",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/1832fe/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/100.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2.html",relativePath:"Git学习笔记/20.文档笔记/100.Git工具-重写历史.md",key:"v-46ca88df",path:"/pages/1832fe/",headers:[{level:2,title:"修改最后一次提交",slug:"修改最后一次提交",normalizedTitle:"修改最后一次提交",charIndex:453},{level:3,title:"修改提交信息",slug:"修改提交信息",normalizedTitle:"修改提交信息",charIndex:519},{level:3,title:"修改实际内容",slug:"修改实际内容",normalizedTitle:"修改实际内容",charIndex:700},{level:2,title:"修改多个提交信息",slug:"修改多个提交信息",normalizedTitle:"修改多个提交信息",charIndex:1113},{level:2,title:"重新排序提交",slug:"重新排序提交",normalizedTitle:"重新排序提交",charIndex:4034},{level:2,title:"压缩提交",slug:"压缩提交",normalizedTitle:"压缩提交",charIndex:4460},{level:2,title:"拆分提交",slug:"拆分提交",normalizedTitle:"拆分提交",charIndex:6218},{level:2,title:"核武器级选项：filter-branch",slug:"核武器级选项-filter-branch",normalizedTitle:"核武器级选项：filter-branch",charIndex:7244},{level:3,title:"从每一个提交中移除一个文件",slug:"从每一个提交中移除一个文件",normalizedTitle:"从每一个提交中移除一个文件",charIndex:7318},{level:3,title:"使一个子目录做为新的根目录",slug:"使一个子目录做为新的根目录",normalizedTitle:"使一个子目录做为新的根目录",charIndex:8358},{level:3,title:"全局修改邮箱地址",slug:"全局修改邮箱地址",normalizedTitle:"全局修改邮箱地址",charIndex:8684}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"修改最后一次提交 修改提交信息 修改实际内容 修改多个提交信息 重新排序提交 压缩提交 拆分提交 核武器级选项：filter-branch 从每一个提交中移除一个文件 使一个子目录做为新的根目录 全局修改邮箱地址",content:"# Git 工具 - 重写历史\n\n许多时候，在使用 Git 时，你可能想要修订提交历史。 Git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nNOTE   在满意之前不要推送你的工作GIT 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以 在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 SHA-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\nTIP   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ GIT\n      COMMIT --AMEND --NO-EDIT\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 Git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 HEAD 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 HEAD~2^ 或 HEAD~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i HEAD~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 HEAD~3..HEAD 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n# Rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" HEAD~3..HEAD\na5f4a0d added cat-file\n310154e updated README formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（HEAD~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i HEAD~3\nStopped at f7f3f6d... changed my name a bit\nYou can amend the commit now, with\n\n       git commit --amend\n\nOnce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，Git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated README formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，Git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current HEAD with a name\n# t, reset <label> = reset HEAD to a label\n# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). Use -c <commit> to reword the commit message.\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，Git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated README formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，Git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# This is a combination of 3 commits.\n# The first commit's message is:\nchanged my name a bit\n\n# This is the 2nd commit message:\n\nupdated README formatting and added blame\n\n# This is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated README formatting”，第二个 “added blame” 来代替原来的 “updated README formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated README formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，Git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset HEAD^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset HEAD^\n$ git add README\n$ git commit -m 'updated README formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\nGit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated README formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 SHA-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\nCAUTION   GIT FILTER-BRANCH 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          GIT-FILTER-REPO，它是一个 PYTHON 脚本，相比大多数使用 FILTER-BRANCH\n          的应用来说，它做得要更好。它的文档和源码可访问\n          HTTPS://GITHUB.COM/NEWREN/GIT-FILTER-REPO 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' HEAD\nRewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' HEAD 的命令。\n\n最后将可以看到 Git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk HEAD\nRewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nRef 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 Git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_EMAIL\" = \"schacon@localhost\" ];\n        then\n                GIT_AUTHOR_NAME=\"Scott Chacon\";\n                GIT_AUTHOR_EMAIL=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 SHA-1 校验和，这个命令会修改你的历史中的每一个提交的 SHA-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",normalizedContent:"# git 工具 - 重写历史\n\n许多时候，在使用 git 时，你可能想要修订提交历史。 git 很棒的一点是它允许你在最后时刻做决定。 你可以在将暂存区内容提交前决定哪些文件进入提交，可以通过 git stash 来决定不与某些内容工作， 也可以重写已经发生的提交就像它们以另一种方式发生的一样。 这可能涉及改变提交的顺序，改变提交中的信息或修改文件，将提交压缩或是拆分， 或完全地移除提交——在将你的工作成果与他人共享之前。\n\n在本节中，你可以学到如何完成这些工作，这样在与他人分享你的工作成果时你的提交历史将如你所愿地展示出来。\n\nnote   在满意之前不要推送你的工作git 的基本原则之一是，由于克隆中有很多工作是本地的，因此你可以 在本地 随便重写历史记录。\n       然而一旦推送了你的工作，那就完全是另一回事了，除非你有充分的理由进行更改，否则应该将推送的工作视为最终结果。\n       简而言之，在对它感到满意并准备与他人分享之前，应当避免推送你的工作。\n       \n\n\n# 修改最后一次提交\n\n修改你最近一次提交可能是所有修改历史提交的操作中最常见的一个。 对于你的最近一次提交，你往往想做两件事情：简单地修改提交信息， 或者通过添加、移除或修改文件来更改提交实际的内容。\n\n\n# 修改提交信息\n\n如果，你只是想修改最近一次提交的提交信息，那么很简单：\n\n$ git commit --amend\n\n\n1\n\n\n上面这条命令会将最后一次的提交信息载入到编辑器中供你修改。 当保存并关闭编辑器后，编辑器会将更新后的提交信息写入新提交中，它会成为新的最后一次提交。\n\n\n# 修改实际内容\n\n另一方面，如果你想要修改最后一次提交的实际内容，那么流程很相似：首先作出你想要补上的修改， 暂存它们，然后用 git commit --amend 以新的改进后的提交来 替换 掉旧有的最后一次提交，\n\n使用这个技巧的时候需要小心，因为修正会改变提交的 sha-1 校验和。 它类似于一个小的变基——如果已经推送了最后一次提交就不要修正它。\n\ntip   修补后的提交可能需要修补提交信息当你在修补一次提交时，可以同时修改提交信息和提交内容。\n      如果你修补了提交的内容，那么几乎肯定要更新提交消息以反映修改后的内容。另一方面，如果你的修补是琐碎的（如修改了一个笔误或添加了一个忘记暂存的文件），\n      那么之前的提交信息不必修改，你只需作出更改，暂存它们，然后通过以下命令避免不必要的编辑器环节即可：$ git\n      commit --amend --no-edit\n      \n\n\n# 修改多个提交信息\n\n为了修改在提交历史中较远的提交，必须使用更复杂的工具。 git 没有一个改变历史工具，但是可以使用变基工具来变基一系列提交，基于它们原来的 head 而不是将其移动到另一个新的上面。 通过交互式变基工具，可以在任何想要修改的提交后停止，然后修改信息、添加文件或做任何想做的事情。 可以通过给 git rebase 增加 -i 选项来交互式地运行变基。 必须指定想要重写多久远的历史，这可以通过告诉命令将要变基到的提交来做到。\n\n例如，如果想要修改最近三次提交信息，或者那组提交中的任意一个提交信息， 将想要修改的最近一次提交的父提交作为参数传递给 git rebase -i 命令，即 head~2^ 或 head~3。 记住 ~3 可能比较容易，因为你正尝试修改最后三次提交；但是注意实际上指定了以前的四次提交，即想要修改提交的父提交：\n\n$ git rebase -i head~3\n\n\n1\n\n\n再次记住这是一个变基命令——在 head~3..head 范围内的每一个修改了提交信息的提交及其 所有后裔 都会被重写。 不要涉及任何已经推送到中央服务器的提交——这样做会产生一次变更的两个版本，因而使他人困惑。\n\n运行这个命令会在文本编辑器上给你一个提交的列表，看起来像下面这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n# rebase 710f0f8..a5f4a0d onto 710f0f8\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n需要重点注意的是相对于正常使用的 log 命令，这些提交显示的顺序是相反的。 运行一次 log 命令，会看到类似这样的东西：\n\n$ git log --pretty=format:\"%h %s\" head~3..head\na5f4a0d added cat-file\n310154e updated readme formatting and added blame\nf7f3f6d changed my name a bit\n\n\n1\n2\n3\n4\n\n\n注意其中的反序显示。 交互式变基给你一个它将会运行的脚本。 它将会从你在命令行中指定的提交（head~3）开始，从上到下的依次重演每一个提交引入的修改。 它将最旧的而不是最新的列在上面，因为那会是第一个将要重演的。\n\n你需要修改脚本来让它停留在你想修改的变更上。 要达到这个目的，你只要将你想修改的每一次提交前面的 ‘pick’ 改为 ‘edit’。 例如，只想修改第三次提交信息，可以像下面这样修改文件：\n\nedit f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 将你带回到列表中的最后一次提交，把你送回命令行并提示以下信息：\n\n$ git rebase -i head~3\nstopped at f7f3f6d... changed my name a bit\nyou can amend the commit now, with\n\n       git commit --amend\n\nonce you're satisfied with your changes, run\n\n       git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这些指令准确地告诉你该做什么。 输入\n\n$ git commit --amend\n\n\n1\n\n\n修改提交信息，然后退出编辑器。 然后，运行\n\n$ git rebase --continue\n\n\n1\n\n\n这个命令将会自动地应用另外两个提交，然后就完成了。 如果需要将不止一处的 pick 改为 edit，需要在每一个修改为 edit 的提交上重复这些步骤。 每一次，git 将会停止，让你修正提交，然后继续直到完成。\n\n\n# 重新排序提交\n\n也可以使用交互式变基来重新排序或完全移除提交。 如果想要移除 “added cat-file” 提交然后修改另外两个提交引入的顺序，可以将变基脚本从这样：\n\npick f7f3f6d changed my name a bit\npick 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n改为这样：\n\npick 310154e updated readme formatting and added blame\npick f7f3f6d changed my name a bit\n\n\n1\n2\n\n\n当保存并退出编辑器时，git 将你的分支带回这些提交的父提交，应用 310154e 然后应用 f7f3f6d，最后停止。 事实修改了那些提交的顺序并完全地移除了 “added cat-file” 提交。\n\n\n# 压缩提交\n\n通过交互式变基工具，也可以将一连串提交压缩成一个单独的提交。 在变基信息中脚本给出了有用的指令：\n\n#\n# commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup <commit> = like \"squash\", but discard this commit's log message\n# x, exec <command> = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop <commit> = remove commit\n# l, label <label> = label current head with a name\n# t, reset <label> = reset head to a label\n# m, merge [-c <commit> | -c <commit>] <label> [# <oneline>]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified). use -c <commit> to reword the commit message.\n#\n# these lines can be re-ordered; they are executed from top to bottom.\n#\n# if you remove a line here that commit will be lost.\n#\n# however, if you remove everything, the rebase will be aborted.\n#\n# note that empty commits are commented out\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n如果，指定 “squash” 而不是 “pick” 或 “edit”，git 将应用两者的修改并合并提交信息在一起。 所以，如果想要这三次提交变为一个提交，可以这样修改脚本：\n\npick f7f3f6d changed my name a bit\nsquash 310154e updated readme formatting and added blame\nsquash a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n当保存并退出编辑器时，git 应用所有的三次修改然后将你放到编辑器中来合并三次提交信息：\n\n# this is a combination of 3 commits.\n# the first commit's message is:\nchanged my name a bit\n\n# this is the 2nd commit message:\n\nupdated readme formatting and added blame\n\n# this is the 3rd commit message:\n\nadded cat-file\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n当你保存之后，你就拥有了一个包含前三次提交的全部变更的提交。\n\n\n# 拆分提交\n\n拆分一个提交会撤消这个提交，然后多次地部分地暂存与提交直到完成你所需次数的提交。 例如，假设想要拆分三次提交的中间那次提交。 想要将它拆分为两次提交：第一个 “updated readme formatting”，第二个 “added blame” 来代替原来的 “updated readme formatting and added blame”。 可以通过修改 rebase -i 的脚本来做到这点，将要拆分的提交的指令修改为 “edit”：\n\npick f7f3f6d changed my name a bit\nedit 310154e updated readme formatting and added blame\npick a5f4a0d added cat-file\n\n\n1\n2\n3\n\n\n然后，当脚本带你进入到命令行时，重置那个提交，拿到被重置的修改，从中创建几次提交。 当保存并退出编辑器时，git 带你到列表中第一个提交的父提交，应用第一个提交（f7f3f6d）， 应用第二个提交（310154e），然后让你进入命令行。 那里，可以通过 git reset head^ 做一次针对那个提交的混合重置，实际上将会撤消那次提交并将修改的文件取消暂存。 现在可以暂存并提交文件直到有几个提交，然后当完成时运行 git rebase --continue：\n\n$ git reset head^\n$ git add readme\n$ git commit -m 'updated readme formatting'\n$ git add lib/simplegit.rb\n$ git commit -m 'added blame'\n$ git rebase --continue\n\n\n1\n2\n3\n4\n5\n6\n\n\ngit 在脚本中应用最后一次提交（a5f4a0d），历史记录看起来像这样：\n\n$ git log -4 --pretty=format:\"%h %s\"\n1c002dd added cat-file\n9b29157 added blame\n35cfb2b updated readme formatting\nf3cc40e changed my name a bit\n\n\n1\n2\n3\n4\n5\n\n\n再次强调，这些改动了所有在列表中的提交的 sha-1 校验和，所以要确保列表中的提交还没有推送到共享仓库中。\n\n\n# 核武器级选项：filter-branch\n\n有另一个历史改写的选项，如果想要通过脚本的方式改写大量提交的话可以使用它——例如，全局修改你的邮箱地址或从每一个提交中移除一个文件。 这个命令是 filter-branch，它可以改写历史中大量的提交，除非你的项目还没有公开并且其他人没有基于要改写的工作的提交做的工作，否则你不应当使用它。 然而，它可以很有用。 你将会学习到几个常用的用途，这样就得到了它适合使用地方的想法。\n\ncaution   git filter-branch 有很多陷阱，不再推荐使用它来重写历史。 请考虑使用\n          git-filter-repo，它是一个 python 脚本，相比大多数使用 filter-branch\n          的应用来说，它做得要更好。它的文档和源码可访问\n          https://github.com/newren/git-filter-repo 获取。\n          \n\n\n# 从每一个提交中移除一个文件\n\n这经常发生。 有人粗心地通过 git add . 提交了一个巨大的二进制文件，你想要从所有地方删除。 可能偶然地提交了一个包括一个密码的文件，然而你想要开源项目。 filter-branch 是一个可能会用来擦洗整个提交历史的工具。 为了从整个提交历史中移除一个叫做 passwords.txt 的文件，可以使用 --tree-filter 选项给 filter-branch：\n\n$ git filter-branch --tree-filter 'rm -f passwords.txt' head\nrewrite 6b9b3cf04e7c5686a9cb838c3f36a8cb6a0fc2bd (21/21)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n--tree-filter 选项在检出项目的每一个提交后运行指定的命令然后重新提交结果。 在本例中，你从每一个快照中移除了一个叫作 passwords.txt 的文件，无论它是否存在。 如果想要移除所有偶然提交的编辑器备份文件，可以运行类似 git filter-branch --tree-filter 'rm -f *~' head 的命令。\n\n最后将可以看到 git 重写树与提交然后移动分支指针。 通常一个好的想法是在一个测试分支中做这件事，然后当你决定最终结果是真正想要的，可以硬重置 master 分支。 为了让 filter-branch 在所有分支上运行，可以给命令传递 --all 选项。\n\n\n# 使一个子目录做为新的根目录\n\n假设已经从另一个源代码控制系统中导入，并且有几个没意义的子目录（trunk、tags 等等）。 如果想要让 trunk 子目录作为每一个提交的新的项目根目录，filter-branch 也可以帮助你那么做：\n\n$ git filter-branch --subdirectory-filter trunk head\nrewrite 856f0bf61e41a27326cdae8f09fe708d679f596f (12/12)\nref 'refs/heads/master' was rewritten\n\n\n1\n2\n3\n\n\n现在新项目根目录是 trunk 子目录了。 git 会自动移除所有不影响子目录的提交。\n\n\n# 全局修改邮箱地址\n\n另一个常见的情形是在你开始工作时忘记运行 git config 来设置你的名字与邮箱地址， 或者你想要开源一个项目并且修改所有你的工作邮箱地址为你的个人邮箱地址。 任何情形下，你也可以通过 filter-branch 来一次性修改多个提交中的邮箱地址。 需要小心的是只修改你自己的邮箱地址，所以你使用 --commit-filter：\n\n$ git filter-branch --commit-filter '\n        if [ \"$git_author_email\" = \"schacon@localhost\" ];\n        then\n                git_author_name=\"scott chacon\";\n                git_author_email=\"schacon@example.com\";\n                git commit-tree \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n这会遍历并重写每一个提交来包含你的新邮箱地址。 因为提交包含了它们父提交的 sha-1 校验和，这个命令会修改你的历史中的每一个提交的 sha-1 校验和， 而不仅仅只是那些匹配邮箱地址的提交。",charsets:{cjk:!0}},{title:"Git基础与命令",frontmatter:{title:"Git基础与命令",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/635088/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/10.Git%E5%9F%BA%E7%A1%80%E4%B8%8E%E5%91%BD%E4%BB%A4.html",relativePath:"Git学习笔记/20.文档笔记/10.Git基础与命令.md",key:"v-058d456c",path:"/pages/635088/",headers:[{level:2,title:"Git基础",slug:"git基础",normalizedTitle:"git基础",charIndex:2},{level:3,title:"全局配置",slug:"全局配置",normalizedTitle:"全局配置",charIndex:93},{level:3,title:"检查配置信息",slug:"检查配置信息",normalizedTitle:"检查配置信息",charIndex:202},{level:3,title:"获取帮助",slug:"获取帮助",normalizedTitle:"获取帮助",charIndex:237},{level:3,title:"初始化仓库",slug:"初始化仓库",normalizedTitle:"初始化仓库",charIndex:398},{level:3,title:"克隆远程仓库",slug:"克隆远程仓库",normalizedTitle:"克隆远程仓库",charIndex:474},{level:3,title:"检查文件状态",slug:"检查文件状态",normalizedTitle:"检查文件状态",charIndex:623},{level:3,title:"加入暂存区 (跟踪文件)",slug:"加入暂存区-跟踪文件",normalizedTitle:"加入暂存区 (跟踪文件)",charIndex:950},{level:3,title:"忽略文件",slug:"忽略文件",normalizedTitle:"忽略文件",charIndex:1119},{level:3,title:"查看修改的具体内容",slug:"查看修改的具体内容",normalizedTitle:"查看修改的具体内容",charIndex:2105},{level:3,title:"提交更新",slug:"提交更新",normalizedTitle:"提交更新",charIndex:2263},{level:3,title:"跳过使用暂存区域",slug:"跳过使用暂存区域",normalizedTitle:"跳过使用暂存区域",charIndex:2406},{level:2,title:"Git 基础 - 查看提交历史",slug:"git-基础-查看提交历史",normalizedTitle:"git 基础 - 查看提交历史",charIndex:2506},{level:2,title:"Git 基础 - 撤消操作",slug:"git-基础-撤消操作",normalizedTitle:"git 基础 - 撤消操作",charIndex:4022},{level:2,title:"Git 基础 - 远程仓库的使用",slug:"git-基础-远程仓库的使用",normalizedTitle:"git 基础 - 远程仓库的使用",charIndex:4228},{level:3,title:"查看远程仓库",slug:"查看远程仓库",normalizedTitle:"查看远程仓库",charIndex:4249},{level:3,title:"添加远程仓库",slug:"添加远程仓库",normalizedTitle:"添加远程仓库",charIndex:4323},{level:3,title:"从远程仓库中抓取与拉取",slug:"从远程仓库中抓取与拉取",normalizedTitle:"从远程仓库中抓取与拉取",charIndex:4370},{level:3,title:"推送到远程仓库",slug:"推送到远程仓库",normalizedTitle:"推送到远程仓库",charIndex:1106},{level:3,title:"查看某个远程仓库",slug:"查看某个远程仓库",normalizedTitle:"查看某个远程仓库",charIndex:4825},{level:3,title:"远程仓库的重命名与移除",slug:"远程仓库的重命名与移除",normalizedTitle:"远程仓库的重命名与移除",charIndex:4951},{level:2,title:"Git 基础 - 打标签",slug:"git-基础-打标签",normalizedTitle:"git 基础 - 打标签",charIndex:5049},{level:3,title:"列出标签",slug:"列出标签",normalizedTitle:"列出标签",charIndex:5066},{level:3,title:"创建标签",slug:"创建标签",normalizedTitle:"创建标签",charIndex:5164},{level:3,title:"附注标签",slug:"附注标签",normalizedTitle:"附注标签",charIndex:5199},{level:3,title:"轻量标签",slug:"轻量标签",normalizedTitle:"轻量标签",charIndex:5181},{level:3,title:"后期打标签",slug:"后期打标签",normalizedTitle:"后期打标签",charIndex:5893},{level:3,title:"共享标签",slug:"共享标签",normalizedTitle:"共享标签",charIndex:6294},{level:3,title:"删除标签",slug:"删除标签",normalizedTitle:"删除标签",charIndex:6527},{level:3,title:"检出标签",slug:"检出标签",normalizedTitle:"检出标签",charIndex:7014},{level:2,title:"Git 命令别名",slug:"git-命令别名",normalizedTitle:"git 命令别名",charIndex:8135}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"Git基础 全局配置 检查配置信息 获取帮助 初始化仓库 克隆远程仓库 检查文件状态 加入暂存区 (跟踪文件) 忽略文件 查看修改的具体内容 提交更新 跳过使用暂存区域 Git 基础 - 查看提交历史 Git 基础 - 撤消操作 Git 基础 - 远程仓库的使用 查看远程仓库 添加远程仓库 从远程仓库中抓取与拉取 推送到远程仓库 查看某个远程仓库 远程仓库的重命名与移除 Git 基础 - 打标签 列出标签 创建标签 附注标签 轻量标签 后期打标签 共享标签 删除标签 检出标签 Git 命令别名",content:"# Git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# Git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 Git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n M README # 已修改，但未暂存 （M的位置靠右，红色）\nMM Rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\nA  lib/git.rb # 新添加到暂存区，未提交\nM  lib/simplegit.rb # 已修改，已暂存 （M的位置靠左，绿色）\n?? LICENSE.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 Git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO\n/TODO\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nGitHub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用git commit提交更新，在此之前，务必确认所有变动已经被git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加-a选项可以跳过git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# Git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 SHA-1 校验码。\n\n带入-p或--patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 Git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - Scott Chacon, 6 years ago : changed the version number\n085bb3b - Scott Chacon, 6 years ago : removed unnecessary test\na11bef0 - Scott Chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ASCII 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from SIGCHLD on trap\n*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 Added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e Merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# Git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# Git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\nGit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 GNU Privacy Guard （GPG）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon <schacon@gee-mail.com>\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\nDeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nTo /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached HEAD）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nNote: checking out '2.0.0'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b <new-branch>\n\nHEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nPrevious HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final\nHEAD is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nSwitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# Git 命令别名\n\nGit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 Git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 Git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset HEAD --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage fileA\n$ git reset HEAD -- fileA\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 HEAD'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nAuthor: Josh Goebel <dreamer3@example.com>\nDate:   Tue Aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    Signed-off-by: Scott Chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，Git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 Git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 Git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",normalizedContent:"# git基础与命令\n\n官方文档（中文）：https://git-scm.com/book/zh/v2\n\n> 本文档是根据官方文档来编写的，以官方文档为准。\n\n\n# git基础\n\n\n# 全局配置\n\ngit config --global user.name 'your name'\ngit config --global user.email 'xxx@xx.com'\n\n\n1\n2\n\n\n自报家门\n\n\n# 检查配置信息\n\ngit config --list\n\n\n1\n\n\n\n# 获取帮助\n\n# 获取全局帮助手册\ngit help\n\n# 获取特定命令的详细版帮助手册 (两个命令是等价的)\ngit help <某个命令>\ngit <某个命令> --help # 两个横杠\n\n# 获取特定命令的简明版帮助手册\ngit <某个命令> -h  # 一个横杠\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# 初始化仓库\n\n# 本地目录初始化仓库\ngit init\n\n\n1\n2\n\n\n如果你是从远程仓库clone的项目，则该项目是已经初始化好的git仓库\n\n\n# 克隆远程仓库\n\n# 克隆\ngit clone <url>\n\n# 克隆同时修改目录名\ngit clone <url> <name>\n\n\n1\n2\n3\n4\n5\n\n\n初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为 git 刚刚检出了它们， 而你尚未编辑过它们\n\n\n# 检查文件状态\n\n# 查看详细状态说明\ngit status\n\n# 查看简明状态说明\ngit status -s  # -s 或 --short\n m readme # 已修改，但未暂存 （m的位置靠右，红色）\nmm rakefile # 已修改，暂存后又作了修改（有暂存和未暂存）\na  lib/git.rb # 新添加到暂存区，未提交\nm  lib/simplegit.rb # 已修改，已暂存 （m的位置靠左，绿色）\n?? license.txt # 新添加，未跟踪\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n * git目录中的文件状态包含：是否跟踪、是否修改、是否已存入暂存区\n\n * 参数的一个横杠表示缩写，两个横杠表示全称。\n\n\n# 加入暂存区 (跟踪文件)\n\n# 文件加入暂存区（跟踪指定文件)\ngit add <files>\n\n\n1\n2\n\n\ngit add 命令使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。\n\nadd 命令是将文件加入到暂存区，commit 命令的提交到本地仓库，push 命令是推送到远程仓库。\n\n\n# 忽略文件\n\n添加一个名为 .gitignore 的文件，列出要忽略的文件的模式\n\n*.[oa]  # 忽略以 .o 或 .a 结尾的文件（一般这类文件是编译过程出现）\n*~      # 忽略以 ~ 结尾的文件（一般是文本编辑软件保存的副本）\n\n\n1\n2\n\n\n文件 .gitignore 的格式规范如下：\n\n * 所有空行或者以 # 开头的行都会被 git 忽略（注释符号）。\n\n * 可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n   \n   > glob 模式是指 shell 所使用的简化了的正则表达式\n\n * 匹配模式可以以（/）开头防止递归。\n\n * 匹配模式可以以（/）结尾指定目录。\n\n * 要忽略指定模式以外的文件或目录，可以在模式前加上叹号（!）取反。\n\n----------------------------------------\n\n * 星号（*）匹配零个或多个任意字符\n * [abc] 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）\n * 问号（?）只匹配一个任意字符\n * [0-9] 表示匹配所有 0 到 9 的数字。在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配\n * 使用两个星号（**）表示匹配任意中间目录，比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。\n\n# 忽略所有的 .a 文件\n*.a\n\n# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件\n!lib.a\n\n# 只忽略当前目录下的 todo 文件，而不忽略 subdir/todo\n/todo\n\n# 忽略任何目录下名为 build 的文件夹\nbuild/\n\n# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt\ndoc/*.txt\n\n# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件\ndoc/**/*.pdf\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\ngithub 有一个十分详细的针对数十种项目及语言的 .gitignore 文件列表， 你可以在 https://github.com/github/gitignore 找到它。\n\n\n# 查看修改的具体内容\n\ngit diff # 比较修改之后还没有暂存起来的变化内容。\n\ngit diff --staged # 查看已暂存的将要添加到下次提交里的内容\n\n\n1\n2\n3\n\n\ngit status 只能查看文件变动的状态，并不能查看具体修改了哪些内容。使用git diff可以看到具体变动的内容。\n\n\n# 提交更新\n\ngit commit # 未带参数的会打开默认文本编辑器让你输入提交说明\n\ngit commit -m '提交说明' # 带-m参数直接输入提交说明\n\n\n1\n2\n3\n\n\n使用git commit提交更新，在此之前，务必确认所有变动已经被git add添加到暂存区。\n\n\n# 跳过使用暂存区域\n\ngit commit -a -m '提交说明'\n\n\n1\n\n\n添加-a选项可以跳过git add 步骤，把已经跟踪过的文件一并提交。\n\n注意：这个操作无法提交未跟踪的文件。\n\n\n# git 基础 - 查看提交历史\n\ngit log\n\n\n1\n\n\n不传入任何参数的默认情况下，git log 会按时间先后顺序列出所有的提交，最近的更新排在最上面。\n\n此命令打印的数据中有一项是一长串的 sha-1 校验码。\n\n带入-p或--patch查看提交的具体差异：\n\ngit log -p -2 # -p显示差异  -2显示最近的提交次数\n\n\n1\n\n\n--stat 显示每次提交的差异统计\n\ngit log --stat\n\n\n1\n\n\n--pretty 这个选项可以使用不同于默认格式的方式展示提交历史\n\n这个选项有一些内建的子选项供你使用。 比如 oneline 会将每个提交放在一行显示，在浏览大量的提交时非常有用。 另外还有 short，full 和 fuller 选项，它们展示信息的格式基本一致，但是详尽程度不一：\n\n$ git log --pretty=oneline\nca82a6dff817ec66f44342007202690a93763949 changed the version number\n085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test\na11bef06a3f659402fe7563abf99ad00de2209e6 first commit\n\n\n1\n2\n3\n4\n\n\n最有意思的是 format ，可以定制记录的显示格式。 这样的输出对后期提取分析格外有用——因为你知道输出的格式不会随着 git 的更新而发生改变：\n\n$ git log --pretty=format:\"%h - %an, %ar : %s\"\nca82a6d - scott chacon, 6 years ago : changed the version number\n085bb3b - scott chacon, 6 years ago : removed unnecessary test\na11bef0 - scott chacon, 6 years ago : first commit\n\n\n1\n2\n3\n4\n\n\ngit log --pretty=format 常用的选项 列出了 format 接受的常用格式占位符的写法及其代表的意义。\n\n当 oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些 ascii 字符串来形象地展示你的分支、合并历史：\n\n$ git log --pretty=format:\"%h %s\" --graph\n* 2d3acf9 ignore errors from sigchld on trap\n*  5e3ee11 merge branch 'master' of git://github.com/dustin/grit\n|\\\n| * 420eac9 added a method for getting the current branch.\n* | 30e367c timeout code and tests\n* | 5a09431 add timeout protection to grit\n* | e1193f8 support for heads with slashes in them\n|/\n* d6016bc require time for xmlschema\n*  11d191e merge branch 'defunkt' into local\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# git 基础 - 撤消操作\n\n你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n\n$ git commit -m 'initial commit'\n$ git add forgotten_file\n$ git commit --amend # 重新提交，且只有一次提交记录\n\n\n1\n2\n3\n\n\n最终你只会有一个提交——第二次提交将代替第一次提交的结果。\n\n更多撤销操作请了解 reset命令。\n\n\n# git 基础 - 远程仓库的使用\n\n\n# 查看远程仓库\n\ngit remote # 仅显示远程仓库的名称\ngit remote -v # 显示远程仓库的名称 + 地址\n\n\n1\n2\n\n\n\n# 添加远程仓库\n\n git remote add <远程仓库名> <url>\n\n\n1\n\n\n\n# 从远程仓库中抓取与拉取\n\n就如刚才所见，从远程仓库中获得数据，可以执行：\n\ngit fetch <remote>\n\n\n1\n\n\n这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n注意： git fetch 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\ngit pull\n\n\n1\n\n\n用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下，git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。 运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。\n\n\n# 推送到远程仓库\n\ngit push <remote> <branch> # git push origin master\n\n\n1\n\n\n\n# 查看某个远程仓库\n\n git remote show <remote> # git remote show origin\n\n\n1\n\n\n查看远程仓库的详细信息。这个命令列出了当你在特定的分支上执行 git push 会自动地推送到哪一个远程分支\n\n\n# 远程仓库的重命名与移除\n\ngit remote rename <原名> <新名> # 重命名\ngit remote remove paul <remote># 移除远程仓库\n\n\n1\n2\n\n\n\n# git 基础 - 打标签\n\n\n# 列出标签\n\ngit tag # 完整标签列表\ngit tag -l \"v2.0*\" # 只显示包含 v2.0 的标签。 注意加星号(*)\n\n\n1\n2\n\n\n-l 或 --list 都可以。\n\n\n# 创建标签\n\ngit 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。\n\n轻量标签很像一个不会改变的分支——它只是某个特定提交的引用。\n\n而附注标签是存储在 git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间， 此外还有一个标签信息，并且可以使用 gnu privacy guard （gpg）签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。\n\n\n# 附注标签\n\ngit tag -a v1.4 -m \"my version 1.4\" # -a表示add， -m 表示附件信息\n\n\n1\n\n\n通过使用 git show 命令可以看到标签信息和与之对应的提交信息：\n\ngit show v1.4\n\n\n1\n\n\n\n# 轻量标签\n\n轻量标签本质上是将提交校验和存储到一个文件中——没有保存任何其他信息。 创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：\n\ngit tag v1.4-lw # 不需要添加选项\n\n\n1\n\n\n这时，如果在标签上运行 git show，你不会看到额外的标签信息。 命令只会显示出提交信息：\n\n$ git show v1.4-lw\ncommit ca82a6dff817ec66f44342007202690a93763949\nauthor: scott chacon <schacon@gee-mail.com>\ndate:   mon mar 17 21:52:11 2008 -0700\n\n\n1\n2\n3\n4\n\n\n\n# 后期打标签\n\n你也可以对过去的提交打标签。 假设提交历史是这样的：\n\n$ git log --pretty=oneline\n166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme\n\n\n1\n2\n3\n4\n\n\n现在，假设在 v1.2 时你忘记给项目打标签，也就是在 “updated rakefile” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：\n\n$ git tag -a v1.2 9fceb02 # 打的标签属于附注标签\n\n\n1\n\n\n\n# 共享标签\n\ngit push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样——你可以运行 git push origin <tagname>。\n\ngit push origin v1.5 # 显式地推送标签到远程仓库\ngit push origin --tags # 一次性推送所有不在远程仓库上的标签\n\n\n1\n2\n\n\n现在，当其他人从仓库中克隆或拉取，他们也能得到你的那些标签。\n\n\n# 删除标签\n\n要删除掉你本地仓库上的标签，可以使用命令 git tag -d <tagname>。 例如，可以使用以下命令删除一个轻量标签：\n\n$ git tag -d v1.4-lw\ndeleted tag 'v1.4-lw' (was e7d5add)\n\n\n1\n2\n\n\n注意上述命令并不会从任何远程仓库中移除这个标签，你必须用 git push <remote> :refs/tags/<tagname> 来更新你的远程仓库：\n\n第一种变体是 git push <remote> :refs/tags/<tagname> ：\n\n$ git push origin :refs/tags/v1.4-lw\nto /git@github.com:schacon/simplegit.git\n - [deleted]         v1.4-lw\n\n\n1\n2\n3\n\n\n上面这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。\n\n第二种更直观的删除远程标签的方式是：\n\n$ git push origin --delete <tagname>\n\n\n1\n\n\n\n# 检出标签\n\n如果你想查看某个标签所指向的文件版本，可以使用 git checkout 命令， 虽然这会使你的仓库处于“分离头指针（detached head）”的状态——这个状态有些不好的副作用：\n\n$ git checkout 2.0.0\nnote: checking out '2.0.0'.\n\nyou are in 'detached head' state. you can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nif you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. example:\n\n  git checkout -b <new-branch>\n\nhead is now at 99ada87... merge pull request #89 from schacon/appendix-final\n\n$ git checkout 2.0-beta-0.1\nprevious head position was 99ada87... merge pull request #89 from schacon/appendix-final\nhead is now at df3f601... add atlas.json and cover image\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n在“分离头指针”状态下，如果你做了某些更改然后提交它们，标签不会发生变化， 但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支：\n\n$ git checkout -b version2 v2.0.0\nswitched to a new branch 'version2'\n\n\n1\n2\n\n\n如果在这之后又进行了一次提交，version2 分支就会因为这个改动向前移动， 此时它就会和 v2.0.0 标签稍微有些不同，这时就要当心了。\n\n\n# git 命令别名\n\ngit 并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的 git 命令，可以通过 git config 文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：\n\n$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status\n\n\n1\n2\n3\n4\n\n\n这意味着，当要输入 git commit 时，只需要输入 git ci。\n\n在创建你认为应该存在的命令时这个技术会很有用。 例如，为了解决取消暂存文件的易用性问题，可以向 git 中添加你自己的取消暂存别名：\n\n$ git config --global alias.unstage 'reset head --'\n\n\n1\n\n\n这会使下面的两个命令等价：\n\n$ git unstage filea\n$ git reset head -- filea\n\n\n1\n2\n\n\n这样看起来更清楚一些。 通常也会添加一个 last 命令，像这样：\n\n$ git config --global alias.last 'log -1 head'\n\n\n1\n\n\n这样，可以轻松地看到最后一次提交：\n\n$ git last\ncommit 66938dae3329c7aebe598c2246a8e6af90d04646\nauthor: josh goebel <dreamer3@example.com>\ndate:   tue aug 26 19:48:51 2008 +0800\n\n    test for current head\n\n    signed-off-by: scott chacon <schacon@example.com>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n可以看出，git 只是简单地将别名替换为对应的命令。 然而，你可能想要执行外部命令，而不是一个 git 子命令。 如果是那样的话，可以在命令前面加入 ! 符号。 如果你自己要写一些与 git 仓库协作的工具的话，那会很有用。 我们现在演示将 git visual 定义为 gitk 的别名：\n\n$ git config --global alias.visual '!gitk'\n\n\n1\n",charsets:{cjk:!0}},{title:"Git工具-重置揭密",frontmatter:{title:"Git工具-重置揭密",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/d9e9c6/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/110.Git%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86.html",relativePath:"Git学习笔记/20.文档笔记/110.Git工具-重置揭密.md",key:"v-4d45b047",path:"/pages/d9e9c6/",headers:[{level:2,title:"三棵树",slug:"三棵树",normalizedTitle:"三棵树",charIndex:147},{level:3,title:"HEAD",slug:"head",normalizedTitle:"head",charIndex:348},{level:3,title:"索引",slug:"索引",normalizedTitle:"索引",charIndex:257},{level:3,title:"工作目录",slug:"工作目录",normalizedTitle:"工作目录",charIndex:1116},{level:2,title:"工作流程",slug:"工作流程",normalizedTitle:"工作流程",charIndex:1764},{level:2,title:"重置的作用",slug:"重置的作用",normalizedTitle:"重置的作用",charIndex:2573},{level:3,title:"第 1 步：移动 HEAD",slug:"第-1-步-移动-head",normalizedTitle:"第 1 步：移动 head",charIndex:2720},{level:3,title:"第 2 步：更新索引（--mixed）",slug:"第-2-步-更新索引-mixed",normalizedTitle:"第 2 步：更新索引（--mixed）",charIndex:3207},{level:3,title:"第 3 步：更新工作目录（--hard）",slug:"第-3-步-更新工作目录-hard",normalizedTitle:"第 3 步：更新工作目录（--hard）",charIndex:3507},{level:3,title:"回顾",slug:"回顾",normalizedTitle:"回顾",charIndex:3867},{level:2,title:"通过路径来重置",slug:"通过路径来重置",normalizedTitle:"通过路径来重置",charIndex:4002},{level:2,title:"压缩",slug:"压缩",normalizedTitle:"压缩",charIndex:4855},{level:2,title:"检出",slug:"检出",normalizedTitle:"检出",charIndex:1113},{level:3,title:"不带路径",slug:"不带路径",normalizedTitle:"不带路径",charIndex:5428},{level:3,title:"带路径",slug:"带路径",normalizedTitle:"带路径",charIndex:5429},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:6348}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"三棵树 HEAD 索引 工作目录 工作流程 重置的作用 第 1 步：移动 HEAD 第 2 步：更新索引（--mixed） 第 3 步：更新工作目录（--hard） 回顾 通过路径来重置 压缩 检出 不带路径 带路径 总结",content:"# Git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 Git 的 reset 和 checkout 命令。 在初遇的 Git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\nGit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nHEAD                上一次提交的快照，下一次提交的父结点\nIndex               预期的下一次提交的快照\nWorking Directory   沙盒\n\n\n# HEAD\n\nHEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：\n\n$ git cat-file -p HEAD\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor Scott Chacon  1301511835 -0700\ncommitter Scott Chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r HEAD\n100644 blob a906cb2a4a904a152...   README\n100644 blob 8f94139338f9404f2...   Rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nGit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 Git 的“暂存区”，这就是当你运行 git commit 时 Git 看起来的样子。\n\nGit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\tREADME\n100644 8f94139338f9404f26296befa88755fc2598c289 0\tRakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── README\n├── Rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 Git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “Changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 HEAD 不同，若运行 git status 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 HEAD 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 HEAD\n\nreset 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 reset 回 HEAD~（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 HEAD 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset HEAD~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 HEAD （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed HEAD file.txt 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 HEAD 分支的指向 （已跳过）\n 2. 让索引看起来像 HEAD （到此处停止）\n\n所以它本质上只是将 file.txt 从 HEAD 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“WIP” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft HEAD~2 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 HEAD。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而 “HEAD” 则表示只移动了 HEAD 自身。 特别注意 WD Safe? 一列——如果它标记为 NO，那么运行该命令之前请考虑一下。\n\n                            HEAD   INDEX   WORKDIR   WD SAFE?\nCommit Level                                         \nreset --soft [commit]       REF    NO      NO        YES\nreset [commit]              REF    YES     NO        YES\nreset --hard [commit]       REF    YES     YES       NO\ncheckout <commit>           HEAD   YES     YES       YES\nFile Level                                           \nreset [commit] <paths>      NO     YES     NO        YES\ncheckout [commit] <paths>   NO     YES     YES       NO",normalizedContent:"# git 工具 - 重置揭密\n\n在继续了解更专业的工具前，我们先探讨一下 git 的 reset 和 checkout 命令。 在初遇的 git 命令中，这两个是最让人困惑的。 它们能做很多事情，所以看起来我们很难真正地理解并恰当地运用它们。 针对这一点，我们先来做一个简单的比喻。\n\n\n# 三棵树\n\n理解 reset 和 checkout 的最简方法，就是以 git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）\n\ngit 作为一个系统，是以它的一般操作来管理并操纵这三棵树的：\n\n树                   用途\nhead                上一次提交的快照，下一次提交的父结点\nindex               预期的下一次提交的快照\nworking directory   沙盒\n\n\n# head\n\nhead 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 head 将是下一次提交的父结点。 通常，理解 head 的最简方式，就是将它看做 该分支上的最后一次提交 的快照。\n\n其实，查看快照的样子很容易。 下例就显示了 head 快照实际的目录列表，以及其中每个文件的 sha-1 校验和：\n\n$ git cat-file -p head\ntree cfda3bf379e4f8dba8717dee55aab78aef7f4daf\nauthor scott chacon  1301511835 -0700\ncommitter scott chacon  1301511835 -0700\n\ninitial commit\n\n$ git ls-tree -r head\n100644 blob a906cb2a4a904a152...   readme\n100644 blob 8f94139338f9404f2...   rakefile\n040000 tree 99f1a6d12cb4b6f19...   lib\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\ngit 的 cat-file 和 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。 不过它们能帮助我们了解到底发生了什么。\n\n\n# 索引\n\n索引是你的 预期的下一次提交。 我们也会将这个概念引用为 git 的“暂存区”，这就是当你运行 git commit 时 git 看起来的样子。\n\ngit 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。\n\n$ git ls-files -s\n100644 a906cb2a4a904a152e80877d4088654daad0c859 0\treadme\n100644 8f94139338f9404f26296befa88755fc2598c289 0\trakefile\n100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0\tlib/simplegit.rb\n\n\n1\n2\n3\n4\n\n\n再说一次，我们在这里又用到了 git ls-files 这个幕后的命令，它会显示出索引当前的样子。\n\n确切来说，索引在技术上并非树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。\n\n\n# 工作目录\n\n最后，你就有了自己的 工作目录（通常也叫 工作区）。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。\n\n$ tree\n.\n├── readme\n├── rakefile\n└── lib\n    └── simplegit.rb\n\n1 directory, 3 files\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 工作流程\n\n经典的 git 工作流程是通过操纵这三个区域来以更加连续的状态记录项目快照的。\n\n\n\n让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 git 仓库，其中的 head 引用指向未创建的 master 分支。\n\n\n\n此时，只有工作目录有内容。\n\n现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。\n\n\n\n接着运行 git commit，它会取得索引中的内容并将它保存为一个永久的快照， 然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。\n\n\n\n此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。\n\n现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。\n\n\n\n如果现在运行 git status，我们会看到文件显示在 “changes not staged for commit” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。\n\n\n\n此时，由于索引和 head 不同，若运行 git status 的话就会看到 “changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。\n\n\n\n现在运行 git status 会没有输出，因为三棵树又变得相同了。\n\n切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 head 指向新的分支引用，将 索引 填充为该次提交的快照， 然后将 索引 的内容复制到 工作目录 中。\n\n\n# 重置的作用\n\n在以下情景中观察 reset 命令会更有意义。\n\n为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：\n\n\n\n让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。\n\n\n# 第 1 步：移动 head\n\nreset 做的第一件事是移动 head 的指向。 这与改变 head 自身不同（checkout 所做的）；reset 移动 head 指向的分支。 这意味着如果 head 设置为 master 分支（例如，你正在 master 分支上）， 运行 git reset 9e5e6a4 将会使 master 指向 9e5e6a4。\n\n\n\n无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。\n\n现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，git 会创建一个新的提交，并移动 head 所指向的分支来使其指向该提交。 当你将它 reset 回 head~（head 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了（见 修改最后一次提交）。\n\n\n# 第 2 步：更新索引（--mixed）\n\n注意，如果你现在运行 git status 的话，就会看到新的 head 和以绿色标出的它和索引之间的区别。\n\n接下来，reset 会用 head 指向的当前快照的内容来更新索引。\n\n\n\n如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset head~），这就是命令将会停止的地方。\n\n现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。\n\n\n# 第 3 步：更新工作目录（--hard）\n\nreset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 --hard 选项，它将会继续这一步。\n\n\n\n现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令 以及 工作目录中的所有工作。\n\n必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 git 数据库中的一个提交内还留有该文件的 v3 版本， 我们可以通过 reflog 来找回它。但是若该文件还未提交，git 仍会覆盖它从而导致无法恢复。\n\n\n# 回顾\n\nreset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：\n\n 1. 移动 head 分支的指向 （若指定了 --soft，则到此停止）\n 2. 使索引看起来像 head （若未指定 --hard，则到此停止）\n 3. 使工作目录看起来像索引\n\n\n# 通过路径来重置\n\n前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 head 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。\n\n现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed head file.txt 的简写形式，因为你既没有指定一个提交的 sha-1 或分支，也没有指定 --soft 或 --hard），它会：\n\n 1. 移动 head 分支的指向 （已跳过）\n 2. 让索引看起来像 head （到此处停止）\n\n所以它本质上只是将 file.txt 从 head 复制到索引中。\n\n\n\n它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。\n\n\n\n这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）\n\n我们可以不让 git 从 head 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。\n\n\n\n它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它， 然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改， 尽管我们并未在工作目录中真正地再次拥有它。\n\n还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。\n\n\n# 压缩\n\n我们来看看如何利用这种新的功能来做一些有趣的事情——压缩提交。\n\n假设你的一系列提交信息中有 “oops.”“wip” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。）\n\n假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。\n\n\n\n那么可以运行 git reset --soft head~2 来将 head 分支移动到一个旧一点的提交上（即你想要保留的最近的提交）：\n\n\n\n然后只需再次运行 git commit：\n\n\n\n现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交， 接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。\n\n\n# 检出\n\n最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。\n\n\n# 不带路径\n\n运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。\n\n首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件弄丢。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。\n\n第二个重要的区别是 checkout 如何更新 head。 reset 会移动 head 分支的指向，而 checkout 只会移动 head 自身来指向另一个分支。\n\n例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 head 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，head 自身会移动。 现在 head 将会指向 master。\n\n所以，虽然在这两种情况下我们都移动 head 使其指向了提交 a，但_做法_是非常不同的。 reset 会移动 head 分支的指向，而 checkout 则移动 head 自身。\n\n\n\n\n# 带路径\n\n运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 head。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）， 这样对工作目录并不安全，它也不会移动 head。\n\n此外，同 git reset 和 git add 一样，checkout 也接受一个 --patch 选项，允许你根据选择一块一块地恢复文件内容。\n\n\n# 总结\n\n希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。\n\n下面的速查表列出了命令对树的影响。 “head” 一列中的 “ref” 表示该命令移动了 head 指向的分支引用，而 “head” 则表示只移动了 head 自身。 特别注意 wd safe? 一列——如果它标记为 no，那么运行该命令之前请考虑一下。\n\n                            head   index   workdir   wd safe?\ncommit level                                         \nreset --soft [commit]       ref    no      no        yes\nreset [commit]              ref    yes     no        yes\nreset --hard [commit]       ref    yes     yes       no\ncheckout <commit>           head   yes     yes       yes\nfile level                                           \nreset [commit] <paths>      no     yes     no        yes\ncheckout [commit] <paths>   no     yes     yes       no",charsets:{cjk:!0}},{title:"Git分支的新建与合并-分支操作",frontmatter:{title:"Git分支的新建与合并-分支操作",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/ea5a8c/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/30.Git%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C.html",relativePath:"Git学习笔记/20.文档笔记/30.Git分支的新建与合并-分支操作.md",key:"v-50f5aca8",path:"/pages/ea5a8c/",headers:[{level:3,title:"创建分支并切换",slug:"创建分支并切换",normalizedTitle:"创建分支并切换",charIndex:45},{level:3,title:"切换分支",slug:"切换分支",normalizedTitle:"切换分支",charIndex:187},{level:3,title:"合并分支",slug:"合并分支",normalizedTitle:"合并分支",charIndex:575},{level:3,title:"删除分支",slug:"删除分支",normalizedTitle:"删除分支",charIndex:666},{level:3,title:"多次提交之后合并分支",slug:"多次提交之后合并分支",normalizedTitle:"多次提交之后合并分支",charIndex:781},{level:3,title:"遇到冲突时的分支合并",slug:"遇到冲突时的分支合并",normalizedTitle:"遇到冲突时的分支合并",charIndex:1123}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"创建分支并切换 切换分支 合并分支 删除分支 多次提交之后合并分支 遇到冲突时的分支合并",content:"# Git分支的新建与合并-分支操作\n\n文档：Git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到master之前，需要iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支Git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，Git 不得不做一些额外的工作。 出现这种情况的时候，Git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，Git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现CONFLICT提升，表示有冲突\n\n$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 Git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< HEAD:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",normalizedContent:"# git分支的新建与合并-分支操作\n\n文档：git 分支 - 分支的新建与合并\n\n\n# 创建分支并切换\n\n此时有一个需求需要在新的分支iss53上工作：\n\n$ git checkout -b iss53  # b表示branch\n\n\n1\n\n\n它是下面两条命令的简写：\n\n$ git branch iss53\n$ git checkout iss53\n\n\n1\n2\n\n\n\n# 切换分支\n\n突然有一个紧急问题要解决，需要在原来的master分支进行修复：\n\n$ git checkout master\n\n\n1\n\n\n在切换到master之前，需要iss53分支保持好一个干净的状态（修改都已提交）。\n\n注意：切换分支git 会重置你的工作目录。\n\n> checkout 中文含义 “检出”，checkout <branch> 检出分支 => 检出指定分支的代码 => 重置工作目录并切换分支。\n\n接下来，你要修复这个紧急问题。 建立一个 hotfix 分支，在该分支上工作直到问题解决：\n\n$ git checkout -b hotfix\n\n# 中间过程在hotfix上修改了代码并提交\n$ echo 'test' > ./hotfix.txt\n$ git add .\n$ git commit -m 'fixed'\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 合并分支\n\n$ git checkout master # 首先切回master分支\n$ git merge hotfix # 把 hotfix 分支合并过来\n\n\n1\n2\n\n\n\n# 删除分支\n\n$ git branch -d hotfix # d表示delete\n\n# 然后切回iss53继续工作\n$ git checkout iss53\n\n\n1\n2\n3\n4\n\n\n注意删除分支是在 branch 命令上\n\n\n# 多次提交之后合并分支\n\n假设你已经修正了 #53 问题，打算合并到master分支：\n\n$ git checkout master\n$ git merga iss53\n\n\n1\n2\n\n\n这看似和之前的合并区别不大。此时你的开发历史从一个更早的地方开始分叉开来（diverged）。 因为，master 分支所在提交并不是 iss53 分支所在提交的直接祖先，git 不得不做一些额外的工作。 出现这种情况的时候，git 会使用两个分支的末端所指的快照以及这两个分支的公共祖先，做一个简单的三方合并。\n\n和之前将分支指针向前推进所不同的是，git 将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。\n\n\n# 遇到冲突时的分支合并\n\n如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，git 就没法干净的合并它们，就产生了冲突。\n\n合并过程中出现conflict提升，表示有冲突\n\n$ git merge iss53\nauto-merging index.html\nconflict (content): merge conflict in index.html\nautomatic merge failed; fix conflicts and then commit the result.\n\n\n1\n2\n3\n4\n\n\n使用git status查看未合并状态。\n\n任何因包含合并冲突而有待解决的文件，都会以未合并状态标识出来。 git 会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：\n\n<<<<<<< head:index.html\n<div id=\"footer\">contact : email.support@github.com</div>\n=======\n<div id=\"footer\">\n please contact us at support@github.com\n</div>\n>>>>>>> iss53:index.html\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n你需要手动解决冲突，解决了所有文件里的冲突之后，对每个文件使用 git add 命令来将其标记为冲突已解决。 一旦暂存这些原本有冲突的文件，git 就会将它们标记为冲突已解决。\n\n如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入 git commit 来完成合并提交。",charsets:{cjk:!0}},{title:"Git分支-分支原理",frontmatter:{title:"Git分支-分支原理",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/4bef1a/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/20.Git%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%8E%9F%E7%90%86.html",relativePath:"Git学习笔记/20.文档笔记/20.Git分支-分支原理.md",key:"v-36670896",path:"/pages/4bef1a/",headers:[{level:3,title:"首次提交",slug:"首次提交",normalizedTitle:"首次提交",charIndex:130},{level:4,title:"小结：",slug:"小结",normalizedTitle:"小结：",charIndex:684},{level:3,title:"再次提交",slug:"再次提交",normalizedTitle:"再次提交",charIndex:823},{level:3,title:"Git 的分支",slug:"git-的分支",normalizedTitle:"git 的分支",charIndex:896},{level:3,title:"创建分支",slug:"创建分支",normalizedTitle:"创建分支",charIndex:1088},{level:3,title:"当前分支的指针",slug:"当前分支的指针",normalizedTitle:"当前分支的指针",charIndex:1252},{level:3,title:"查看当前所在分支",slug:"查看当前所在分支",normalizedTitle:"查看当前所在分支",charIndex:1432},{level:3,title:"分支切换",slug:"分支切换",normalizedTitle:"分支切换",charIndex:1771},{level:3,title:"创建分支同时切换",slug:"创建分支同时切换",normalizedTitle:"创建分支同时切换",charIndex:3223}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"首次提交 小结： 再次提交 Git 的分支 创建分支 当前分支的指针 查看当前所在分支 分支切换 创建分支同时切换",content:"# Git分支-分支原理\n\nGit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，Git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，Git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 SHA-1 哈希算法），然后会把当前版本的文件快照保存到 Git 仓库中 （Git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add README test.rb LICENSE\n$ git commit -m 'The initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，Git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 Git 仓库中这些校验和保存为树对象。随后，Git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，Git 就可以在需要的时候重现此次保存的快照。\n\n现在，Git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# Git 的分支\n\nGit 的分支，其实本质上仅仅是指向提交对象的可变指针。 Git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> Git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\nGit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\nGit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 HEAD 的特殊指针，指向当前所在的本地分支（译注：将 HEAD 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. HEAD 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (HEAD -> master, testing) add feature # f30ab提交对象 (HEAD当前所在分支 -> master分支，testing 分支)\n34ac2 Fixed bug # 34ac2 提交对象\n98ca9 The initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 HEAD 就指向 testing 分支了。\n\n\n\n图6. HEAD 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. HEAD 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 HEAD 随之移动 ▲\n\n这条命令做了两件事。 一是使 HEAD 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",normalizedContent:"# git分支-分支原理\n\ngit 处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同，git 鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。\n\n\n# 首次提交\n\n在进行提交操作时，git 会保存一个提交对象（commit object）。\n\n假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用 sha-1 哈希算法），然后会把当前版本的文件快照保存到 git 仓库中 （git 使用 blob 对象来保存它们），最终将校验和加入到暂存区域等待提交：\n\n$ git add readme test.rb license\n$ git commit -m 'the initial commit of my project'\n\n\n1\n2\n\n\n当使用 git commit 进行提交操作时，git 会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后在 git 仓库中这些校验和保存为树对象。随后，git 便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。 如此一来，git 就可以在需要的时候重现此次保存的快照。\n\n现在，git 仓库中有五个对象：三个 blob 对象（保存着文件快照）、一个 树对象 （记录着目录结构和 blob 对象索引）以及一个 提交对象（包含着指向前述树对象的指针和所有提交信息）。\n\n\n\n图1. 首次提交对象及其树结构 ▲\n\n# 小结：\n\n 1. git add 加入暂存操作，会为每个文件创建计算校验和，以及每个文件对应的文件快照（blob对象）。\n\n 2. git commit 提交操作，计算子目录或跟目录的校验和 保存为树对象。随后，创建一个提交对象，包含着指向树对象的指针和所有提交信息。\n\n\n# 再次提交\n\n做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针。\n\n\n\n图2. 提交对象及其父对象 ▲\n\n\n# git 的分支\n\ngit 的分支，其实本质上仅仅是指向提交对象的可变指针。 git 的默认分支名字是 master。 在多次提交操作之后，你其实已经有一个指向最后那个提交对象的 master 分支。 master 分支指针会在每次提交时自动向前移动。\n\n> git 的 master 分支并不是一个特殊分支。 它就跟其它分支完全没有区别。\n\n\n\n图3. 分支及其提交历史 ▲\n\n\n# 创建分支\n\ngit 是怎么创建新分支的呢？ 很简单，它只是为你创建了一个可以移动的新的指针。 比如，创建一个 testing 分支， 你需要使用 git branch 命令：\n\n$ git branch testing\n\n\n1\n\n\n这会在当前所在的提交对象上创建一个指针。\n\n\n\n图4. 两个指向相同提交历史的分支 ▲\n\n\n# 当前分支的指针\n\ngit 是怎么知道当前在哪一个分支上呢？ 很简单，它有一个名为 head 的特殊指针，指向当前所在的本地分支（译注：将 head 想象为当前分支的别名）。 在本例中，你仍然在 master 分支上。 因为 git branch 命令仅仅 创建 一个新分支，并不会自动切换到新分支中去。\n\n\n\n图5. head 指向当前所在的分支 ▲\n\n\n# 查看当前所在分支\n\n你可以简单地使用 git log 命令查看各个分支当前所指的对象。 提供这一功能的参数是 --decorate。\n\n$ git log --oneline --decorate\nf30ab (head -> master, testing) add feature # f30ab提交对象 (head当前所在分支 -> master分支，testing 分支)\n34ac2 fixed bug # 34ac2 提交对象\n98ca9 the initial commit of my project # 98ca9 提交对象\n\n\n1\n2\n3\n4\n\n\n正如你所见，当前 master 和 testing 分支均指向校验和以 f30ab 开头的提交对象。\n\n\n# 分支切换\n\n$ git checkout testing  # git checkout <分支名>\n\n\n1\n\n\n这样 head 就指向 testing 分支了。\n\n\n\n图6. head 指向当前所在的分支 ▲\n\n那么，这样的实现方式会给我们带来什么好处呢？ 现在不妨再提交一次：\n\n$ vim test.rb\n$ git commit -a -m 'made a change'\n\n\n1\n2\n\n\n\n\n图7. head 分支随着提交操作自动向前移动 ▲\n\n如图所示，你的 testing 分支向前移动了，但是 master 分支却没有，它仍然指向运行 git checkout 时所指的对象。 这就有意思了，现在我们切换回 master 分支看看：\n\n$ git checkout master\n\n\n1\n\n\n\n\n图8. 检出时 head 随之移动 ▲\n\n这条命令做了两件事。 一是使 head 指回 master 分支，二是将工作目录恢复成 master 分支所指向的快照内容。 也就是说，你现在做修改的话，项目将始于一个较旧的版本。 本质上来讲，这就是忽略 testing 分支所做的修改，以便于向另一个方向进行开发。\n\n我们不妨再稍微做些修改并提交：\n\n$ vim test.rb\n$ git commit -a -m 'made other changes'\n\n\n1\n2\n\n\n现在，这个项目的提交历史已经产生了分叉（参见 项目分叉历史）。 因为刚才你创建了一个新分支，并切换过去进行了一些工作，随后又切换回 master 分支进行了另外一些工作。 上述两次改动针对的是不同分支：你可以在不同分支间不断地来回切换和工作，并在时机成熟时将它们合并起来。 而所有这些工作，你需要的命令只有 branch、checkout 和 commit。\n\n\n\n图9. 项目分叉历史 ▲\n\n你可以简单地使用 git log 命令查看分叉历史。 运行 git log --oneline --decorate --graph --all ，它会输出你的提交历史、各个分支的指向以及项目的分支分叉情况。\n\n$ git log --oneline --decorate --graph --all\n* c2b9e (head, master) made other changes\n| * 87ab2 (testing) made a change\n|/\n* f30ab add feature\n* 34ac2 fixed bug\n* 98ca9 initial commit of my project\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n由于 git 的分支实质上仅是包含所指对象校验和（长度为 40 的 sha-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？\n\n这与过去大多数版本控制系统形成了鲜明的对比，它们在创建分支时，将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这样繁琐的过程通常需要好几秒钟，有时甚至需要好几分钟。所需时间的长短，完全取决于项目的规模。 而在 git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以寻找恰当的合并基础（译注：即共同祖先）也是同样的简单和高效。 这些高效的特性使得 git 鼓励开发人员频繁地创建和使用分支。\n\n\n# 创建分支同时切换\n\n通常我们会在创建一个新分支后立即切换过去，可以使用如下命令：\n\ngit checkout -b <newbranchname>\n\n\n1\n",charsets:{cjk:!0}},{title:"Git分支管理-查看分支",frontmatter:{title:"Git分支管理-查看分支",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/a399b3/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/40.Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86-%E6%9F%A5%E7%9C%8B%E5%88%86%E6%94%AF.html",relativePath:"Git学习笔记/20.文档笔记/40.Git分支管理-查看分支.md",key:"v-6272af7a",path:"/pages/a399b3/",headers:[{level:3,title:"查看分支",slug:"查看分支",normalizedTitle:"查看分支",charIndex:10},{level:3,title:"查看每个分支的最后提交",slug:"查看每个分支的最后提交",normalizedTitle:"查看每个分支的最后提交",charIndex:152},{level:3,title:"查看已(未)合并的分支",slug:"查看已-未-合并的分支",normalizedTitle:"查看已(未)合并的分支",charIndex:297},{level:4,title:"查看指定分支的已(未)合并的分支",slug:"查看指定分支的已-未-合并的分支",normalizedTitle:"查看指定分支的已(未)合并的分支",charIndex:765}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"查看分支 查看每个分支的最后提交 查看已(未)合并的分支 查看指定分支的已(未)合并的分支",content:"# Git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 Merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: The branch 'testing' is not fully merged.\nIf you are sure you want to delete it, run 'git branch -D testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -D testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topicA\n  featureB\n\n\n1\n2\n3\n",normalizedContent:"# git分支管理-查看分支\n\n\n# 查看分支\n\n$ git branch\n  iss53\n* master  # 带星号*表示当前所在分支\n  testing\n\n\n1\n2\n3\n4\n\n\ngit branch 命令不只是可以创建与删除分支。 如果不加任何参数运行它，会得到当前所有分支的一个列表。\n\n\n# 查看每个分支的最后提交\n\n$ git branch -v\n  iss53   93b412c fix javascript issue\n* master  7a98805 merge branch 'iss53'\n  testing 782fd34 test\n\n\n1\n2\n3\n4\n\n\n\n# 查看已(未)合并的分支\n\n--merged 与 --no-merged 这两个选项可以查看哪些分支已经合并或未合并到 当前 分支。\n\n$ git branch --merged # 查看已合并分支列表\n  iss53\n* master\n\n\n1\n2\n3\n\n\n上面列表中分支名字前没有 * 号的分支通常可以使用 git branch -d 删除掉；\n\n$ git branch --no-merged # 查看未合并的分支列表\n  testing\n\n\n1\n2\n\n\n上面显示未合并的分支，尝试使用 git branch -d 命令删除它时会失败：\n\n$ git branch -d testing\nerror: the branch 'testing' is not fully merged.\nif you are sure you want to delete it, run 'git branch -d testing'.\n\n\n1\n2\n3\n\n\n强制删除未合并的分支:\n\n$ git branch -d testing\n\n\n1\n\n\n# 查看指定分支的已(未)合并的分支\n\n上面描述的选项 --merged 和 --no-merged 会在没有给定提交或分支名作为参数时， 分别列出已合并或未合并到 当前 分支的分支。\n\n你总是可以提供一个附加的参数来查看其它分支的合并状态而不必检出它们。 例如，尚未合并到 testing 分支的有哪些？\n\n$ git branch --no-merged testing\n  topica\n  featureb\n\n\n1\n2\n3\n",charsets:{cjk:!0}},{title:"Git分支开发工作流",frontmatter:{title:"Git分支开发工作流",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/49ee30/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/50.Git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81.html",relativePath:"Git学习笔记/20.文档笔记/50.Git分支开发工作流.md",key:"v-36651a58",path:"/pages/49ee30/",headers:[{level:3,title:"长期分支",slug:"长期分支",normalizedTitle:"长期分支",charIndex:32},{level:3,title:"主题分支 (短期分支)",slug:"主题分支-短期分支",normalizedTitle:"主题分支 (短期分支)",charIndex:625}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"长期分支 主题分支 (短期分支)",content:"# Git分支开发工作流\n\n文档：Git分支开发工作流\n\n\n# 长期分支\n\n因为 Git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 Git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在dev分支，开发完成后并入test分支进行测试，通过测试的稳定代码才并入master分支中。\n\ndev和test分支不需要保持绝对稳定，但在test通过测试达到稳定状态，就可以被合并入master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 C1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 C4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 C10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 C5 和 C6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 Git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 Git 版本库中 —— 没有与服务器发生交互。",normalizedContent:"# git分支开发工作流\n\n文档：git分支开发工作流\n\n\n# 长期分支\n\n因为 git 使用简单的三方合并，所以就算在一段较长的时间内，反复把一个分支合并入另一个分支，也不是什么难事。 也就是说，在整个项目开发周期的不同阶段，你可以同时拥有多个开放的分支；你可以定期地把某些主题分支合并入其他分支中。\n\n许多使用 git 的开发者都喜欢使用这种方式来工作，比如只在 master 分支上保留完全稳定的代码，开发过程在dev分支，开发完成后并入test分支进行测试，通过测试的稳定代码才并入master分支中。\n\ndev和test分支不需要保持绝对稳定，但在test通过测试达到稳定状态，就可以被合并入master分支。\n\n事实上我们刚才讨论的，是随着你的提交而不断右移的指针。 稳定分支(master)的指针总是在提交历史中落后一大截，而前沿分支(dev或test)的指针往往比较靠前。\n\n你可以用这种方法维护不同层次的稳定性。 一些大型项目还有一个 proposed（建议） 或 pu: proposed updates（建议更新）分支，它可能因包含一些不成熟的内容而不能进入master 分支。 这么做的目的是使你的分支具有不同级别的稳定性；当它们具有一定程度的稳定性后，再把它们合并入具有更高级别稳定性的分支中。 再次强调一下，使用多个长期分支的方法并非必要，但是这么做通常很有帮助，尤其是当你在一个非常庞大或者复杂的项目中工作时。\n\n\n# 主题分支 (短期分支)\n\n主题分支对任何规模的项目都适用。 主题分支是一种短期分支，它被用来实现单一特性或其相关工作。\n\n你已经在上一节中你创建的 iss53 和 hotfix 主题分支中看到过这种用法。 你在上一节用到的主题分支（iss53 和 hotfix 分支）中提交了一些更新，并且在它们合并入主干分支之后，你又删除了它们。 这项技术能使你快速并且完整地进行上下文切换（context-switch）——因为你的工作被分散到不同的流水线中，在不同的流水线中每个分支都仅与其目标特性相关，因此，在做代码审查之类的工作的时候就能更加容易地看出你做了哪些改动。 你可以把做出的改动在主题分支中保留几分钟、几天甚至几个月，等它们成熟之后再合并，而不用在乎它们建立的顺序或工作进度。\n\n考虑这样一个例子，你在 master 分支上工作到 c1，这时为了解决一个问题而新建 iss91 分支，在 iss91 分支上工作到 c4，然而对于那个问题你又有了新的想法，于是你再新建一个 iss91v2 分支试图用另一种方法解决那个问题，接着你回到 master 分支工作了一会儿，你又冒出了一个不太确定的想法，你便在 c10 的时候新建一个 dumbidea 分支，并在上面做些实验。 你的提交历史看起来像下面这个样子：\n\n\n\n图1. 拥有多个主题分支的提交历史 ▲\n\n现在，我们假设两件事情：你决定使用第二个方案来解决那个问题，即使用在 iss91v2 分支中方案。 另外，你将 dumbidea 分支拿给你的同事看过之后，结果发现这是个惊人之举。 这时你可以抛弃 iss91 分支（即丢弃 c5 和 c6 提交），然后把另外两个分支合并入主干分支。 最终你的提交历史看起来像下面这个样子：\n\n\n\n图2. 合并了 dumbidea 和 iss91v2 分支之后的提交历史 ▲\n\n我们将会在 分布式 git 中向你揭示更多有关分支工作流的细节， 因此，请确保你阅读完那个章节之后，再来决定你的下个项目要使用什么样的分支策略（branching scheme）。\n\n请牢记，当你做这么多操作的时候，这些分支全部都存于本地。 当你新建和合并分支的时候，所有这一切都只发生在你本地的 git 版本库中 —— 没有与服务器发生交互。",charsets:{cjk:!0}},{title:"Git分支-远程分支",frontmatter:{title:"Git分支-远程分支",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/574d62/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/60.Git%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF.html",relativePath:"Git学习笔记/20.文档笔记/60.Git分支-远程分支.md",key:"v-5512fcca",path:"/pages/574d62/",headers:[{level:3,title:"查看远程引用列表与信息",slug:"查看远程引用列表与信息",normalizedTitle:"查看远程引用列表与信息",charIndex:71},{level:3,title:"远程跟踪分支",slug:"远程跟踪分支",normalizedTitle:"远程跟踪分支",charIndex:184},{level:3,title:"推送",slug:"推送",normalizedTitle:"推送",charIndex:432},{level:4,title:"重命名远程仓库上的分支名",slug:"重命名远程仓库上的分支名",normalizedTitle:"重命名远程仓库上的分支名",charIndex:2723},{level:3,title:"跟踪分支",slug:"跟踪分支",normalizedTitle:"跟踪分支",charIndex:186},{level:3,title:"查看跟踪分支",slug:"查看跟踪分支",normalizedTitle:"查看跟踪分支",charIndex:5263},{level:3,title:"拉取",slug:"拉取",normalizedTitle:"拉取",charIndex:605},{level:3,title:"删除远程分支",slug:"删除远程分支",normalizedTitle:"删除远程分支",charIndex:6361}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"查看远程引用列表与信息 远程跟踪分支 推送 重命名远程仓库上的分支名 跟踪分支 查看跟踪分支 拉取 删除远程分支",content:"# Git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， Git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 Git 服务器。 如果你从这里克隆，Git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 Git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n笔记：从远程克隆下来的仓库有一个叫origin/master的远程跟踪分支 和 一个本地的master分支\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 Git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 Git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 URL 的缩写。远程仓库名本质上是远程URL的缩写\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 Git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 Git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 Git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nNOTE   如何避免每次输入密码如果你正在使用 HTTPS URL 来推送，GIT 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “CREDENTIAL CACHE”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 GIT CONFIG\n       --GLOBAL CREDENTIAL.HELPER CACHE 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 Git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nNOTE   上游快捷方式当设置好跟踪分支后，可以通过简写 @{UPSTREAM} 或 @{U} 来引用它的上游分支。 所以在\n       MASTER 分支时并且它正在跟踪 ORIGIN/MASTER 时，如果愿意的话可以使用 GIT MERGE @{U}\n       来取代 GIT MERGE ORIGIN/MASTER。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nTo https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",normalizedContent:"# git分支-远程分支\n\n远程引用是对远程仓库的引用（指针），包括分支、标签等等。\n\n> 远程分支本质上也是一个指针，指向远程地址\n\n\n# 查看远程引用列表与信息\n\ngit ls-remote <remote> # 远程引用的完整列表\ngit remote show <remote> # 远程分支的更多信息\n\n\n1\n2\n\n\n上面两行命令比较少用，更常见的做法是利用远程跟踪分支。\n\n\n# 远程跟踪分支\n\n远程跟踪分支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信， git 就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。\n\n它们以 <remote>/<branch> 的形式命名。 例如，如果你想要查看最后一次与远程仓库 origin 通信时 master 分支的状态，你可以查看 origin/master 分支。 你与同事合作解决一个问题并且他们推送了一个 iss53 分支，你可能有自己的本地 iss53 分支， 然而在服务器上的分支会以 origin/iss53 来表示。\n\n这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在 git.ourcompany.com 的 git 服务器。 如果你从这里克隆，git 的 clone 命令会为你自动将其命名为 origin，拉取它的所有数据， 创建一个指向它的 master 分支的指针，并且在本地将其命名为 origin/master。 git 也会给你一个与 origin 的 master 分支在指向同一个地方的本地 master 分支，这样你就有工作的基础。\n\n笔记：从远程克隆下来的仓库有一个叫origin/master的远程跟踪分支 和 一个本地的master分支\n\n> 笔记：“origin” 并无特殊含义远程仓库名字 “origin” 与分支名字 “master” 一样，在 git 中并没有任何特别的含义一样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛使用， “origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone -o booyah，那么你默认的远程分支名字将会是 booyah/master。\n\n\n\n图1. 克隆之后的服务器与本地仓库 ▲\n\n如果你在本地的 master 分支做了一些工作，在同一段时间内有其他人推送提交到 git.ourcompany.com 并且更新了它的 master 分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与 origin 服务器连接（并拉取数据），你的 origin/master 指针就不会移动。\n\n\n\n图2. 本地与远程的工作可以分叉 ▲\n\n如果要与给定的远程仓库同步数据，运行 git fetch <remote> 命令（在本例中为 git fetch origin）。 这个命令查找 “origin” 是哪一个服务器（在本例中，它是 git.ourcompany.com）， 从中抓取本地没有的数据，并且更新本地数据库，移动 origin/master 指针到更新之后的位置。\n\n\n\n图3. git fetch 更新你的远程跟踪分支 ▲\n\n笔记: 本地的 master 分支 可能 和 远程跟踪分支 origin/master 分叉\n\n为了演示有多个远程仓库与远程分支的情况，我们假定你有另一个内部 git 服务器，仅服务于你的某个敏捷开发团队。 这个服务器位于 git.team1.ourcompany.com。 你可以运行 git remote add 命令添加一个新的远程仓库引用到当前的项目，这个命令我们会在 git 基础 中详细说明。 将这个远程仓库命名为 teamone，将其作为完整 url 的缩写。远程仓库名本质上是远程url的缩写\n\n\n\n图4. 添加另一个远程仓库 ▲\n\n现在，可以运行 git fetch teamone 来抓取远程仓库 teamone 有而本地没有的数据。 因为那台服务器上现有的数据是 origin 服务器上的一个子集， 所以 git 并不会抓取数据而是会设置远程跟踪分支 teamone/master 指向 teamone 的 master 分支。\n\n\n\n图5. 远程跟踪分支 teamone/master ▲\n\n\n# 推送\n\n当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。 本地的分支并不会自动与远程仓库同步——你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。\n\n如果希望和别人一起在名为 serverfix 的分支上工作，你可以像推送第一个分支那样推送它。 运行 git push <remote> <branch>:\n\n$ git push origin serverfix\ncounting objects: 24, done.\ndelta compression using up to 8 threads.\ncompressing objects: 100% (15/15), done.\nwriting objects: 100% (24/24), 1.91 kib | 0 bytes/s, done.\ntotal 24 (delta 2), reused 0 (delta 0)\nto https://github.com/schacon/simplegit\n * [new branch]      serverfix -> serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n这里有些工作被简化了。 git 自动将 serverfix 分支名字展开为 refs/heads/serverfix:refs/heads/serverfix， 那意味着，“推送本地的 serverfix 分支来更新远程仓库上的 serverfix 分支。” 我们将会详细学习 git 内部原理 的 refs/heads/ 部分， 但是现在可以先把它放在儿。你也可以运行 git push origin serverfix:serverfix， 它会做同样的事——也就是说“推送本地的 serverfix 分支，将其作为远程仓库的 serverfix 分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。\n\n# 重命名远程仓库上的分支名\n\n如果并不想让远程仓库上的分支叫做 serverfix，可以运行 git push origin serverfix:awesomebranch 来将本地的 serverfix 分支推送到远程仓库上的 awesomebranch 分支。\n\nnote   如何避免每次输入密码如果你正在使用 https url 来推送，git 服务器会询问用户名与密码。\n       默认情况下它会在终端中提示服务器是否允许你进行推送。如果不想在每一次推送时都输入用户名与密码，你可以设置一个\n       “credential cache”。 最简单的方式就是将其保存在内存中几分钟，可以简单地运行 git config\n       --global credential.helper cache 来设置它。想要了解更多关于不同验证缓存的可用选项，查看\n       凭证存储。\n       \n\n下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n\n$ git fetch origin\nremote: counting objects: 7, done.\nremote: compressing objects: 100% (2/2), done.\nremote: total 3 (delta 0), reused 3 (delta 0)\nunpacking objects: 100% (3/3), done.\nfrom https://github.com/schacon/simplegit\n * [new branch]      serverfix    -> origin/serverfix\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支——只有一个不可以修改的 origin/serverfix 指针。\n\n可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n\n$ git checkout -b serverfix origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n\n\n# 跟踪分支\n\n从一个远程跟踪分支检出一个本地分支会自动创建所谓的“跟踪分支”（它跟踪的分支叫做“上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪 master 分支。 最简单的实例就是像之前看到的那样，运行 git checkout -b <branch> <remote>/<branch>。 这是一个十分常用的操作所以 git 提供了 --track 快捷方式：\n\n$ git checkout --track origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么 git 就会为你创建一个跟踪分支：\n\n$ git checkout serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\nswitched to a new branch 'serverfix'\n\n\n1\n2\n3\n\n\n如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：\n\n$ git checkout -b sf origin/serverfix\nbranch sf set up to track remote branch serverfix from origin.\nswitched to a new branch 'sf'\n\n\n1\n2\n3\n\n\n现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n\n$ git branch -u origin/serverfix\nbranch serverfix set up to track remote branch serverfix from origin.\n\n\n1\n2\n\n\nnote   上游快捷方式当设置好跟踪分支后，可以通过简写 @{upstream} 或 @{u} 来引用它的上游分支。 所以在\n       master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 git merge @{u}\n       来取代 git merge origin/master。\n       \n\n\n# 查看跟踪分支\n\n如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。\n\n$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new\n\n\n1\n2\n3\n4\n5\n\n\n这里可以看到 iss53 分支正在跟踪 origin/iss53 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 master 分支正在跟踪 origin/master 分支并且是最新的。 接下来可以看到 serverfix 分支正在跟踪 teamone 服务器上的 server-fix-good 分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 testing 分支并没有跟踪任何远程分支。\n\n需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。 如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。 可以像这样做：\n\n$ git fetch --all; git branch -vv\n\n\n1\n\n\n\n# 拉取\n\n当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个 git merge 命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过 clone 或 checkout 命令为你创建的，git pull 都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。\n\n由于 git pull 的魔法经常令人困惑所以通常单独显式地使用 fetch 与 merge 命令会更好一些。\n\n\n# 删除远程分支\n\n假设你已经通过远程分支做完所有的工作了——也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的 master 分支（或任何其他稳定代码分支）。 可以运行带有 --delete 选项的 git push 命令来删除一个远程分支。 如果想要从服务器上删除 serverfix 分支，运行下面的命令：\n\n$ git push origin --delete serverfix\nto https://github.com/schacon/simplegit\n - [deleted]         serverfix\n\n\n1\n2\n3\n\n\n基本上这个命令做的只是从服务器上移除这个指针。 git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。",charsets:{cjk:!0}},{title:"Git分支-变基",frontmatter:{title:"Git分支-变基",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/3a3247/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/70.Git%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA.html",relativePath:"Git学习笔记/20.文档笔记/70.Git分支-变基.md",key:"v-1b991e46",path:"/pages/3a3247/",headers:[{level:2,title:"变基的基本操作",slug:"变基的基本操作",normalizedTitle:"变基的基本操作",charIndex:117},{level:3,title:"概念",slug:"概念",normalizedTitle:"概念",charIndex:312},{level:3,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:728},{level:3,title:"步骤",slug:"步骤",normalizedTitle:"步骤",charIndex:1138},{level:3,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:1701},{level:2,title:"更有趣的变基例子",slug:"更有趣的变基例子",normalizedTitle:"更有趣的变基例子",charIndex:1727},{level:3,title:"更有趣的变基例子",slug:"更有趣的变基例子-2",normalizedTitle:"更有趣的变基例子",charIndex:1727},{level:3,title:"--onto选项",slug:"onto选项",normalizedTitle:"--onto选项",charIndex:2530},{level:3,title:"省去先切换到源分支的步骤",slug:"省去先切换到源分支的步骤",normalizedTitle:"省去先切换到源分支的步骤",charIndex:2762},{level:2,title:"变基的风险",slug:"变基的风险",normalizedTitle:"变基的风险",charIndex:3415},{level:3,title:"金科玉律",slug:"金科玉律",normalizedTitle:"金科玉律",charIndex:3425},{level:3,title:"变基的实质",slug:"变基的实质",normalizedTitle:"变基的实质",charIndex:3615},{level:2,title:"用变基解决变基",slug:"用变基解决变基",normalizedTitle:"用变基解决变基",charIndex:4412},{level:2,title:"变基 vs. 合并",slug:"变基-vs-合并",normalizedTitle:"变基 vs. 合并",charIndex:5550}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"变基的基本操作 概念 原理 步骤 优点 更有趣的变基例子 更有趣的变基例子 --onto选项 省去先切换到源分支的步骤 变基的风险 金科玉律 变基的实质 用变基解决变基 变基 vs. 合并",content:"# Git分支-变基\n\n在 Git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了merge，还有一种方法：你可以提取在 C4 中引入的补丁和修改，然后在 C3 的基础上应用一次。 在 Git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n\n 2. 对比当前分支相对于该共同祖先的历次提交\n\n 3. 提取相应的修改并存为临时文件\n\n 4. 将当前分支指向目标分支\n\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 C4 中的修改变基到 C3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，C4' 指向的快照就和 the merge example 中 C5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 C3 和 C4。 然后从 C3 上创建了主题分支 client，为客户端添加了一些功能，提交了 C8 和 C9。 最后，你回到 server 分支，又提交了 C10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 C8 和 C9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中C分支中的但不在B分支里的修改，应用到A分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 C4 和 C6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，Git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，Git 除了对整个提交计算 SHA-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 Git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, Git 将会：\n\n * 检查哪些提交是我们的分支上独有的（C2，C3，C4，C6，C7）\n * 检查其中哪些提交不是合并操作的结果（C2，C3，C4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 C2 和 C3，因为 C4 其实就是 C4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 C4' 和 C4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 C4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",normalizedContent:"# git分支-变基\n\n在 git 中整合来自不同分支的修改主要有两种方法：merge 以及 rebase。 在本节中我们将学习什么是“变基”，怎样使用“变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。\n\n\n# 变基的基本操作\n\n请回顾之前在 分支的合并 中的一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。\n\n\n\n图0. 分叉的提交历史 ▲\n\n之前介绍过，整合分支最容易的方法是 merge 命令。 它会把两个分支的最新快照（c3 和 c4）以及二者最近的共同祖先（c2）进行三方合并，合并的结果是生成一个新的快照（并提交）。\n\n\n\n图1. 通过合并操作来整合分叉的历史 ▲\n\n\n# 概念\n\n变基就是：将某一分支上的所有修改复制到另一分支上\n\n除了merge，还有一种方法：你可以提取在 c4 中引入的补丁和修改，然后在 c3 的基础上应用一次。 在 git 中，这种操作就叫做 变基（rebase）。 你可以使用 rebase 命令将提交到某一分支上的所有修改都移到另一分支上，就好像“重新播放”一样。\n\n在这个例子中，你可以检出 experiment 分支，然后将它变基到 master 分支上：\n\n$ git checkout experiment\n$ git rebase master # 将experiment上的修改变基到master分支上（将experiment的提交移动到master上。）\nfirst, rewinding head to replay your work on top of it...\napplying: added staged command\n\n\n1\n2\n3\n4\n\n\n它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 c2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， 然后将当前分支指向目标基底 c3, 最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit id，以便理解，下同）\n\n\n# 原理\n\n 1. 找到当前分支和目标分支的最近共同祖先\n\n 2. 对比当前分支相对于该共同祖先的历次提交\n\n 3. 提取相应的修改并存为临时文件\n\n 4. 将当前分支指向目标分支\n\n 5. 将之前临时文件的修改依序应用\n\n\n\n图2.将 c4 中的修改变基到 c3 上 ▲\n\n现在回到 master 分支，进行一次快进合并。\n\n$ git checkout master\n$ git merge experiment\n\n\n1\n2\n\n\n\n\n图3.master 分支的快进合并 ▲\n\n\n# 步骤\n\n先检出源分支，将源分支的修改变基到目标分支。切回目标分支，进行一次快进合并\n\n# 示意：\ngit checkout <源分支>\ngit (源分支的修改)rebase(到) <目标分支>\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n4\n5\n\n\n此时，c4' 指向的快照就和 the merge example 中 c5 指向的快照一模一样了。 这两种整合方法的最终结果没有任何区别，但是 变基使得提交历史更加整洁。 你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的， 但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。\n\n一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。\n\n请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。\n\n\n# 优点\n\n变基的优点： 使提交记录更加整洁。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n# 更有趣的变基例子\n\n在对两个分支进行变基时，所生成的“重放”并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 就像 从一个主题分支里再分出一个主题分支的提交历史 中的例子那样。 你创建了一个主题分支 server，为服务端添加了一些功能，提交了 c3 和 c4。 然后从 c3 上创建了主题分支 client，为客户端添加了一些功能，提交了 c8 和 c9。 最后，你回到 server 分支，又提交了 c10。\n\n\n\n图4.从一个主题分支里再分出一个主题分支的提交历史 ▲\n\n假设你希望将 client 中的修改合并到主分支并发布，但暂时并不想合并 server 中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用 git rebase 命令的 --onto 选项， 选中在 client 分支里但不在 server 分支里的修改（即 c8 和 c9），将它们在 master 分支上重放：\n\n$ git rebase --onto master server client\n\n\n1\n\n\n以上命令的意思是：“取出 client 分支，找出它从 server 分支分歧之后的补丁， 然后把这些补丁在 master 分支上重放一遍，让 client 看起来像直接基于 master 修改一样”。这理解起来有一点复杂，不过效果非常酷。\n\n\n# --onto选项\n\n选中c分支中的但不在b分支里的修改，应用到a分支。\n\n\n\n图5.截取主题分支上的另一个主题分支，然后变基到其他分支 ▲\n\n现在可以快进合并 master 分支了。（如图 快进合并 master 分支，使之包含来自 client 分支的修改）：\n\n$ git checkout master\n$ git merge client\n\n\n1\n2\n\n\n\n\n图6.快进合并 `master` 分支，使之包含来自 `client` 分支的修改 ▲\n\n\n# 省去先切换到源分支的步骤\n\ngit rebase <目标(当前)分支> <源分支> # 将源分支变基到目标分支。执行此命令后会自动切换到源分支\ngit checkout <目标分支>\ngit merge <源分支>\n\n\n1\n2\n3\n\n\n注意：使用这个方法要确保源分支上的代码是最新的。\n\n接下来你决定将 server 分支中的修改也整合进来。 使用 git rebase <basebranch> <topicbranch> 命令可以直接将主题分支 （即本例中的 server）变基到目标分支（即 master）上。 这样做能省去你先切换到 server 分支，再对其执行变基命令的多个步骤。\n\n$ git rebase master server\n\n\n1\n\n\n如图 将 server 中的修改变基到 master 上 所示，server 中的代码被“续”到了 master 后面。\n\n\n\n图7.将 `server` 中的修改变基到 `master` 上 ▲\n\n然后就可以快进合并主分支 master 了：\n\n$ git checkout master\n$ git merge server\n\n\n1\n2\n\n\n至此，client 和 server 分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成图 最终的提交历史 中的样子：\n\n$ git branch -d client\n$ git branch -d server\n\n\n1\n2\n\n\n\n\n图8. 最终的提交历史 ▲\n\n\n# 变基的风险\n\n\n# 金科玉律\n\n呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：\n\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。\n\n如果你遵循这条金科玉律，就不会出差错。 否则，人民群众会仇恨你，你的朋友和家人也会嘲笑你，唾弃你。\n\n提示\n\n例如：几个人同时在一个主题分支上进行开发和提交时，你不要中途执行变基，只有在大家都完成工作之后才可以执行变基。\n\n\n# 变基的实质\n\n变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 git rebase 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。\n\n让我们来看一个在公开的仓库上执行变基操作所带来的问题。 假设你从一个中央服务器克隆然后在它的基础上进行了一些开发。 你的提交历史如图所示：\n\n\n\n图9. 克隆一个仓库，然后在它的基础上进行了一些开发 ▲\n\n然后，某人又向中央服务器提交了一些修改，其中还包括一次合并。 你抓取了这些在远程分支上的修改，并将其合并到你本地的开发分支，然后你的提交历史就会变成这样：\n\n\n\n图10. 抓取别人的提交，合并到自己的开发分支 ▲\n\n接下来，这个人又决定把合并操作回滚，改用变基；继而又用 git push --force 命令覆盖了服务器上的提交历史。 之后你从服务器抓取更新，会发现多出来一些新的提交。\n\n\n\n图11. 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 ▲\n\n结果就是你们两人的处境都十分尴尬。 如果你执行 git pull 命令，你将合并来自两条提交历史的内容，生成一个新的合并提交，最终仓库会如图所示：\n\n\n\n图12. 你将相同的内容又合并了一次，生成了一个新的提交 ▲\n\n此时如果你执行 git log 命令，你会发现有两个提交的作者、日期、日志居然是一样的，这会令人感到混乱。 此外，如果你将这一堆又推送到服务器上，你实际上是将那些已经被变基抛弃的提交又找了回来，这会令人感到更加混乱。 很明显对方并不想在提交历史中看到 c4 和 c6，因为之前就是他把这两个提交通过变基丢弃的。\n\n\n# 用变基解决变基\n\n如果你 真的 遭遇了类似的处境，git 还有一些高级魔法可以帮到你。 如果团队中的某人强制推送并覆盖了一些你所基于的提交，你需要做的就是检查你做了哪些修改，以及他们覆盖了哪些修改。\n\n实际上，git 除了对整个提交计算 sha-1 校验和以外，也对本次提交所引入的修改计算了校验和——即 “patch-id”。\n\n如果你拉取被覆盖过的更新并将你手头的工作基于此进行变基的话，一般情况下 git 都能成功分辨出哪些是你的修改，并把它们应用到新分支上。\n\n举个例子，如果遇到前面提到的 有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交 那种情境，如果我们不是执行合并，而是执行 git rebase teamone/master, git 将会：\n\n * 检查哪些提交是我们的分支上独有的（c2，c3，c4，c6，c7）\n * 检查其中哪些提交不是合并操作的结果（c2，c3，c4）\n * 检查哪些提交在对方覆盖更新时并没有被纳入目标分支（只有 c2 和 c3，因为 c4 其实就是 c4'）\n * 把查到的这些提交应用在 teamone/master 上面\n\n从而我们将得到与 你将相同的内容又合并了一次，生成了一个新的提交 中不同的结果，如图 在一个被变基然后强制推送的分支上再次执行变基 所示。\n\n\n\n图13. 在一个被变基然后强制推送的分支上再次执行变基 ▲\n\n要想上述方案有效，还需要对方在变基时确保 c4' 和 c4 是几乎一样的。 否则变基操作将无法识别，并新建另一个类似 c4 的补丁（而这个补丁很可能无法整洁的整合入历史，因为补丁中的修改已经存在于某个地方了）。\n\n在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动完成这个过程，先 git fetch，再 git rebase teamone/master。\n\n如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config --global pull.rebase true 来更改 pull.rebase 的默认配置。\n\n如果你只对不会离开你电脑的提交执行变基，那就不会有事。 如果你对已经推送过的提交执行变基，但别人没有基于它的提交，那么也不会有事。 如果你对已经推送至共用仓库的提交上执行变基命令，并因此丢失了一些别人的开发所基于的提交， 那你就有大麻烦了，你的同事也会因此鄙视你。\n\n如果你或你的同事在某些情形下决意要这么做，请一定要通知每个人执行 git pull --rebase 命令，这样尽管不能避免伤痛，但能有所缓解。\n\n\n# 变基 vs. 合并\n\n至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。\n\n有一种观点认为，仓库的提交历史即是 记录实际发生过什么。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 谎言 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。\n\n另一种观点则正好相反，他们认为提交历史是 项目过程中发生的事。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 rebase 及 filter-branch 等工具来编写故事，怎么方便后来的读者就怎么写。\n\n现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。\n\n总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。",charsets:{cjk:!0}},{title:"Git工具-查看修订版本",frontmatter:{title:"Git工具-查看修订版本",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/c984d1/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/80.Git%E5%B7%A5%E5%85%B7-%E6%9F%A5%E7%9C%8B%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC.html",relativePath:"Git学习笔记/20.文档笔记/80.Git工具-查看修订版本.md",key:"v-9120984c",path:"/pages/c984d1/",headers:[{level:2,title:"单个修订版本",slug:"单个修订版本",normalizedTitle:"单个修订版本",charIndex:91},{level:2,title:"简短的 SHA-1",slug:"简短的-sha-1",normalizedTitle:"简短的 sha-1",charIndex:181},{level:3,title:"查看给定SHA-1值的提交",slug:"查看给定sha-1值的提交",normalizedTitle:"查看给定sha-1值的提交",charIndex:956},{level:2,title:"分支引用",slug:"分支引用",normalizedTitle:"分支引用",charIndex:2177},{level:3,title:"查看最后一次提交",slug:"查看最后一次提交",normalizedTitle:"查看最后一次提交",charIndex:2252},{level:2,title:"引用日志",slug:"引用日志",normalizedTitle:"引用日志",charIndex:2696},{level:3,title:"HEAD的指向历史",slug:"head的指向历史",normalizedTitle:"head的指向历史",charIndex:2705},{level:2,title:"祖先引用",slug:"祖先引用",normalizedTitle:"祖先引用",charIndex:4613},{level:2,title:"提交区间",slug:"提交区间",normalizedTitle:"提交区间",charIndex:6634},{level:3,title:"双点",slug:"双点",normalizedTitle:"双点",charIndex:6735},{level:4,title:"查看即将推送到远端的内容",slug:"查看即将推送到远端的内容",normalizedTitle:"查看即将推送到远端的内容",charIndex:7262},{level:3,title:"多点",slug:"多点",normalizedTitle:"多点",charIndex:7606},{level:3,title:"三点",slug:"三点",normalizedTitle:"三点",charIndex:8032}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"单个修订版本 简短的 SHA-1 查看给定SHA-1值的提交 分支引用 查看最后一次提交 引用日志 HEAD的指向历史 祖先引用 提交区间 双点 查看即将推送到远端的内容 多点 三点",content:"# Git工具-查看修订版本\n\nGit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 SHA-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 SHA-1\n\nGit 十分智能，你只需要提供 SHA-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 SHA-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 SHA-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定SHA-1值的提交\n\n在本例中，假设你想要的提交其 SHA-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\nGit 可以为 SHA-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 SHA-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 SHA-1 的歧义。 例如，到 2019 年 2 月为止，Linux 内核这个相当大的 Git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nNOTE   关于 SHA-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 SHA-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个 不同 对象的 SHA-1 值相同， GIT\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 SHA-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 P =\n       (N(N-1)/2) * (1/2^160)) ）。 2^80 是 1.2 X\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 SHA-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 LINUX 内核历史（650 万个 GIT\n       对象）的代码， 并将之提交到一个巨大的 GIT 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 SHA-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 Git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 SHA-1，或者想看任何一个例子中被简写的 SHA-1， 你可以使用一个叫做 rev-parse 的 Git 探测工具。 你可以在 Git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 Git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# HEAD的指向历史\n\n当你在工作时， Git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 HEAD 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b HEAD@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 HEAD@{1}: merge phedders/rdocs: Merge made by the 'recursive' strategy.\n1c002dd HEAD@{2}: commit: added some blame and merge stuff\n1c36188 HEAD@{3}: rebase -i (squash): updating HEAD\n95df984 HEAD@{4}: commit: # This is a combination of two commits.\n1c36188 HEAD@{5}: rebase -i (squash): updating HEAD\n7e05da5 HEAD@{6}: rebase -i (pick): updating HEAD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 HEAD 所指向的位置发生了变化，Git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 HEAD 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show HEAD@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nReflog: master@{0} (Scott Chacon <schacon@gmail.com>)\nReflog message: commit: fixed refs handling, added gc auto, updated\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Fri Jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nReflog: master@{1} (Scott Chacon <schacon@gmail.com>)\nReflog message: merge phedders/rdocs: Merge made by recursive.\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show HEAD@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\nTIP   将引用日志想作 GIT 版的 SHELL 历史记录如果你有 UNIX 或者 LINUX 的背景，不妨将引用日志想作\n      GIT 版的 SHELL 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， Git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 Merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b Some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 HEAD^ 来查看上一个提交，也就是 “HEAD 的父提交”：\n\n$ git show HEAD^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nMerge: 1c002dd... 35cfb2b...\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 15:08:43 2008 -0800\n\n    Merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nNOTE   在 WINDOWS 上转义脱字符在 WINDOWS 的 CMD.EXE 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ GIT SHOW HEAD^ # 在 WINDOWS 上无法工作 $ GIT\n       SHOW HEAD^^ # 可以 $ GIT SHOW \"HEAD^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nAuthor: Scott Chacon <schacon@gmail.com>\nDate:   Thu Dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nAuthor: Paul Hedderly <paul+git@mjr.org>\nDate:   Wed Dec 10 22:22:03 2008 +0000\n\n    Some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 HEAD~ 和 HEAD^ 是等价的。 而区别在于你在后面加数字的时候。 HEAD~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——Git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，HEAD~3 就是\n\n$ git show HEAD~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 HEAD~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show HEAD~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nAuthor: Tom Preston-Werner <tom@mojombo.com>\nDate:   Fri Nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 HEAD~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 Git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 Example history for range selection.\n\n\n\nFigure 137. Example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 Git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nD\nC\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nF\nE\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..HEAD\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..HEAD 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， Git 会默认为 HEAD。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— Git 使用 HEAD 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 Git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refA..refB\n$ git log ^refA refB\n$ git log refB --not refA\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refA 或 refB 包含的但是不被 refC 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refA refB ^refC\n$ git log refA refB --not refC\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nF\nE\nD\nC\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< F\n< E\n> D\n> C\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 Git 仓库中的提交。",normalizedContent:"# git工具-查看修订版本\n\ngit 能够以多种方式来指定单个提交、一组提交、或者一定范围内的提交。 了解它们并不是必需的，但是了解一下总没坏处。\n\n修订版本指的是：提交\n\n\n# 单个修订版本\n\n你可以通过任意一个提交的 40 个字符的完整 sha-1 散列值来指定它， 不过还有很多更人性化的方式来做同样的事情。本节将会介绍获取单个提交的多种方法。\n\n\n# 简短的 sha-1\n\ngit 十分智能，你只需要提供 sha-1 的前几个字符就可以获得对应的那次提交， 当然你提供的 sha-1 字符数量不得少于 4 个，并且没有歧义——也就是说， 当前对象数据库中没有其它对象以这段 sha-1 开头。\n\n例如，要查看你知道其中添加了某个功能的提交，首先运行 git log 命令来定位该提交：\n\n$ git log\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 查看给定sha-1值的提交\n\n在本例中，假设你想要的提交其 sha-1 以 1c002dd.... 开头， 那么你可以用如下几种 git show 的变体来检视该提交（假设简短的版本没有歧义）：\n\n$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b\n$ git show 1c002dd4b536e7479f\n$ git show 1c002d\n\n\n1\n2\n3\n\n\ngit 可以为 sha-1 值生成出简短且唯一的缩写。 如果你在 git log 后加上 --abbrev-commit 参数，输出结果里就会显示简短且唯一的值； 默认使用七个字符，不过有时为了避免 sha-1 的歧义，会增加字符数：\n\n$ git log --abbrev-commit --pretty=oneline\nca82a6d changed the version number\n085bb3b removed unnecessary test code\na11bef0 first commit\n\n\n1\n2\n3\n4\n\n\n通常 8 到 10 个字符就已经足够在一个项目中避免 sha-1 的歧义。 例如，到 2019 年 2 月为止，linux 内核这个相当大的 git 项目， 其对象数据库中有超过 875,000 个提交，包含七百万个对象，也只需要前 12 个字符就能保证唯一性。\n\nnote   关于 sha-1 的简短说明许多人觉得他们的仓库里有可能出现两个不同的对象其 sha-1 值相同。\n       然后呢？如果你真的向仓库里提交了一个对象，它跟之前的某个 不同 对象的 sha-1 值相同， git\n       会发现该对象的散列值已经存在于仓库里了，于是就会认为该对象被写入，然后直接使用它。\n       如果之后你想检出那个对象时，你将得到先前那个对象的数据。但是这种情况发生的概率十分渺小。 sha-1 摘要长度是 20\n       字节，也就是 160 位。 2^80 个随机哈希对象才有 50% 的概率出现一次冲突 （计算冲突机率的公式是 p =\n       (n(n-1)/2) * (1/2^160)) ）。 2^80 是 1.2 x\n       10^24，也就是一亿亿亿，这是地球上沙粒总数的 1200 倍。举例说一下怎样才能产生一次 sha-1 冲突。\n       如果地球上 65 亿个人类都在编程，每人每秒都在产生等价于整个 linux 内核历史（650 万个 git\n       对象）的代码， 并将之提交到一个巨大的 git 仓库里面，这样持续两年的时间才会产生足够的对象， 使其拥有 50%\n       的概率产生一次 sha-1 对象冲突， 这比你编程团队的成员同一个晚上在互不相干的意外中被狼袭击并杀死的机率还要小。\n       \n\n\n# 分支引用\n\n引用特定提交的一种直接方法是，若它是一个分支的顶端的提交， 那么可以在任何需要引用该提交的 git 命令中直接使用该分支的名称。\n\n\n# 查看最后一次提交\n\n例如，你想要查看一个分支的最后一次提交的对象，假设 topic1 分支指向提交 ca82a6d... ， 那么以下的命令是等价的：\n\n$ git show ca82a6dff817ec66f44342007202690a93763949\n$ git show topic1  # topic1是分支名\n\n\n1\n2\n\n\n如果你想知道某个分支指向哪个特定的 sha-1，或者想看任何一个例子中被简写的 sha-1， 你可以使用一个叫做 rev-parse 的 git 探测工具。 你可以在 git 内部原理 中查看更多关于探测工具的信息。 简单来说，rev-parse 是为了底层操作而不是日常操作设计的。 不过，有时你想看 git 现在到底处于什么状态时，它可能会很有用。 你可以在你的分支上执行 rev-parse\n\n$ git rev-parse topic1\nca82a6dff817ec66f44342007202690a93763949\n\n\n1\n2\n\n\n\n# 引用日志\n\n\n# head的指向历史\n\n当你在工作时， git 会在后台保存一个引用日志（reflog）， 引用日志记录了最近几个月你的 head 和分支引用所指向的历史。\n\n你可以使用 git reflog 来查看引用日志\n\n$ git reflog\n734713b head@{0}: commit: fixed refs handling, added gc auto, updated\nd921970 head@{1}: merge phedders/rdocs: merge made by the 'recursive' strategy.\n1c002dd head@{2}: commit: added some blame and merge stuff\n1c36188 head@{3}: rebase -i (squash): updating head\n95df984 head@{4}: commit: # this is a combination of two commits.\n1c36188 head@{5}: rebase -i (squash): updating head\n7e05da5 head@{6}: rebase -i (pick): updating head\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n每当你的 head 所指向的位置发生了变化，git 就会将这个信息存储到引用日志这个历史记录里。 你也可以通过 reflog 数据来获取之前的提交历史。 如果你想查看仓库中 head 在五次前的所指向的提交，你可以使用 @{n} 来引用 reflog 中输出的提交记录。\n\n$ git show head@{5}\n\n\n1\n\n\n你同样可以使用这个语法来查看某个分支在一定时间前的位置。 例如，查看你的 master 分支在昨天的时候指向了哪个提交，你可以输入\n\n$ git show master@{yesterday}\n\n\n1\n\n\n就会显示昨天 master 分支的顶端指向了哪个提交。 这个方法只对还在你引用日志里的数据有用，所以不能用来查好几个月之前的提交。\n\n可以运行 git log -g 来查看类似于 git log 输出格式的引用日志信息：\n\n$ git log -g master\ncommit 734713bc047d87bf7eac9674765ae793478c50d3\nreflog: master@{0} (scott chacon <schacon@gmail.com>)\nreflog message: commit: fixed refs handling, added gc auto, updated\nauthor: scott chacon <schacon@gmail.com>\ndate:   fri jan 2 18:32:33 2009 -0800\n\n    fixed refs handling, added gc auto, updated tests\n\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nreflog: master@{1} (scott chacon <schacon@gmail.com>)\nreflog message: merge phedders/rdocs: merge made by recursive.\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n值得注意的是，引用日志只存在于本地仓库，它只是一个记录你在 自己 的仓库里做过什么的日志。 其他人拷贝的仓库里的引用日志不会和你的相同，而你新克隆一个仓库的时候，引用日志是空的，因为你在仓库里还没有操作。 git show head@{2.months.ago} 这条命令只有在你克隆了一个项目至少两个月时才会显示匹配的提交—— 如果你刚刚克隆了仓库，那么它将不会有任何结果返回。\n\ntip   将引用日志想作 git 版的 shell 历史记录如果你有 unix 或者 linux 的背景，不妨将引用日志想作\n      git 版的 shell 历史记录， 重点在于仅与你和你的会话相关，而与他人无关。\n      \n\n\n# 祖先引用\n\n祖先引用是另一种指明一个提交的方式。 如果你在引用的尾部加上一个 ^（脱字符）， git 会将其解析为该引用的上一个提交。 假设你的提交历史是：\n\n$ git log --pretty=format:'%h %s' --graph\n* 734713b fixed refs handling, added gc auto, updated tests\n*   d921970 merge commit 'phedders/rdocs'\n|\\\n| * 35cfb2b some rdoc changes\n* | 1c002dd added some blame and merge stuff\n|/\n* 1c36188 ignore *.gem\n* 9b29157 add open3_detach to gemspec file list\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n你可以使用 head^ 来查看上一个提交，也就是 “head 的父提交”：\n\n$ git show head^\ncommit d921970aadf03b3cf0e71becdaab3147ba71cdef\nmerge: 1c002dd... 35cfb2b...\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 15:08:43 2008 -0800\n\n    merge commit 'phedders/rdocs'\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nnote   在 windows 上转义脱字符在 windows 的 cmd.exe 中，^ 是一个特殊字符，因此需要区别对待。\n       你可以双写它或者将提交引用放在引号中：$ git show head^ # 在 windows 上无法工作 $ git\n       show head^^ # 可以 $ git show \"head^\" # 可以\n       \n\n你也可以在 ^ 后面添加一个数字来指明想要 哪一个 父提交——例如 d921970^2 代表 “d921970 的第二父提交” 这个语法只适用于合并的提交，因为合并提交会有多个父提交。 合并提交的第一父提交是你合并时所在分支（通常为 master），而第二父提交是你所合并的分支（例如 topic）：\n\n$ git show d921970^\ncommit 1c002dd4b536e7479fe34593e72e6c6c1819e53b\nauthor: scott chacon <schacon@gmail.com>\ndate:   thu dec 11 14:58:32 2008 -0800\n\n    added some blame and merge stuff\n\n$ git show d921970^2\ncommit 35cfb2b795a55793d7cc56a6cc2060b4bb732548\nauthor: paul hedderly <paul+git@mjr.org>\ndate:   wed dec 10 22:22:03 2008 +0000\n\n    some rdoc changes\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n另一种指明祖先提交的方法是 ~（波浪号）。 同样是指向第一父提交，因此 head~ 和 head^ 是等价的。 而区别在于你在后面加数字的时候。 head~2 代表“第一父提交的第一父提交”，也就是“祖父提交”——git 会根据你指定的次数获取对应的第一父提交。 例如，在之前的列出的提交历史中，head~3 就是\n\n$ git show head~3\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n也可以写成 head~~~，也是第一父提交的第一父提交的第一父提交：\n\n$ git show head~~~\ncommit 1c3618887afb5fbcbea25b7c013f4e2114448b8d\nauthor: tom preston-werner <tom@mojombo.com>\ndate:   fri nov 7 13:47:59 2008 -0500\n\n    ignore *.gem\n\n\n1\n2\n3\n4\n5\n6\n\n\n你也可以组合使用这两个语法——你可以通过 head~3^2 来取得之前引用的第二父提交（假设它是一个合并提交）。\n\n\n# 提交区间\n\n你已经学会如何单次的提交，现在来看看如何指明一定区间的提交。 当你有很多分支时，这对管理你的分支时十分有用， 你可以用提交区间来解决“这个分支还有哪些提交尚未合并到主分支？”的问题\n\n\n# 双点\n\n最常用的指明提交区间语法是双点。 这种语法可以让 git 选出在一个分支中而不在另一个分支中的提交。 例如，你有如下的提交历史 example history for range selection.\n\n\n\nfigure 137. example history for range selection.\n\n你想要查看 experiment 分支中还有哪些提交尚未被合并入 master 分支。 你可以使用 master..experiment 来让 git 显示这些提交。也就是“在 experiment 分支中而不在 master 分支中的提交”。 为了使例子简单明了，我使用了示意图中提交对象的字母来代替真实日志的输出，所以会显示：\n\n$ git log master..experiment\nd\nc\n\n\n1\n2\n3\n\n\n反过来，如果你想查看在 master 分支中而不在 experiment 分支中的提交，你只要交换分支名即可。 experiment..master 会显示在 master 分支中而不在 experiment 分支中的提交：\n\n$ git log experiment..master\nf\ne\n\n\n1\n2\n3\n\n\n# 查看即将推送到远端的内容\n\n这可以让你保持 experiment 分支跟随最新的进度以及查看你即将合并的内容。 另一个常用的场景是查看你即将推送到远端的内容：\n\n$ git log origin/master..head\n\n\n1\n\n\n这个命令会输出在你当前分支中而不在远程 origin 中的提交。 如果你执行 git push 并且你的当前分支正在跟踪 origin/master，由 git log origin/master..head 所输出的提交就是会被传输到远端服务器的提交。如果你留空了其中的一边， git 会默认为 head。 例如， git log origin/master.. 将会输出与之前例子相同的结果 —— git 使用 head 来代替留空的一边。\n\n\n# 多点\n\n双点语法很好用，但有时候你可能需要两个以上的分支才能确定你所需要的修订， 比如查看哪些提交是被包含在某些分支中的一个，但是不在你当前的分支上。 git 允许你在任意引用前加上 ^ 字符或者 --not 来指明你不希望提交被包含其中的分支。 因此下列三个命令是等价的：\n\n$ git log refa..refb\n$ git log ^refa refb\n$ git log refb --not refa\n\n\n1\n2\n3\n\n\n这个语法很好用，因为你可以在查询中指定超过两个的引用，这是双点语法无法实现的。 比如，你想查看所有被 refa 或 refb 包含的但是不被 refc 包含的提交，你可以使用以下任意一个命令：\n\n$ git log refa refb ^refc\n$ git log refa refb --not refc\n\n\n1\n2\n\n\n这就构成了一个十分强大的修订查询系统，你可以通过它来查看你的分支里包含了哪些东西。\n\n\n# 三点\n\n最后一种主要的区间选择语法是三点，这个语法可以选择出被两个引用 之一 包含但又不被两者同时包含的提交。 再看看之前双点例子中的提交历史。 如果你想看 master 或者 experiment 中包含的但不是两者共有的提交，你可以执行：\n\n$ git log master...experiment\nf\ne\nd\nc\n\n\n1\n2\n3\n4\n5\n\n\n这和通常 log 按日期排序的输出一样，仅仅给出了4个提交的信息。\n\n这种情形下，log 命令的一个常用参数是 --left-right，它会显示每个提交到底处于哪一侧的分支。 这会让输出数据更加清晰。\n\n$ git log --left-right master...experiment\n< f\n< e\n> d\n> c\n\n\n1\n2\n3\n4\n5\n\n\n有了这些工具，你就可以十分方便地查看你 git 仓库中的提交。",charsets:{cjk:!0}},{title:"Git工具-交互式暂存",frontmatter:{title:"Git工具-交互式暂存",date:"2022-01-06T09:51:37.000Z",permalink:"/pages/76d859/",categories:["《Git》学习笔记"],tags:["Git"],titleTag:"转载"},regularPath:"/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20.%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/90.Git%E5%B7%A5%E5%85%B7-%E4%BA%A4%E4%BA%92%E5%BC%8F%E6%9A%82%E5%AD%98.html",relativePath:"Git学习笔记/20.文档笔记/90.Git工具-交互式暂存.md",key:"v-7150bdca",path:"/pages/76d859/",headers:[{level:2,title:"暂存与取消暂存文件",slug:"暂存与取消暂存文件",normalizedTitle:"暂存与取消暂存文件",charIndex:751},{level:2,title:"暂存补丁",slug:"暂存补丁",normalizedTitle:"暂存补丁",charIndex:3468}],lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:"暂存与取消暂存文件 暂存补丁",content:'# Git工具-交互式暂存\n\n本节中的几个交互式 Git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，Git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“Commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 What now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nWhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 TODO 和 index.html 文件，可以输入数字：\n\nUpdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 TODO\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nUpdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 Update>> 提示符后不输入任何东西并直接按回车，Git 将会暂存之前选择的文件：\n\nUpdate>>\nupdated 2 paths\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 TODO 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 TODO 文件，使用 r 或 3（撤消）选项：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nRevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 Git 状态，可以看到已经取消暂存 TODO 文件：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nWhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nReview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ Date Finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\nGit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，Git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 Git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class SimpleGit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nStage this hunk [y,n,a,d,/,j,J,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nStage this hunk [y,n,a,d,/,j,J,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nWhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 TODO\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',normalizedContent:'# git工具-交互式暂存\n\n本节中的几个交互式 git 命令可以帮助你将文件的特定部分组合成提交。 当你在修改了大量文件后，希望这些改动能拆分为若干提交而不是混杂在一起成为一个提交时，这几个工具会非常有用。 通过这种方式，可以确保提交是逻辑上独立的变更集，同时也会使其他开发者在与你工作时很容易地审核。 如果运行 git add 时使用 -i 或者 --interactive 选项，git 将会进入一个交互式终端模式，显示类似下面的东西：\n\n$ git add -i\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n可以看到这个命令以和平时非常不同的视图显示了暂存区——基本上与 git status 是相同的信息，但是更简明扼要一些。 它将暂存的修改列在左侧，未暂存的修改列在右侧。\n\n在这块区域后是“commands”命令区域。 在这里你可以做一些工作，包括暂存文件、取消暂存文件、暂存文件的一部分、添加未被追踪的文件、显示暂存内容的区别。\n\n\n# 暂存与取消暂存文件\n\n如果在 what now> 提示符后键入 u 或 2（更新），它会问你想要暂存哪个文件：\n\nwhat now> u\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n要暂存 todo 和 index.html 文件，可以输入数字：\n\nupdate>> 1,2\n           staged     unstaged path\n* 1:    unchanged        +0/-1 todo\n* 2:    unchanged        +1/-1 index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nupdate>>\n\n\n1\n2\n3\n4\n5\n6\n\n\n每个文件前面的 * 意味着选中的文件将会被暂存。 如果在 update>> 提示符后不输入任何东西并直接按回车，git 将会暂存之前选择的文件：\n\nupdate>>\nupdated 2 paths\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n现在可以看到 todo 与 index.html 文件已经被暂存而 simplegit.rb 文件还未被暂存。 如果这时想要取消暂存 todo 文件，使用 r 或 3（撤消）选项：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> r\n           staged     unstaged path\n  1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> 1\n           staged     unstaged path\n* 1:        +0/-1      nothing todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\nrevert>> [enter]\nreverted one path\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n再次查看 git 状态，可以看到已经取消暂存 todo 文件：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> s\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:    unchanged        +5/-1 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n如果想要查看已暂存内容的区别，可以使用 d 或 6（区别）命令。 它会显示暂存文件的一个列表，可以从中选择想要查看的暂存区别。 这跟你在命令行指定 git diff --cached 非常相似：\n\n*** commands ***\n  1: [s]tatus     2: [u]pdate      3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff        7: [q]uit       8: [h]elp\nwhat now> d\n           staged     unstaged path\n  1:        +1/-1      nothing index.html\nreview diff>> 1\ndiff --git a/index.html b/index.html\nindex 4d07108..4335f49 100644\n--- a/index.html\n+++ b/index.html\n@@ -16,7 +16,7 @@ date finder\n\n <p id="out">...</p>\n\n-<div id="footer">contact : support@github.com</div>\n+<div id="footer">contact : email.support@github.com</div>\n\n <script type="text/javascript">\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n通过这些基本命令，可以使用交互式添加模式来轻松地处理暂存区。\n\n\n# 暂存补丁\n\ngit 也可以暂存文件的特定部分。 例如，如果在 simplegit.rb 文件中做了两处修改，但只想要暂存其中的一个而不是另一个，git 会帮你轻松地完成。 在和上一节一样的交互式提示符中，输入 p 或 5（补丁）。 git 会询问你想要部分暂存哪些文件；然后，对已选择文件的每一个部分，它都会一个个地显示文件区别并询问你是否想要暂存它们：\n\ndiff --git a/lib/simplegit.rb b/lib/simplegit.rb\nindex dd5ecc4..57399e0 100644\n--- a/lib/simplegit.rb\n+++ b/lib/simplegit.rb\n@@ -22,7 +22,7 @@ class simplegit\n   end\n\n   def log(treeish = \'master\')\n-    command("git log -n 25 #{treeish}")\n+    command("git log -n 30 #{treeish}")\n   end\n\n   def blame(path)\nstage this hunk [y,n,a,d,/,j,j,g,e,?]?\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n这时有很多选项。 输入 ? 显示所有可以使用的命令列表：\n\nstage this hunk [y,n,a,d,/,j,j,g,e,?]? ?\ny - stage this hunk\nn - do not stage this hunk\na - stage this and all the remaining hunks in the file\nd - do not stage this hunk nor any of the remaining hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nj - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nk - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n通常情况下可以输入 y 或 n 来选择是否要暂存每一个区块， 当然，暂存特定文件中的所有部分或为之后的选择跳过一个区块也是非常有用的。 如果你只暂存文件的一部分，状态输出可能会像下面这样：\n\nwhat now> 1\n           staged     unstaged path\n  1:    unchanged        +0/-1 todo\n  2:        +1/-1      nothing index.html\n  3:        +1/-1        +4/-0 lib/simplegit.rb\n\n\n1\n2\n3\n4\n5\n\n\nsimplegit.rb 文件的状态很有趣。 它显示出若干行被暂存与若干行未被暂存。 已经部分地暂存了这个文件。 在这时，可以退出交互式添加脚本并且运行 git commit 来提交部分暂存的文件。\n\n也可以不必在交互式添加模式中做部分文件暂存——可以在命令行中使用 git add -p 或 git add --patch 来启动同样的脚本。\n\n更进一步地，可以使用 git reset --patch 命令的补丁模式来部分重置文件， 通过 git checkout --patch 命令来部分检出文件与 git stash save --patch 命令来部分暂存文件。 我们将会在接触这些命令的高级使用方法时了解更多详细信息。',charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroText:"Yuqing-blog",tagline:"学而不思则罔，思而不学则殆。"},regularPath:"/",relativePath:"index.md",key:"v-3d3ada26",path:"/",lastUpdated:"2022/5/26 16:27:01",lastUpdatedTimestamp:1653553621e3,headersStr:null,content:"",normalizedContent:"",charsets:{}}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"记录",link:"/technology/"},{text:"关于",link:"/about/"},{text:"收藏",link:"/pages/beb6c0bd8a66cea6/"},{text:"索引",link:"/archives/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]}],sidebarDepth:2,logo:"/img/logo.png",repo:"liyuqingGG/Yuqing_blog",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!0,editLinkText:"编辑",sidebar:{"/00.目录页/":[["03.记录.md","记录","/technology"]],catalogue:{"记录":"/technology","git相关":"/pages/3ac5a6/"},"/03.记录/":[{title:"git",collapsable:!0,children:[["01.git/01.git相关.md","git相关","/pages/3ac5a6/","转载"]]},{title:"Mysql",collapsable:!0,children:[["02.Mysql/01.mysql的安装.md","mysql的安装","/pages/42ea29/","原创"],["02.Mysql/02.mysql语法相关.md","mysql语法相关","/pages/1ba760/","原创"]]},{title:"Python",collapsable:!0,children:[{title:"Django",collapsable:!0,children:[["03.Python/01.Django/02.django-首次启动.md","django-首次启动","/pages/f95cf0/","原创"]]},{title:"Unittest",collapsable:!0,children:[["03.Python/02.Unittest/01.unittest基础.md","unittest基础","/pages/a13db2/","原创"],["03.Python/02.Unittest/02.python+unittest+request等模块搭建接口自动化框架.md","python+unittest+request等模块搭建接口自动化框架","/pages/8d13e3/","原创"]]},{title:"一些模块方法",collapsable:!0,children:[["03.Python/04.一些模块方法/01.openpyxl-操作excel读取数据.md","openpyxl-操作excel读取数据","/pages/44c83f/","原创"],["03.Python/04.一些模块方法/02.requests和一些其他模块.md","requests-和一些其他模块","/pages/51754f/","原创"],["03.Python/04.一些模块方法/03.re-正则提取.md","re-正则提取","/pages/73d2aa/","原创"],["03.Python/04.一些模块方法/04.configparser&json读取配置文件&json文件.md","configparser&json读取配置文件&json文件","/pages/2f1c24/","原创"]]}]},{title:"测试",collapsable:!0,children:[{title:"接口测试",collapsable:!0,children:[["04.测试/01.接口测试/01.接口测试.md","接口测试","/pages/a7e63e/","原创"],["04.测试/01.接口测试/02.jmeter.md","jmeter","/pages/7ab77c/","原创"]]}]},{title:"测试学习笔记",collapsable:!0,children:[["05.测试学习笔记/01.oneday-测试基础-软件测试的定义及分类.md","oneday-测试基础-软件测试的定义及分类","/pages/040e07/","原创原创"],["05.测试学习笔记/02.twoday-软件的生命周期&测试流程.md","twoday-软件的生命周期&测试流程","/pages/08c68a/","那必须是我了"],["05.测试学习笔记/03.threeday-测试需求分析.md","threeday-测试需求分析","/pages/65bf04/"],["05.测试学习笔记/04.fourday-测试用例四大金刚.md","fourday-测试用例四大金刚","/pages/1b8a63/"],["05.测试学习笔记/05.fiveday-测试用例的编写&用例评审.md","fiveday-测试用例的编写&用例评审","/pages/f8d3dd/"],["05.测试学习笔记/06.sixday_bug生命周期.md","sixday_bug生命周期","/pages/995ea1/"]]},{title:"问题合集",collapsable:!0,children:[["06.问题合集/01.问题合集(更新).md","问题合集(更新)","/pages/99ef91/","那必须是原创"]]}],"/05.关于/":[["01.关于.md","关于","/about"]],"/06.收藏/":[["01.网站.md","网站","/pages/beb6c0bd8a66cea6","推荐"]],"/Git学习笔记/":[{title:"手册",collapsable:!0,children:[["10.手册/00.常用Git命令清单.md","常用Git命令清单","/pages/8292d8/"],["10.手册/03.Git变基合并.md","Git变基合并","/pages/c10281/"],["10.手册/06.Git命令思维导图.md","Git命令思维导图","/pages/4cbc21/"]]},{title:"文档笔记",collapsable:!0,children:[["20.文档笔记/10.Git基础与命令.md","Git基础与命令","/pages/635088/","转载"],["20.文档笔记/20.Git分支-分支原理.md","Git分支-分支原理","/pages/4bef1a/","转载"],["20.文档笔记/30.Git分支的新建与合并-分支操作.md","Git分支的新建与合并-分支操作","/pages/ea5a8c/","转载"],["20.文档笔记/40.Git分支管理-查看分支.md","Git分支管理-查看分支","/pages/a399b3/","转载"],["20.文档笔记/50.Git分支开发工作流.md","Git分支开发工作流","/pages/49ee30/","转载"],["20.文档笔记/60.Git分支-远程分支.md","Git分支-远程分支","/pages/574d62/","转载"],["20.文档笔记/70.Git分支-变基.md","Git分支-变基","/pages/3a3247/","转载"],["20.文档笔记/80.Git工具-查看修订版本.md","Git工具-查看修订版本","/pages/c984d1/","转载"],["20.文档笔记/90.Git工具-交互式暂存.md","Git工具-交互式暂存","/pages/76d859/","转载"],["20.文档笔记/100.Git工具-重写历史.md","Git工具-重写历史","/pages/1832fe/","转载"],["20.文档笔记/110.Git工具-重置揭密.md","Git工具-重置揭密","/pages/d9e9c6/","转载"]]}]},author:{name:"yuqingli",link:"https://github.com/liyuqingGG"},blogger:{avatar:"https://fastly.jsdelivr.net/gh/liyuqinggg/cdn@1.0/me.png",name:"Yuqing Li",slogan:"业精于勤荒于嬉"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:liyuqinggg@foxmail.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/liyuqingGG"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=6954319449"}]},footer:{createYear:2022,copyrightInfo:'Yuqing Li | <a href="https://github.com/xugaoyi/vuepress-theme-vdoing/blob/master/LICENSE" target="_blank">家里蹲</a>'}},locales:{"/":{lang:"zh-CN",title:"Yuqing-blog",description:"web前端技术博客,专注web前端学习与总结。JavaScript,js,ES6,TypeScript,vue,React,python,css3,html5,Node,git,github等技术文章。",path:"/"}}};var xc=t(92),_c=t(93),Ec=t(11);var kc={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Ec.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Ec.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(Ec.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,i=n.length;r<i;r++){const{frontmatter:{categories:i,tags:o}}=n[r];"array"===Object(Ec.n)(i)&&i.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(Ec.n)(o)&&o.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ft.component(xc.default),Ft.component(_c.default);function wc(n){return n.toString().padStart(2,"0")}t(235);Ft.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,92))),Ft.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,93))),Ft.component("Badge",()=>Promise.all([t.e(0),t.e(3)]).then(t.bind(null,361)));t(236);var Ac=[({Vue:n,options:e,router:t,siteData:r})=>{},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${wc(n.getUTCMonth()+1)}-${wc(n.getUTCDate())} ${wc(n.getUTCHours())}:${wc(n.getUTCMinutes())}:${wc(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(kc)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?503f098e7e5b3a5b5d8c5fc2938af002";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],$c=[];class Tc extends class{constructor(){this.store=new Ft({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Ft.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Tc.prototype,{getPageAsyncComponent:os,getLayoutAsyncComponent:as,getAsyncComponent:ss,getVueComponent:cs});var jc={install(n){const e=new Tc;n.$vuepress=e,n.prototype.$vuepress=e}};function Cc(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Sc={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ds("pageKey",e),Ft.component(e)||Ft.component(e,os(e)),Ft.component(e)?n(e):n("")}},Oc={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Ic={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Dc=(t(237),t(238),Object(gc.a)(Ic,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Bc={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Ft.config.productionTip=!1,Ft.use(Na),Ft.use(jc),Ft.mixin(function(n,e,t=Ft){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),i=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),o={};return Object.keys(i).reduce((n,e)=>(e.startsWith("$")&&(n[e]=i[e].get),n),o),{computed:o}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},yc)),Ft.component("Content",Sc),Ft.component("ContentSlotsDistributor",Oc),Ft.component("OutboundLink",Dc),Ft.component("ClientOnly",Bc),Ft.component("Layout",as("Layout")),Ft.component("NotFound",as("NotFound")),Ft.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"9135d84"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:yc.routerBase||yc.base,t=new Na({base:e,mode:"history",fallback:!1,routes:bc,scrollBehavior:(n,e,t)=>t||(n.hash?!Ft.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Cc(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Cc(n,t)?r(t):r()}else r();else{const t=e.path+"/",i=e.path+".html";Cc(n,i)?r(i):Cc(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(Ac.filter(n=>"function"==typeof n).map(e=>e({Vue:Ft,options:r,router:t,siteData:yc,isServer:n})))}catch(n){console.error(n)}return{app:new Ft(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},$c.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);